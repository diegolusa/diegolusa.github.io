{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vindo! \u00b6 Este site foi especialmente desenvolvido para compartilhar conhecimento e dicas sobre Tecnologia da Informa\u00e7\u00e3o. Em especial, abordaremos temas das \u00e1reas de Programa\u00e7\u00e3o, Banco de Dados e Intelig\u00eancia Artificial. Este espa\u00e7o tamb\u00e9m ser\u00e1 utilizado para notas de aula das disciplinas que leciono, de modo que as atualiza\u00e7\u00f5es ser\u00e3o frequentes.","title":"Home"},{"location":"#bem-vindo","text":"Este site foi especialmente desenvolvido para compartilhar conhecimento e dicas sobre Tecnologia da Informa\u00e7\u00e3o. Em especial, abordaremos temas das \u00e1reas de Programa\u00e7\u00e3o, Banco de Dados e Intelig\u00eancia Artificial. Este espa\u00e7o tamb\u00e9m ser\u00e1 utilizado para notas de aula das disciplinas que leciono, de modo que as atualiza\u00e7\u00f5es ser\u00e3o frequentes.","title":"Bem-vindo!"},{"location":"about/","text":"Me chamo Diego A. Lusa . Sou Professor de Ensino B\u00e1sico, T\u00e9cnico e Tecnol\u00f3gico do IFRS - Campus Sert\u00e3o . Atuo em diferentes disciplinas da \u00e1rea de Tecnologia da Informa\u00e7\u00e3o, principalmente nas \u00e1reas de programa\u00e7\u00e3o e banco de dados. Tamb\u00e9m leciono disciplinas de inform\u00e1tica b\u00e1sica e l\u00f3gica de programa\u00e7\u00e3o. Este site foi especialmente desenvolvimento como um reposit\u00f3rio de conte\u00fado elaborado para as diferentes disciplinas em que atuo, servindo tamb\u00e9m ao objetivo de compartilhar conhecimento e experi\u00eancias com todos os interessados. Espero que este conte\u00fado lhe seja \u00fatil! Cordiais sauda\u00e7\u00f5es ;)","title":"Sobre"},{"location":"banco-dados/hospital_db/","text":"Em nossos tutoriais, utilizaremos a base de dados sig_hospitalar_db como estudo de caso. Trata-se de uma base que mapeia o universo de discurso de um hospital fict\u00edcio. Logo temos tabelas armazenando dados de pacientes, acompanhantes, profissionais, interna\u00e7\u00f5es, medica\u00e7\u00f5es e procedimentos, todas de modo simplificado, com finalidade did\u00e1tica, apenas. Observe, portanto, que o foco est\u00e1 na estrutura da base e n\u00e3o propriamente na fidedignidade com o mapeamento de dados reais de ambientes hospitalares. Considerando que voc\u00ea j\u00e1 tenha realizado a instala\u00e7\u00e3o do servidor PostgreSQL em sua m\u00e1quina, passaremos ao passo seguinte, no qual a base de dados sig_hospitalar_db ser\u00e1 criada. Tal opera\u00e7\u00e3o pode ser realizada via psql ou por meio da IDE de sua prefer\u00eancia ( PgAdmin4 , por exemplo). Caso opte pelo psql , utilize o comando create database sig_hospitalar_db; no terminal. Agora, conectado \u00e0 base sig_hospitalar_db , proceda com a execu\u00e7\u00e3o dos comandos abaixo na \u00edntegra. begin ; create domain t_nome as varchar ( 200 ) not null check ( value ~ '[a-zA-z]+' ); create table bairro ( id serial not null primary key , nome t_nome , cidade_id integer not null ); insert into bairro values ( 1 , 'Centro' , 1 ), ( 2 , 'Sol Nascente' , 1 ), ( 3 , 'S\u00e3o Paulo' , 1 ), ( 4 , 'Vera Cruz' , 2 ), ( 5 , 'Centro' , 2 ), ( 6 , 'S\u00e3o Cristov\u00e3o' , 2 ), ( 7 , 'Centro' , 3 ), ( 8 , 'Tr\u00eas Vendas' , 3 ), ( 9 , 'F\u00e1tima' , 3 ); create table cidade ( id serial not null primary key , nome t_nome ); insert into cidade values ( 1 , 'Tapejara' ), ( 2 , 'Passo Fundo' ), ( 3 , 'Erechim' ); create domain t_cnpj as char ( 14 ) check ( value ~ '^[0-9]{14}$' ); create domain t_cpf as char ( 11 ) check ( value ~ '^[0-9]{11}$' ); create table convenio ( id serial not null primary key , razao_social t_nome , cnpj t_cnpj not null unique , descricao text ); comment on table convenio is 'Armazena os diferentes planos de sa\u00fade utilizados pelos pacientes em suas interna\u00e7\u00f5es' ; insert into convenio values ( 1 , 'UNIMED' , '16034061000100' , null ), ( 2 , 'IPE Sa\u00fade' , '40355755000123' , null ), ( 3 , 'Cassi' , '63364447000160' , null ); create table diagnostico ( id serial not null primary key , cid char ( 4 ) not null unique , nome t_nome , descricao text ); comment on table diagnostico is 'Armazena dados acerca dos diagn\u00f3sticos m\u00e9dicos' ; comment on column diagnostico . cid is 'Classifica\u00e7\u00e3o Internacional de Doen\u00e7as' ; insert into diagnostico ( id , cid , nome ) VALUES ( 1 , 'A000' , 'C\u00f3lera devida a Vibrio cholerae 01, bi\u00f3tipo cholerae' ), ( 2 , 'A009' , 'C\u00f3lera n\u00e3o especificada' ), ( 3 , 'B000' , 'Eczema herp\u00e9tico' ), ( 4 , 'B008' , 'Outras formas de infec\u00e7\u00e3o devida ao v\u00edrus do herpes' ); create table diagnostico_prescricao ( prescricao_id integer not null , diagnostico_id integer not null , primary key ( prescricao_id , diagnostico_id ) ); comment on table diagnostico_prescricao is 'Armazena os diagn\u00f3sticos da prescri\u00e7\u00e3o' ; insert into diagnostico_prescricao values ( 1 , 2 ), ( 2 , 1 ), ( 3 , 4 ), ( 4 , 4 ); create table enfermeiro ( pessoa_id integer not null primary key , coren char ( 7 ) not null check ( coren ~ '^[0-9]{7}$' ) ); comment on column enfermeiro . coren is 'C\u00f3digo de registro do enfermeiro no Conselho Regional de Enfermagem' ; insert into enfermeiro values ( 1 , '0123654' ), ( 2 , '0251687' ); create table especialidade ( id serial not null primary key , nome t_nome ); comment on table especialidade is 'Armazena as especialidades m\u00e9dicas, como cardiologia, pediatria, etc.' ; insert into especialidade values ( 1 , 'Cardiologia' ), ( 2 , 'Pediatria' ), ( 3 , 'Otorinolaringologia' ), ( 4 , 'Ortopedia' ); create table evolucao_internacao ( internacao_id integer not null , data_hora timestamp not null default CURRENT_TIMESTAMP , evolucao text not null , enfermeiro_id integer not null , primary key ( internacao_id , data_hora ) ); comment on table evolucao_internacao is 'Evolu\u00e7\u00e3o \u00e9 a descri\u00e7\u00e3o do estado do paciente. Os enfermeiros fazem v\u00e1rias evolu\u00e7\u00f5es do paciente durante a interna\u00e7\u00e3o' ; insert into evolucao_internacao values ( 1 , default , 'Pariatur tempor nulla aliquip elit est proident consequat deserunt incididunt et minim. Aliquip consequat cupidatat do proident aliquip aliquip magna sit consequat anim aliqua proident. Amet mollit in consectetur ut. Sint laborum elit occaecat laboris. Consequat veniam dolor proident fugiat. Commodo qui aliqua anim veniam non velit non reprehenderit consequat dolor voluptate cillum. Tempor et qui tempor consequat. Sunt labore veniam non duis eiusmod laboris voluptate sit dolore nisi. Incididunt eiusmod nostrud eu consequat velit ex eu adipisicing tempor tempor occaecat anim. Ex commodo nisi ullamco ex officia consectetur eu laborum. Lorem magna Lorem aliqua ullamco adipisicing sunt consectetur reprehenderit minim dolore voluptate qui quis. Voluptate anim fugiat consectetur irure commodo aliquip nisi adipisicing. Cillum adipisicing nostrud sit anim mollit aliqua do deserunt exercitation cupidatat. Officia dolor duis incididunt minim velit cillum et cillum adipisicing esse Lorem labore sunt reprehenderit. Nisi fugiat incididunt culpa dolore ex ullamco sit et velit est sit ut. Do sint sint magna aliqua veniam sint aute velit adipisicing aute tempor sint aliquip irure. Non sunt consequat eiusmod deserunt anim. Nostrud tempor sint eiusmod pariatur officia aliqua reprehenderit. Ex reprehenderit enim Lorem proident id eiusmod id eiusmod est minim. Sunt sint et reprehenderit occaecat do aute amet. Sit do consectetur in tempor deserunt sunt velit mollit do proident sunt ex. Excepteur aliqua fugiat ut tempor dolore nostrud consequat reprehenderit anim quis consectetur nulla proident qui. Sit dolor Lorem proident laboris aute consequat irure cillum mollit nisi fugiat duis. Est dolore qui sunt quis voluptate magna esse sint occaecat. Occaecat voluptate nulla tempor veniam pariatur consectetur sunt non elit cupidatat deserunt reprehenderit elit laboris. Lorem duis officia sit sit voluptate ea dolore. Nostrud anim ea adipisicing cillum. Aute ipsum est dolor magna non. Consectetur aliqua esse reprehenderit qui aliquip do tempor irure. Amet est deserunt do in.' , 2 ); insert into evolucao_internacao values ( 2 , default , 'Pariatur tempor nulla aliquip elit est proident consequat deserunt incididunt et minim. Aliquip consequat cupidatat do proident aliquip aliquip magna sit consequat anim aliqua proident. Amet mollit in consectetur ut. Sint laborum elit occaecat laboris. Consequat veniam dolor proident fugiat. Commodo qui aliqua anim veniam non velit non reprehenderit consequat dolor voluptate cillum. Tempor et qui tempor consequat. Sunt labore veniam non duis eiusmod laboris voluptate sit dolore nisi. Incididunt eiusmod nostrud eu consequat velit ex eu adipisicing tempor tempor occaecat anim. Ex commodo nisi ullamco ex officia consectetur eu laborum. Lorem magna Lorem aliqua ullamco adipisicing sunt consectetur reprehenderit minim dolore voluptate qui quis. Voluptate anim fugiat consectetur irure commodo aliquip nisi adipisicing. Cillum adipisicing nostrud sit anim mollit aliqua do deserunt exercitation cupidatat. Officia dolor duis incididunt minim velit cillum et cillum adipisicing esse Lorem labore sunt reprehenderit. Nisi fugiat incididunt culpa dolore ex ullamco sit et velit est sit ut. Do sint sint magna aliqua veniam sint aute velit adipisicing aute tempor sint aliquip irure. Non sunt consequat eiusmod deserunt anim. Nostrud tempor sint eiusmod pariatur officia aliqua reprehenderit. Ex reprehenderit enim Lorem proident id eiusmod id eiusmod est minim. Sunt sint et reprehenderit occaecat do aute amet. Sit do consectetur in tempor deserunt sunt velit mollit do proident sunt ex. Excepteur aliqua fugiat ut tempor dolore nostrud consequat reprehenderit anim quis consectetur nulla proident qui. Sit dolor Lorem proident laboris aute consequat irure cillum mollit nisi fugiat duis. Est dolore qui sunt quis voluptate magna esse sint occaecat. Occaecat voluptate nulla tempor veniam pariatur consectetur sunt non elit cupidatat deserunt reprehenderit elit laboris. Lorem duis officia sit sit voluptate ea dolore. Nostrud anim ea adipisicing cillum. Aute ipsum est dolor magna non. Consectetur aliqua esse reprehenderit qui aliquip do tempor irure. Amet est deserunt do in.' , 1 ); insert into evolucao_internacao values ( 3 , default , 'Pariatur tempor nulla aliquip elit est proident consequat deserunt incididunt et minim. Aliquip consequat cupidatat do proident aliquip aliquip magna sit consequat anim aliqua proident. Amet mollit in consectetur ut. Sint laborum elit occaecat laboris. Consequat veniam dolor proident fugiat. Commodo qui aliqua anim veniam non velit non reprehenderit consequat dolor voluptate cillum. Tempor et qui tempor consequat. Sunt labore veniam non duis eiusmod laboris voluptate sit dolore nisi. Incididunt eiusmod nostrud eu consequat velit ex eu adipisicing tempor tempor occaecat anim. Ex commodo nisi ullamco ex officia consectetur eu laborum. Lorem magna Lorem aliqua ullamco adipisicing sunt consectetur reprehenderit minim dolore voluptate qui quis. Voluptate anim fugiat consectetur irure commodo aliquip nisi adipisicing. Cillum adipisicing nostrud sit anim mollit aliqua do deserunt exercitation cupidatat. Officia dolor duis incididunt minim velit cillum et cillum adipisicing esse Lorem labore sunt reprehenderit. Nisi fugiat incididunt culpa dolore ex ullamco sit et velit est sit ut. Do sint sint magna aliqua veniam sint aute velit adipisicing aute tempor sint aliquip irure. Non sunt consequat eiusmod deserunt anim. Nostrud tempor sint eiusmod pariatur officia aliqua reprehenderit. Ex reprehenderit enim Lorem proident id eiusmod id eiusmod est minim. Sunt sint et reprehenderit occaecat do aute amet. Sit do consectetur in tempor deserunt sunt velit mollit do proident sunt ex. Excepteur aliqua fugiat ut tempor dolore nostrud consequat reprehenderit anim quis consectetur nulla proident qui. Sit dolor Lorem proident laboris aute consequat irure cillum mollit nisi fugiat duis. Est dolore qui sunt quis voluptate magna esse sint occaecat. Occaecat voluptate nulla tempor veniam pariatur consectetur sunt non elit cupidatat deserunt reprehenderit elit laboris. Lorem duis officia sit sit voluptate ea dolore. Nostrud anim ea adipisicing cillum. Aute ipsum est dolor magna non. Consectetur aliqua esse reprehenderit qui aliquip do tempor irure. Amet est deserunt do in.' , 2 ); create table funcionario ( pessoa_id integer not null primary key , pis_pasep char ( 11 ) not null check ( pis_pasep ~ '^[0-9]{11}$' ) ); insert into funcionario values ( 1 , '83919800958' ), ( 2 , '84811096999' ), ( 3 , '31859934560' ), ( 4 , '12649826837' ), ( 5 , '94340833899' ); create table internacao ( id bigserial not null primary key , medico_id integer not null , leito_id integer not null , paciente_id integer not null , data_hora_internacao timestamp not null default CURRENT_TIMESTAMP , tipo_clinica char ( 1 ) not null default 'M' check ( tipo_clinica in ( 'M' , 'O' , 'P' , 'A' ) ), convenio_id integer not null , data_hora_alta timestamp , registrante_id integer not null , anamnese text not null ); comment on column internacao . tipo_clinica is 'M - M\u00e9dica, O - Obst\u00e9trica, C - Cir\u00fargica, P - Pedi\u00e1trica, A - Ambulat\u00f3rio ' ; comment on table internacao is 'Interna\u00e7\u00e3o \u00e9 o procedimento em que o paciente torna-se interno ao hospital para tratar de sua sa\u00fade' ; insert into internacao ( id , medico_id , leito_id , paciente_id , registrante_id , anamnese , convenio_id ) values ( 1 , 8 , 1 , 12 , 4 , 'Paciente queixou-se de dores abdominais intensas' , 1 ), ( 2 , 9 , 2 , 13 , 4 , 'Paciente apresenta febre de 39 graus' , 2 ), ( 3 , 10 , 2 , 12 , 4 , 'Paciente apresenta desequilibrio e s\u00edncopes frequentes' , 3 ), ( 4 , 11 , 3 , 14 , 4 , 'Paciente epis\u00f3dios de amn\u00e9sia e hipersonia ' , 3 ), ( 5 , 8 , 4 , 15 , 4 , 'Paciente queixou-se de dores lombares intensas' , 1 ); create table leito ( id serial not null primary key , codigo varchar ( 3 ) not null unique , quarto_id integer not null , descricao text ); insert into leito values ( 1 , 'A1' , 1 , NULL ), ( 2 , 'A2' , 1 , NULL ), ( 3 , 'A3' , 1 , NULL ), ( 4 , 'B1' , 2 , NULL ), ( 5 , 'B2' , 2 , NULL ), ( 6 , 'B3' , 2 , NULL ), ( 7 , 'C1' , 3 , NULL ), ( 8 , 'C2' , 3 , NULL ), ( 9 , 'C3' , 3 , NULL ), ( 10 , 'D1' , 4 , NULL ), ( 11 , 'D2' , 4 , NULL ), ( 12 , 'D3' , 4 , NULL ); create table quarto ( id serial not null primary key , nome varchar ( 20 ) not null unique , posto_id integer not null , tipo char ( 1 ) not null check ( tipo in ( 'P' , 'N' )), numero_banheiros smallint not null ); insert into quarto values ( 1 , 'A' , 1 , 'P' , 2 ), ( 2 , 'B' , 2 , 'P' , 1 ), ( 3 , 'C' , 3 , 'P' , 1 ), ( 4 , 'D' , 4 , 'P' , 3 ); create table material ( id serial not null primary key , nome t_nome , valor money not null , descricao text ) ; comment on table material is 'Itens n\u00e3o medicamentosos utilizados no hospital' ; insert into material values ( 1 , 'Esparadrapo' , 0 . 56 , null ), ( 2 , 'Micropore' , 1 . 5 , null ), ( 3 , 'Adesivo' , 2 . 5 , null ), ( 4 , 'Agulha para Sutura' , 3 . 50 , null ), ( 5 , 'Algod\u00e3o' , 2 . 89 , null ), ( 6 , 'Atadura' , 8 . 56 , null ), ( 7 , 'Curativos' , 15 . 69 , null ), ( 8 , 'Bolsa T\u00e9rmica' , 12 . 5 , null ), ( 9 , 'Coletores' , 40 , null ), ( 10 , 'Compressas' , 2 . 98 , null ); create table material_prescricao ( prescricao_id integer not null , material_id integer not null , data_hora_lancamento timestamp not null default current_timestamp , quantidade numeric ( 20 , 3 ) not null , primary key ( prescricao_id , material_id , data_hora_lancamento ) ); comment on table material_prescricao is 'Armazena os diferentes materiais usados na prescri\u00e7\u00e3o' ; insert into material_prescricao values ( 1 , 1 , default , 12 ), ( 1 , 5 , default , 6 ),( 1 , 10 , default , 5 ), ( 2 , 3 , default , 12 ), ( 2 , 6 , default , 6 ),( 2 , 9 , default , 5 ), ( 3 , 2 , default , 12 ), ( 3 , 7 , default , 6 ),( 3 , 8 , default , 5 ); create table medicamento ( id serial not null primary key , denominacao_generica varchar ( 200 ) not null , concentracao varchar ( 20 ) not null , forma_farmaceutica varchar ( 50 ) not null , descricao text ); insert into medicamento values ( 1 , 'cloreto de s\u00f3dio' , '3,4 mEq/mL (20%)' , 'solu\u00e7\u00e3o injet\u00e1vel' ), ( 2 , 'cloridrato de amiodarona' , '50 mg/mL' , 'solu\u00e7\u00e3o injet\u00e1vel' ), ( 3 , 'cloridrato de amiodarona' , '200 mg' , 'comprimido' ), ( 4 , 'cloridrato de clindamicina' , '150 mg' , 'c\u00e1psula' ), ( 5 , 'cloridrato de clomipramina' , '10 mg' , 'comprimido' ); create table medico ( pessoa_id integer not null primary key , crm char ( 6 ) not null check ( crm ~ '^[0-6]{6}' ) ); insert into medico values ( 8 , '000345' ),( 9 , '000346' ),( 10 , '000350' ),( 11 , '000351' ); create table medico_especialidade ( medico_id integer not null , especialidade_id integer not null , primary key ( medico_id , especialidade_id ) ); comment on table medico_especialidade is 'Relaciona as especialidades aos m\u00e9dicos' ; insert into medico_especialidade values ( 8 , 1 ),( 9 , 4 ),( 10 , 2 ),( 11 , 3 ); create table medicamento_prescricao ( prescricao_id integer not null , medicamento_id integer not null , data_hora_lancamento timestamp not null default CURRENT_TIMESTAMP , aprazamento varchar ( 100 ) not null , dosagem varchar ( 100 ) not null , primary key ( prescricao_id , medicamento_id , data_hora_lancamento ) ); comment on table medicamento_prescricao is 'Armazena os diferentes medicamentos usados na prescri\u00e7\u00e3o' ; insert into medicamento_prescricao values ( 1 , 3 , default , '6/6 horas' , '1 comprimido' ), ( 1 , 4 , default , '12/12 horas' , '1 capsula' ), ( 1 , 2 , default , '6/6 horas' , '10 ml' ); create table paciente ( pessoa_id integer not null primary key , responsavel_id integer not null , nome_mae t_nome , cartao_sus char ( 15 ) not null unique check ( cartao_sus ~ '^[0-9]{14}' ) ); insert into paciente values ( 12 , 16 , 'Fabiana Ana S\u00f4nia Corte Real' , '267584097280006' ), ( 13 , 17 , 'Marcela Ant\u00f4nia Liz Arag\u00e3o' , '147243223830007' ), ( 14 , 18 , 'Daiane Olivia Cristiane Novaes' , '223139799940002' ), ( 15 , 19 , 'Alana Rita Betina Brito' , '816428033820008' ); create table pessoa ( id serial not null primary key , nome t_nome , telefone varchar ( 11 ) not null check ( telefone ~ '^[0-9]{10,11}$' ), cpf t_cpf , identidade varchar ( 10 ) not null , rua_id integer not null , numero_endereco integer , complemento_endereco varchar ( 100 ), data_nascimento date not null , sexo char ( 1 ) not null check ( sexo in ( 'M' , 'F' )), cep_endereco char ( 8 ) not null check ( cep_endereco ~ '^[0-9]{8,9}$' ) ); insert into pessoa values ( 1 , 'Lorena F\u00e1tima Carolina Nunes' , '5137140997' , '50037489062' , '265780329' , 1 , '635' , '' , '01/11/1996' , 'F' , '99910020' ), ( 2 , 'Diogo Hugo C\u00e9sar Silva' , '5135356502' , '66911317037' , '238012669' , 2 , '197' , '' , '27/02/1996' , 'M' , '99810020' ), ( 3 , 'Matheus Manoel Martin Viana' , '5135703717' , '53775328050' , '199665953' , 3 , '402' , '' , '12/11/1996' , 'M' , '99710020' ), ( 4 , 'Kevin Marcos Vinicius Raimundo Vieira' , '5135356503' , '66911317037' , '238012669' , 2 , '197' , '' , '27/02/1996' , 'F' , '69910020' ), ( 5 , 'Ben\u00edcio Alexandre Andr\u00e9 Rocha' , '5135356504' , '66911317078' , '238012669' , 2 , '197' , '' , '27/02/1995' , 'F' , '78910030' ), ( 6 , 'Lorena Vit\u00f3ria da Silva' , '5135356505' , '66911317058' , '238012669' , 2 , '197' , '' , '27/02/1994' , 'F' , '76910029' ), ( 7 , 'Andreia Mariah Rocha' , '5135356506' , '66911317034' , '238012669' , 2 , '197' , '' , '27/02/1993' , 'F' , '76910028' ), ( 8 , 'Elza Mariane Sophia Bernardes' , '5135356507' , '66911317056' , '238012669' , 2 , '197' , '' , '27/02/1994' , 'F' , '76910027' ), ( 9 , 'D\u00e9bora Ester Adriana Rodrigues' , '5135356508' , '66911317090' , '238012669' , 2 , '197' , '' , '27/02/1993' , 'F' , '76910026' ), ( 10 , 'Joana Olivia Castro' , '5135356510' , '66911317067' , '238012669' , 2 , '197' , '' , '27/02/1992' , 'F' , '76910025' ), ( 11 , 'Giovana Cl\u00e1udia da Silva' , '5135356512' , '66911317056' , '238012669' , 2 , '197' , '' , '27/02/1991' , 'F' , '76910024' ), ( 12 , 'Lorena Vit\u00f3ria Jesus' , '5135356513' , '66911317040' , '238012669' , 2 , '197' , '' , '27/02/1999' , 'F' , '76910023' ), ( 13 , 'Fl\u00e1via L\u00edvia Martins' , '5135356514' , '66911317039' , '238012669' , 2 , '197' , '' , '27/02/1998' , 'F' , '76910022' ), ( 14 , 'Angela da Mata' , '5135356515' , '66911317041' , '238011669' , 2 , '197' , '' , '27/02/1995' , 'F' , '76910321' ), ( 15 , 'Marcia Fagundes' , '5135356515' , '66911317051' , '238112669' , 2 , '197' , '' , '27/02/1995' , 'F' , '76912021' ), ( 16 , 'Artur da Mata' , '5135356515' , '66911317061' , '231012669' , 2 , '197' , '' , '27/02/1995' , 'F' , '76911021' ), ( 17 , 'Maiki Dellani' , '5135756515' , '66421317061' , '233014669' , 2 , '197' , '' , '28/02/1995' , 'F' , '76611021' ), ( 18 , 'Fabio Dellani' , '5135656515' , '66431317061' , '233018669' , 2 , '197' , '' , '28/02/1995' , 'F' , '76611021' ), ( 19 , 'Mateus Dellani' , '5134356515' , '66511317061' , '233019669' , 2 , '197' , '' , '28/02/1995' , 'F' , '76611021' ); create table posto ( id serial not null primary key , nome varchar ( 10 ) not null unique , descricao text ); insert into posto values ( 1 , 'P1' , null ),( 2 , 'P2' , null ),( 3 , 'P3' , null ),( 4 , 'P4' , null ); create table prescricao ( prescricao_id serial not null primary key , internacao_id integer not null , data date not null default current_date , hora time not null default current_time , evolucao_medica text , unique ( internacao_id , data ) ); insert into prescricao values ( 1 , 1 , current_date - 2 , default , 'Paciente n\u00e3o apresentou melhora' ), ( 2 , 1 , current_date - 1 , default , 'Paciente n\u00e3o apresentou melhora' ), ( 3 , 1 , default , default , 'Paciente apresentou leve melhora com a nova medica\u00e7\u00e3o utilizada' ), ( 4 , 2 , default , default , 'N\u00e3o houve melhora cl\u00ednica aparente' ), ( 5 , 3 , default , default , 'O procedimento realizado demonstrou normalidade nas atividades vitais b\u00e1sicas' ), ( 6 , 4 , default , default , 'Aguarda-se resultado de exames para orientar a escolha da melhor medica\u00e7\u00e3o' ); create table procedimento ( id serial not null primary key , nome t_nome , descricao text ); comment on table procedimento is 'Interven\u00e7\u00f5es m\u00e9dicas met\u00f3dicas para fins diagn\u00f3sticos, cir\u00fargicos, etc' ; insert into procedimento values ( 1 , 'Ultrassonografia' ),( 2 , 'Eletrocardiograma' ),( 3 , 'Radiografia' ); create table procedimento_internacao ( procedimento_id integer not null , internacao_id integer not null , data_hora timestamp not null default current_timestamp , primary key ( procedimento_id , internacao_id , data_hora ) ); insert into procedimento_internacao values ( 1 , 1 , default ), ( 2 , 3 , default ); create table rua ( id serial not null primary key , nome t_nome , bairro_id integer not null ); insert into rua values ( 1 , 'Rog\u00e9rio Nunes' , 1 ), ( 2 , 'Travessa Tiradentes' , 2 ), ( 3 , 'Raimunda Pereira Lima' , 3 ), ( 4 , 'Aren\u00f3polis' , 4 ), ( 5 , 'Rui Barbosa' , 5 ), ( 6 , 'Cristov\u00e3o Colombo' , 6 ), ( 7 , 'Get\u00falio Vargas' , 7 ), ( 8 , 'Nelson Mandela' , 8 ), ( 9 , 'Andr\u00e9 Franco Montora' , 9 ); alter table rua add constraint fk_rua_bairro foreign key ( bairro_id ) references bairro ; alter table procedimento_internacao add constraint fk_procedimento_int_internacao foreign key ( internacao_id ) references internacao ; alter table procedimento_internacao add constraint fk_procedimento_int_procedimento foreign key ( procedimento_id ) references procedimento ; alter table prescricao add constraint fk_prescricao_internacao foreign key ( internacao_id ) references internacao ; alter table pessoa add constraint fk_pessoa_rua foreign key ( rua_id ) references rua ; alter table paciente add constraint fk_paciente_responsavel foreign key ( responsavel_id ) references pessoa ; alter table paciente add constraint fk_paciente_pessoa foreign key ( pessoa_id ) references pessoa ; alter table medicamento_prescricao add constraint fk_medicamento_pres_prescricao foreign key ( prescricao_id ) references prescricao ; alter table medicamento_prescricao add constraint fk_medicamento_pres_medicamento foreign key ( medicamento_id ) references medicamento ; alter table medico_especialidade add constraint fk_medico_esp_medico foreign key ( medico_id ) references medico ; alter table medico_especialidade add constraint fk_medico_esp_especialidade foreign key ( especialidade_id ) references especialidade ; alter table medico add constraint fk_medico_pessoa foreign key ( pessoa_id ) references pessoa ; alter table material_prescricao add constraint fk_mat_pres_prescricao foreign key ( prescricao_id ) references prescricao ; alter table material_prescricao add constraint fk_mat_pres_material foreign key ( material_id ) references material ; alter table leito add constraint fk_leito_quarto foreign key ( quarto_id ) references quarto ; alter table internacao add constraint fk_internacao_medico foreign key ( medico_id ) references medico ; alter table internacao add constraint fk_internacao_leito foreign key ( leito_id ) references leito ; alter table internacao add constraint fk_internacao_paciente foreign key ( paciente_id ) references paciente ; alter table internacao add constraint fk_internacao_funcionario foreign key ( registrante_id ) references funcionario ; alter table internacao add constraint fk_internacao_convenio foreign key ( convenio_id ) references convenio ; alter table funcionario add constraint fk_funcionario_pessoa foreign key ( pessoa_id ) references pessoa ; alter table evolucao_internacao add constraint fk_evolucao_int_enfermeiro foreign key ( enfermeiro_id ) references enfermeiro ; alter table evolucao_internacao add constraint fk_evolucao_int_internacao foreign key ( internacao_id ) references internacao ; alter table enfermeiro add constraint fk_enfermeiro_pessoa foreign key ( pessoa_id ) references pessoa ; alter table diagnostico_prescricao add constraint fk_diag_int_prescricao foreign key ( prescricao_id ) references prescricao ; alter table diagnostico_prescricao add constraint fk_diag_int_diagnostico foreign key ( diagnostico_id ) references diagnostico ; alter table bairro add constraint fk_bairro_cidade foreign key ( cidade_id ) references cidade ; alter table quarto add constraint fk_quarto_posto foreign key ( posto_id ) references posto ; commit ;","title":"Estudo de Caso - Hospital_Db"},{"location":"banco-dados/introducao/","text":"Quando falamos em computadores e softwares, somos inevitavelmente remetidos a dados digitais. Praticamente todos os servi\u00e7os que utilizamos, de alguma forma, dependem de dados para operar. Tais dados representam entradas e sa\u00eddas e, boa parte do tempo, precisam estar armazenados de forma persistente. Mas afinal, voc\u00ea sabe como estes dados s\u00e3o armazenados? Ser\u00e1 que na hist\u00f3ria da computa\u00e7\u00e3o, o armazenamento de dados sempre foi imprescind\u00edvel? E, para n\u00e3o esquecer, o que entendemos como dados? Para responder a estas e outras perguntas, siga comigo nos pr\u00f3ximos cap\u00edtulos desta jornada! Dados, Metadados e Informa\u00e7\u00e3o \u00b6 Os dados cada vez mais os dados fazem parte da vida cotidiana. Nas diferentes atividades que realizamos, consumimos e produzimos dados de forma nunca vista antes. Enquanto sociedade, as Tecnologias da Informa\u00e7\u00e3o e Comunica\u00e7\u00e3o potencializaram nossas capacidades de gerar e transferir signos. Mesmo nosso dia-a-dia estando imerso em dados , a defini\u00e7\u00e3o do termo e sua rela\u00e7\u00e3o com informa\u00e7\u00e3o e conhecimento precisa ser bem compreendida, principalmente para profissionais da \u00e1rea de tecnologia. Comecemos pelos dados: Dados ( data , no ingl\u00eas) refere-se a fatos conhecidos que podem ser registrados e que possuem significado impl\u00edcito 1 . J\u00e1 na defini\u00e7\u00e3o do DMBOK, dados s\u00e3o representa\u00e7\u00f5es de fatos sobre o mundo e, no contexto de Tecnologia da Informa\u00e7\u00e3o, s\u00e3o informa\u00e7\u00f5es armazenadas em formato digital 2 . Dados n\u00e3o est\u00e3o dispon\u00edveis naturalmente: eles precisam ser criados. S\u00e3o meios de representa\u00e7\u00e3o e seu significado extrapola a si pr\u00f3prio. Compreende tanto a interpreta\u00e7\u00e3o dos objetos que representa quanto um objeto que precisa ser interpretado 2 . Neste ponto \u00e9 importante tamb\u00e9m diferenciarmos o termo dados de metadados . Quando voc\u00ea encontrar a palavra dados , estamos nos referindo a um meio de representa\u00e7\u00e3o de fatos do mundo em formato digital . E para interpret\u00e1-los precisamos de um contexto , um sistema de representa\u00e7\u00e3o dos dados , ao que chamamos de metadados . Ou seja, o significado impl\u00edcito dos dados torna-se evidente a partir de um contexto e este contexto \u00e9 expresso pelos metadados, que atuam como conven\u00e7\u00f5es para interpreta\u00e7\u00e3o dos dados 2 . Isso nos permite entender que um mesmo conceito do mundo (fato) pode ser representado de diferentes formas em dados, de modo mais ou menos detalhado. A interpreta\u00e7\u00e3o, contudo, deve manter-se alinhada ao significado real, independendo da representa\u00e7\u00e3o. Vamos imaginar o n\u00famero 14084218014. Voc\u00ea saberia o que ele representa? Sem um contexto, possivelmente n\u00e3o. Agora se eu disser que estamos falando do CPF de pacientes internados em determinado hospital? Bem, agora voc\u00ea reconhece o significado do n\u00famero 14084218014 (nosso dado) a partir dos metadados que fornecemos. Os dados representam a base da pir\u00e2mide. Acima deles encontramos a informa\u00e7\u00e3o, conhecimento e a sabedoria, tal qual a imagem a seguir ilustra. Contudo, tal representa\u00e7\u00e3o desconsidera que a pr\u00f3pria produ\u00e7\u00e3o de dados requer conhecimento e que n\u00e3o existem fronteiras claras entre dados e informa\u00e7\u00f5es, por exemplo. Informa\u00e7\u00e3o, em determinados contextos, tamb\u00e9m pode ser entendida como dado. Autor: Luiz Roberto. Dispon\u00edvel em https://professorluizroberto.com/wp-content/uploads/2021/03/Piramide-DICS-7-min.jpg. Banco de Dados \u00b6 Sabemos que o computador \u00e9 fruto da ind\u00fastria de guerra e que seus primeiros usos foram para fins militares. Nesse per\u00edodo, em que os fundamentos da computa\u00e7\u00e3o estavam sendo constru\u00eddos, os programas desenvolvidos tinham como principal objetivo a execu\u00e7\u00e3o de c\u00e1lculos complexos. N\u00e3o haviam interfaces gr\u00e1ficas, sequer telas, para exibir os resultados. No caso do ENIAC , primeiro computador digital eletr\u00f4nico, a resposta era gerada a partir de uma sequ\u00eancia de l\u00e2mpadas. Na medida que a tecnologia evoluiu, os computadores receberam novas tarefas, passando a ser utilizados em universidades, ind\u00fastrias, presta\u00e7\u00e3o de servi\u00e7os e, \u00e9 claro, em nossos lares. E, com a amplia\u00e7\u00e3o significativa de uso, novos softwares foram desenvolvidos, potencializando a necessidade armazenamento de dados digitais. Partimos ent\u00e3o de um contexto onde os dados processados pelos softwares eram inputados a cada execu\u00e7\u00e3o por operadores humanos e cuja resposta final servia ao momento ( n\u00e3o sendo armazenada digitalmente para usos posteriores), para um cen\u00e1rio onde os dados digitais representam ativos de imenso valor para indiv\u00edduos e organiza\u00e7\u00f5es. \u00c9 neste ponto da hist\u00f3ria que nos encontramos hoje. Os fatores que nos levaram a esta revolu\u00e7\u00e3o digital podem ser resumidos a tr\u00eas: demanda por informa\u00e7\u00e3o, hardware de armazenamento com grande capacidade e baixo custo e o desenvolvimento de sistemas gerenciadores de banco de dados (SGBD) , que s\u00e3o o tema do nosso estudo. Os SGBDs mant\u00e9m sob sua guarda diversas bases de dados ( databases ) pelo tempo que for necess\u00e1rio. Cada database corresponde a um conjunto de dados logicamente organizado, dispon\u00edvel para consultas e atualiza\u00e7\u00f5es de uma comunidade de usu\u00e1rios interessados . \u00c9 importante ressaltar que sempre que houver a coleta organizada e sistem\u00e1tica de dados para um determinado prop\u00f3sito, teremos um banco de dados . Logo, um banco de dados pode ser alimentado de forma autom\u00e1tica ou manual e os dados podem ser mantidos em qualquer formato (papel, fitas, ..., ou arquivos digitais). Seja qual for o meio, todo banco de dados representa um aspecto do mundo real, reduzido \u00e0s propriedades de interesse (minimundo ou universo de discurso). Todas as mudan\u00e7as que ocorrem no minimundo devem ser refletidas no banco de dados e o banco de dados deve ser um espelho da realidade 1 . Contudo, para a \u00e1rea de estudo em Banco de Dados da Ci\u00eancia da Computa\u00e7\u00e3o e afins nos concentramos com os bancos de dados mantidos por sistemas computadorizados, cujos dados s\u00e3o representados de forma digital. Sabemos que o sistema de arquivos funciona muito bem para armazenar e recuperar dados digitais. Qual seria o motivo, ent\u00e3o, para utilizarmos SGBDs quando tratamos de bases de dados? Segundo Garcia-Molina et al (2008) , alguns elementos que justificam escolhar um SGBD seriam 3 : Permitir que usu\u00e1rios criem novas bases e manipulem seus schemas por meio de uma linguagem espec\u00edfica de defini\u00e7\u00e3o de dados; Permitir que usu\u00e1rios consultem e modifiquem dados por meio de uma linguagem espec\u00edfica de manipula\u00e7\u00e3o de dados; Suportar o armazenamento de grandes volumes de dados por longo tempo, sempre mantendo a efici\u00eancia em seu acesso; Garantir a durabilidade , garantindo que falhas e eventos inesperados n\u00e3o comprometam os dados; Garantir o isolamento e a atomicidade na manipula\u00e7\u00e3o dos dados. Nota Schema refere-se a representa\u00e7\u00e3o da estrutura e organiza\u00e7\u00e3o de uma base de dados a partir de uma linguagem formal. S\u00e3o senten\u00e7as que imp\u00f5em restri\u00e7\u00f5es de integridade aos dados. Pode associar-se ao n\u00edvel l\u00f3gico ou ao f\u00edsico no projeto de bases de dados. Nota Conceitos como linguagem de defini\u00e7\u00e3o de dados , linguagem de manipula\u00e7\u00e3o de dados , durabilidade , atomicidade e isolamento ser\u00e3o aprofundados posteriormente. Perceba que sistemas de arquivos n\u00e3o disp\u00f5em de linguagens de consulta e manipula\u00e7\u00e3o de dados, tampouco permitem definir o schema dos dados de maneira aprimorada. Quest\u00f5es como isolamento e atomicidade n\u00e3o s\u00e3o plenamente atendidas, bem como a durabilidade em seu sentido mais estrito. H\u00e1 tamb\u00e9m a quest\u00e3o do acesso pouco eficiente a dados cuja localiza\u00e7\u00e3o \u00e9 desconhecida. Para facilitara compreens\u00e3o das diferen\u00e7as entre SGBD e sistema de arquivos, devemos ter em mente que o cen\u00e1rio de uso deve considerar dados compostos por pequenos fragmentos constantemente atualizados e consultados. Em tal situa\u00e7\u00e3o, o uso do sistema de arquivos em detrimento de um SGBD pode ocasionar alguns efeitos indesejados. Vejamos os principais deles: Redund\u00e2ncia e Inconsist\u00eancia \u00b6 Redund\u00e2ncia ocorre quando uma mesma informa\u00e7\u00e3o \u00e9 representada diversas vezes na base de dados. Imagine, por exemplo, os dados de seu endere\u00e7o \"espalhados\" em diversas c\u00f3pias no site de e-commerce que voc\u00ea costuma fazer compras. Seria um caso de redund\u00e2ncia. Ter dados redundantes n\u00e3o implica, necessariamente, em problemas. \u00c9 s\u00f3 pensar na recomenda\u00e7\u00e3o que ouvimos a todo o momento: \"Fa\u00e7a c\u00f3pias de seguran\u00e7a de seus arquivos!\". Redund\u00e2ncia \u00e9 o fundamento do backup, e fazer backup \u00e9 bom \ud83d\ude00. O problema com dados redundantes est\u00e1 na sua gest\u00e3o. Se existem c\u00f3pias de uma mesma informa\u00e7\u00e3o, \u00e9 preciso mant\u00ea-las sob controle, de modo que todas representem o mesmo fato do mundo. Ou seja, precisamos manter sincronizadas as diferentes c\u00f3pias existentes. Inconsist\u00eancia Dados similares encontram-se representados em diferentes formatos e locais distintos. Torna-se necess\u00e1rio deduzir qual representa\u00e7\u00e3o \u00e9 a correta (ou mais completa) em rela\u00e7\u00e3o ao fato. Redund\u00e2ncia Um mesmo fato do mundo encontra-se representado m\u00faltiplas vezes no banco de dados. Divide-se em: Redund\u00e2ncia controlada : O software est\u00e1 ciente das diversas c\u00f3pias da mesma informa\u00e7\u00e3o e mant\u00e9m a sincronia entre tais c\u00f3pias. Redund\u00e2ncia n\u00e3o controlada : O software est\u00e1 n\u00e3o est\u00e1 ciente das diferentes c\u00f3pias existentes. A sincroniza\u00e7\u00e3o fica a cargo do usu\u00e1rio. A redund\u00e2ncia n\u00e3o controlada predisp\u00f5e a inconsist\u00eancia, visto que gera anomalias na manipula\u00e7\u00e3o dos dados. Pense comigo: se no site de e-commerce haviam diferentes c\u00f3pias de seu endere\u00e7o, mas apenas uma delas est\u00e1 correta, quais problemas poderiam ocorrer? Dificuldade de Acesso \u00b6 Para um software que n\u00e3o utiliza SGBD, ficando restrito ao sistema de arquivos, a disponibiliza\u00e7\u00e3o de novas consultas depende de manuten\u00e7\u00e3o no software, o que tende aumentar custos e a possibilidade de injetar defeitos. Isso ocorre porque o acesso aos dados requer conhecimento detalhado da estrutura f\u00edsica de armazenamento dos mesmos. Al\u00e9m disso, compartilhar estes dados com outros softwares torna-se custoso e inseguro pois o novo usu\u00e1rio dever\u00e1 implementar o mesmo conjunto de regras do software \"dono\" da base de dados para garantir consist\u00eancia na manipula\u00e7\u00e3o. Outro fator que implica complexidade \u00e9 a natureza fragmentada da base de dados. Se ela for composta de m\u00faltiplos arquivos, o software precisar\u00e1 \"conhecer\" todos eles em detalhes. Logo, n\u00e3o h\u00e1 uma camada de abstra\u00e7\u00e3o entre software e base de dados, mas uma liga\u00e7\u00e3o f\u00edsica extremamente engessada e codependente. Problemas de Integridade \u00b6 Dificuldades de Compartilhamento \u00b6 Problemas de Atomicidade \u00b6 Problemas de Isolamento \u00b6 Problemas de Seguran\u00e7a \u00b6 R. Elmasri and S. Navathe. Fundamentals of Database Systems . Addison-Wesley, 2011. ISBN 9780136086208. URL: https://books.google.com.br/books?id=ZdhAQgAACAAJ . \u21a9 \u21a9 Dama International, Data Management Association, D. Henderson, and S. Earley. DAMA-DMBOK: Data Management Body of Knowledge . Technics Publications, 2017. ISBN 9781634622349. URL: https://books.google.com.br/books?id=YjacswEACAAJ . \u21a9 \u21a9 \u21a9 H. Garcia-Molina, J.D. Ullman, and J. Widom. Database Systems: The Complete Book . Pearson international edition. Pearson Prentice Hall, 2009. ISBN 9780131873254. URL: https://books.google.com.br/books?id=pk5GAQAAIAAJ . \u21a9","title":"Banco de Dados: Introdu\u00e7\u00e3o"},{"location":"banco-dados/introducao/#dados-metadados-e-informacao","text":"Os dados cada vez mais os dados fazem parte da vida cotidiana. Nas diferentes atividades que realizamos, consumimos e produzimos dados de forma nunca vista antes. Enquanto sociedade, as Tecnologias da Informa\u00e7\u00e3o e Comunica\u00e7\u00e3o potencializaram nossas capacidades de gerar e transferir signos. Mesmo nosso dia-a-dia estando imerso em dados , a defini\u00e7\u00e3o do termo e sua rela\u00e7\u00e3o com informa\u00e7\u00e3o e conhecimento precisa ser bem compreendida, principalmente para profissionais da \u00e1rea de tecnologia. Comecemos pelos dados: Dados ( data , no ingl\u00eas) refere-se a fatos conhecidos que podem ser registrados e que possuem significado impl\u00edcito 1 . J\u00e1 na defini\u00e7\u00e3o do DMBOK, dados s\u00e3o representa\u00e7\u00f5es de fatos sobre o mundo e, no contexto de Tecnologia da Informa\u00e7\u00e3o, s\u00e3o informa\u00e7\u00f5es armazenadas em formato digital 2 . Dados n\u00e3o est\u00e3o dispon\u00edveis naturalmente: eles precisam ser criados. S\u00e3o meios de representa\u00e7\u00e3o e seu significado extrapola a si pr\u00f3prio. Compreende tanto a interpreta\u00e7\u00e3o dos objetos que representa quanto um objeto que precisa ser interpretado 2 . Neste ponto \u00e9 importante tamb\u00e9m diferenciarmos o termo dados de metadados . Quando voc\u00ea encontrar a palavra dados , estamos nos referindo a um meio de representa\u00e7\u00e3o de fatos do mundo em formato digital . E para interpret\u00e1-los precisamos de um contexto , um sistema de representa\u00e7\u00e3o dos dados , ao que chamamos de metadados . Ou seja, o significado impl\u00edcito dos dados torna-se evidente a partir de um contexto e este contexto \u00e9 expresso pelos metadados, que atuam como conven\u00e7\u00f5es para interpreta\u00e7\u00e3o dos dados 2 . Isso nos permite entender que um mesmo conceito do mundo (fato) pode ser representado de diferentes formas em dados, de modo mais ou menos detalhado. A interpreta\u00e7\u00e3o, contudo, deve manter-se alinhada ao significado real, independendo da representa\u00e7\u00e3o. Vamos imaginar o n\u00famero 14084218014. Voc\u00ea saberia o que ele representa? Sem um contexto, possivelmente n\u00e3o. Agora se eu disser que estamos falando do CPF de pacientes internados em determinado hospital? Bem, agora voc\u00ea reconhece o significado do n\u00famero 14084218014 (nosso dado) a partir dos metadados que fornecemos. Os dados representam a base da pir\u00e2mide. Acima deles encontramos a informa\u00e7\u00e3o, conhecimento e a sabedoria, tal qual a imagem a seguir ilustra. Contudo, tal representa\u00e7\u00e3o desconsidera que a pr\u00f3pria produ\u00e7\u00e3o de dados requer conhecimento e que n\u00e3o existem fronteiras claras entre dados e informa\u00e7\u00f5es, por exemplo. Informa\u00e7\u00e3o, em determinados contextos, tamb\u00e9m pode ser entendida como dado. Autor: Luiz Roberto. Dispon\u00edvel em https://professorluizroberto.com/wp-content/uploads/2021/03/Piramide-DICS-7-min.jpg.","title":"Dados, Metadados e Informa\u00e7\u00e3o"},{"location":"banco-dados/introducao/#banco-de-dados","text":"Sabemos que o computador \u00e9 fruto da ind\u00fastria de guerra e que seus primeiros usos foram para fins militares. Nesse per\u00edodo, em que os fundamentos da computa\u00e7\u00e3o estavam sendo constru\u00eddos, os programas desenvolvidos tinham como principal objetivo a execu\u00e7\u00e3o de c\u00e1lculos complexos. N\u00e3o haviam interfaces gr\u00e1ficas, sequer telas, para exibir os resultados. No caso do ENIAC , primeiro computador digital eletr\u00f4nico, a resposta era gerada a partir de uma sequ\u00eancia de l\u00e2mpadas. Na medida que a tecnologia evoluiu, os computadores receberam novas tarefas, passando a ser utilizados em universidades, ind\u00fastrias, presta\u00e7\u00e3o de servi\u00e7os e, \u00e9 claro, em nossos lares. E, com a amplia\u00e7\u00e3o significativa de uso, novos softwares foram desenvolvidos, potencializando a necessidade armazenamento de dados digitais. Partimos ent\u00e3o de um contexto onde os dados processados pelos softwares eram inputados a cada execu\u00e7\u00e3o por operadores humanos e cuja resposta final servia ao momento ( n\u00e3o sendo armazenada digitalmente para usos posteriores), para um cen\u00e1rio onde os dados digitais representam ativos de imenso valor para indiv\u00edduos e organiza\u00e7\u00f5es. \u00c9 neste ponto da hist\u00f3ria que nos encontramos hoje. Os fatores que nos levaram a esta revolu\u00e7\u00e3o digital podem ser resumidos a tr\u00eas: demanda por informa\u00e7\u00e3o, hardware de armazenamento com grande capacidade e baixo custo e o desenvolvimento de sistemas gerenciadores de banco de dados (SGBD) , que s\u00e3o o tema do nosso estudo. Os SGBDs mant\u00e9m sob sua guarda diversas bases de dados ( databases ) pelo tempo que for necess\u00e1rio. Cada database corresponde a um conjunto de dados logicamente organizado, dispon\u00edvel para consultas e atualiza\u00e7\u00f5es de uma comunidade de usu\u00e1rios interessados . \u00c9 importante ressaltar que sempre que houver a coleta organizada e sistem\u00e1tica de dados para um determinado prop\u00f3sito, teremos um banco de dados . Logo, um banco de dados pode ser alimentado de forma autom\u00e1tica ou manual e os dados podem ser mantidos em qualquer formato (papel, fitas, ..., ou arquivos digitais). Seja qual for o meio, todo banco de dados representa um aspecto do mundo real, reduzido \u00e0s propriedades de interesse (minimundo ou universo de discurso). Todas as mudan\u00e7as que ocorrem no minimundo devem ser refletidas no banco de dados e o banco de dados deve ser um espelho da realidade 1 . Contudo, para a \u00e1rea de estudo em Banco de Dados da Ci\u00eancia da Computa\u00e7\u00e3o e afins nos concentramos com os bancos de dados mantidos por sistemas computadorizados, cujos dados s\u00e3o representados de forma digital. Sabemos que o sistema de arquivos funciona muito bem para armazenar e recuperar dados digitais. Qual seria o motivo, ent\u00e3o, para utilizarmos SGBDs quando tratamos de bases de dados? Segundo Garcia-Molina et al (2008) , alguns elementos que justificam escolhar um SGBD seriam 3 : Permitir que usu\u00e1rios criem novas bases e manipulem seus schemas por meio de uma linguagem espec\u00edfica de defini\u00e7\u00e3o de dados; Permitir que usu\u00e1rios consultem e modifiquem dados por meio de uma linguagem espec\u00edfica de manipula\u00e7\u00e3o de dados; Suportar o armazenamento de grandes volumes de dados por longo tempo, sempre mantendo a efici\u00eancia em seu acesso; Garantir a durabilidade , garantindo que falhas e eventos inesperados n\u00e3o comprometam os dados; Garantir o isolamento e a atomicidade na manipula\u00e7\u00e3o dos dados. Nota Schema refere-se a representa\u00e7\u00e3o da estrutura e organiza\u00e7\u00e3o de uma base de dados a partir de uma linguagem formal. S\u00e3o senten\u00e7as que imp\u00f5em restri\u00e7\u00f5es de integridade aos dados. Pode associar-se ao n\u00edvel l\u00f3gico ou ao f\u00edsico no projeto de bases de dados. Nota Conceitos como linguagem de defini\u00e7\u00e3o de dados , linguagem de manipula\u00e7\u00e3o de dados , durabilidade , atomicidade e isolamento ser\u00e3o aprofundados posteriormente. Perceba que sistemas de arquivos n\u00e3o disp\u00f5em de linguagens de consulta e manipula\u00e7\u00e3o de dados, tampouco permitem definir o schema dos dados de maneira aprimorada. Quest\u00f5es como isolamento e atomicidade n\u00e3o s\u00e3o plenamente atendidas, bem como a durabilidade em seu sentido mais estrito. H\u00e1 tamb\u00e9m a quest\u00e3o do acesso pouco eficiente a dados cuja localiza\u00e7\u00e3o \u00e9 desconhecida. Para facilitara compreens\u00e3o das diferen\u00e7as entre SGBD e sistema de arquivos, devemos ter em mente que o cen\u00e1rio de uso deve considerar dados compostos por pequenos fragmentos constantemente atualizados e consultados. Em tal situa\u00e7\u00e3o, o uso do sistema de arquivos em detrimento de um SGBD pode ocasionar alguns efeitos indesejados. Vejamos os principais deles:","title":"Banco de Dados"},{"location":"banco-dados/introducao/#redundancia-e-inconsistencia","text":"Redund\u00e2ncia ocorre quando uma mesma informa\u00e7\u00e3o \u00e9 representada diversas vezes na base de dados. Imagine, por exemplo, os dados de seu endere\u00e7o \"espalhados\" em diversas c\u00f3pias no site de e-commerce que voc\u00ea costuma fazer compras. Seria um caso de redund\u00e2ncia. Ter dados redundantes n\u00e3o implica, necessariamente, em problemas. \u00c9 s\u00f3 pensar na recomenda\u00e7\u00e3o que ouvimos a todo o momento: \"Fa\u00e7a c\u00f3pias de seguran\u00e7a de seus arquivos!\". Redund\u00e2ncia \u00e9 o fundamento do backup, e fazer backup \u00e9 bom \ud83d\ude00. O problema com dados redundantes est\u00e1 na sua gest\u00e3o. Se existem c\u00f3pias de uma mesma informa\u00e7\u00e3o, \u00e9 preciso mant\u00ea-las sob controle, de modo que todas representem o mesmo fato do mundo. Ou seja, precisamos manter sincronizadas as diferentes c\u00f3pias existentes. Inconsist\u00eancia Dados similares encontram-se representados em diferentes formatos e locais distintos. Torna-se necess\u00e1rio deduzir qual representa\u00e7\u00e3o \u00e9 a correta (ou mais completa) em rela\u00e7\u00e3o ao fato. Redund\u00e2ncia Um mesmo fato do mundo encontra-se representado m\u00faltiplas vezes no banco de dados. Divide-se em: Redund\u00e2ncia controlada : O software est\u00e1 ciente das diversas c\u00f3pias da mesma informa\u00e7\u00e3o e mant\u00e9m a sincronia entre tais c\u00f3pias. Redund\u00e2ncia n\u00e3o controlada : O software est\u00e1 n\u00e3o est\u00e1 ciente das diferentes c\u00f3pias existentes. A sincroniza\u00e7\u00e3o fica a cargo do usu\u00e1rio. A redund\u00e2ncia n\u00e3o controlada predisp\u00f5e a inconsist\u00eancia, visto que gera anomalias na manipula\u00e7\u00e3o dos dados. Pense comigo: se no site de e-commerce haviam diferentes c\u00f3pias de seu endere\u00e7o, mas apenas uma delas est\u00e1 correta, quais problemas poderiam ocorrer?","title":"Redund\u00e2ncia e Inconsist\u00eancia"},{"location":"banco-dados/introducao/#dificuldade-de-acesso","text":"Para um software que n\u00e3o utiliza SGBD, ficando restrito ao sistema de arquivos, a disponibiliza\u00e7\u00e3o de novas consultas depende de manuten\u00e7\u00e3o no software, o que tende aumentar custos e a possibilidade de injetar defeitos. Isso ocorre porque o acesso aos dados requer conhecimento detalhado da estrutura f\u00edsica de armazenamento dos mesmos. Al\u00e9m disso, compartilhar estes dados com outros softwares torna-se custoso e inseguro pois o novo usu\u00e1rio dever\u00e1 implementar o mesmo conjunto de regras do software \"dono\" da base de dados para garantir consist\u00eancia na manipula\u00e7\u00e3o. Outro fator que implica complexidade \u00e9 a natureza fragmentada da base de dados. Se ela for composta de m\u00faltiplos arquivos, o software precisar\u00e1 \"conhecer\" todos eles em detalhes. Logo, n\u00e3o h\u00e1 uma camada de abstra\u00e7\u00e3o entre software e base de dados, mas uma liga\u00e7\u00e3o f\u00edsica extremamente engessada e codependente.","title":"Dificuldade de Acesso"},{"location":"banco-dados/introducao/#problemas-de-integridade","text":"","title":"Problemas de Integridade"},{"location":"banco-dados/introducao/#dificuldades-de-compartilhamento","text":"","title":"Dificuldades de Compartilhamento"},{"location":"banco-dados/introducao/#problemas-de-atomicidade","text":"","title":"Problemas de Atomicidade"},{"location":"banco-dados/introducao/#problemas-de-isolamento","text":"","title":"Problemas de Isolamento"},{"location":"banco-dados/introducao/#problemas-de-seguranca","text":"R. Elmasri and S. Navathe. Fundamentals of Database Systems . Addison-Wesley, 2011. ISBN 9780136086208. URL: https://books.google.com.br/books?id=ZdhAQgAACAAJ . \u21a9 \u21a9 Dama International, Data Management Association, D. Henderson, and S. Earley. DAMA-DMBOK: Data Management Body of Knowledge . Technics Publications, 2017. ISBN 9781634622349. URL: https://books.google.com.br/books?id=YjacswEACAAJ . \u21a9 \u21a9 \u21a9 H. Garcia-Molina, J.D. Ullman, and J. Widom. Database Systems: The Complete Book . Pearson international edition. Pearson Prentice Hall, 2009. ISBN 9780131873254. URL: https://books.google.com.br/books?id=pk5GAQAAIAAJ . \u21a9","title":"Problemas de Seguran\u00e7a"},{"location":"banco-dados/lang/","text":"Data Definition Language \u00b6 Data Manipulation Language \u00b6 Comando INSERT \u00b6 {: .notice--info} Respons\u00e1vel por adicionar novas linhas a uma tabela, o comando INSERT apresenta sintaxe muito simples, embora com algumas varia\u00e7\u00f5es. A forma trivial de escrev\u00ea-lo \u00e9 especificando todas as colunas da tabela e os seus respectivos valores. Observe o trecho de c\u00f3digo a seguir: INSERT INTO quote ( id , entrance_exam_id , NAME , reference_code , description , comment , is_universal_access ) VALUES ( 1 , 1 , 'ACESSO UNIVERSAL' , '1' , 'Vagas de acesso universal' , '' , true ); Para ter sucesso na execu\u00e7\u00e3o, o comando insert deve respeitar a sintaxe e as constraints definidas para as colunas da tabela. Todas as colunas obrigat\u00f3rias ( not null ) devem aparecer no comando, com exce\u00e7\u00e3o daquelas que possuem valor default , que podem ser omitidas. Ainda, quando a(s) coluna(s) representam chaves estrangeiras, os valores informados devem respeitar a integridade referencial , ou seja, devem estar presentes como valores de chave prim\u00e1ria na tabela referenciada. E, para n\u00e3o esquecer, os valores informados devem respeitar o dom\u00ednio de dados da coluna. Quando h\u00e1 necessidade de adicionar m\u00faltiplas linhas em uma tabela n\u00e3o precisamos repetir diversas vezes o comando insert . Nestes casos, \u00e9 poss\u00edvel informar v\u00e1rios valores de tupla (linha) na cl\u00e1usula VALUES . No exemplo abaixo, o resultado da execu\u00e7\u00e3o ser\u00e1 a inser\u00e7\u00e3o de duas linhas na tabela produto . INSERT INTO produto ( id , nome ) VALUES ( default , 'L\u00e1pis' ), ( default , 'Caneta' ); Outra varia\u00e7\u00e3o de grande utilidade \u00e9 a possibilidade de substituir VALUES por um comando de SELECT . Observe: INSERT INTO produto ( nome ) SELECT item_nome FROM item_nota_fiscal WHERE tipo = 'P' ; Por fim, o PostgreSQL possibilita o retorno de valores em comandos de insert atrav\u00e9s da cl\u00e1usula returning . Esse recurso \u00e9 especialmente \u00fatil para obter valores de colunas configuradas como default , inclu\u00edndo tipos seriais utilizados em chaves prim\u00e1rias, bem como para comandos de PL/SQL que envolvem a atribui\u00e7\u00e3o de vari\u00e1veis ( Vide Documenta\u00e7\u00e3o ). No exemplo abaixo, o comando insert ir\u00e1 retornar o valor gerado para a coluna id , tal qual faria um comando select an\u00e1logo. INSERT INTO produto ( id , nome ) VALUES ( default , 'P\u00e3o' ) RETURNING id ; Comando DELETE \u00b6 {: .notice--info} A exclus\u00e3o de linhas de uma tabela \u00e9 realizada pelo comando delete . N\u00e3o confunda, portanto com o comando drop , cuja finalidade \u00e9 remover do dicion\u00e1rio (schema) a defini\u00e7\u00e3o e dados (se houver) de um objeto existente na base de dados. O comando delete n\u00e3o requer a especifica\u00e7\u00e3o de filtros. Neste caso, todas as linhas da tabela ser\u00e3o removidas, o que pode ser imprudente. Normalmente todo comando delete acompanha condi\u00e7\u00f5es que determinam quais linhas devem ser exclu\u00eddas dentre todas as existentes. Tais condi\u00e7\u00f5es s\u00e3o expressas na cl\u00e1usula WHERE , na forma de condi\u00e7\u00f5es l\u00f3gicas. --ir\u00e1 excluir todas as linhas da tabela estudante DELETE FROM estudante ; /*ir\u00e1 excluir somente as linhas cujas condi\u00e7\u00f5es forem satisfeitas*/ DELETE FROM estudante WHERE cpf = '012365478963' or status = 'C' ; A exclus\u00e3o das linhas somente ocorre quando nenhuma constraint for violada. Casos t\u00edpicos s\u00e3o linhas referenciadas em chaves estrangeiras, as quais n\u00e3o podem ser exclu\u00eddas pois implicaria na viola\u00e7\u00e3o da restri\u00e7\u00e3o de integridade referencial . Um meio de contornar a restri\u00e7\u00e3o e permitir a exclus\u00e3o da linha com depend\u00eancia \u00e9 valer-se da cl\u00e1usula ON DELETE CASCADE no momento de criar a chave estrangeira. Isso, contudo, ir\u00e1 depender das regras do neg\u00f3cio, que por vezes tornam invi\u00e1vel o uso de tal recurso. Pense, por exemplo, se ao excluir o registro de uma cidade, todos os dados de habitantes a ela associados fossem exclu\u00eddos automaticamente. Certamente n\u00e3o parece ser a melhor estrat\u00e9gia. Da mesma forma que ocorre com o comando INSERT , o PostgreSQL possibilita o retorno de valores em comandos de delete atrav\u00e9s da cl\u00e1usula returning . Observe o comando abaixo ( Vide Documenta\u00e7\u00e3o ): DELETE FROM produto WHERE data_validade > current_date - interval '10 days' returning id , nome ; Comando UPDATE \u00b6 {: .notice--info} Para realizar modifica\u00e7\u00f5es em dados armazenados, utilizamos o comando UPDATE . Por meio dele \u00e9 poss\u00edvel alterar valores de uma ou mais colunas da linha (ou linhas) de uma tabela. Se definido sem filtros, a altera\u00e7\u00e3o solicitada ser\u00e1 efetivada em todas as linhas, contudo nos cen\u00e1rios triviais de uso, este n\u00e3o \u00e9 o objetivo pretendido. Normalmente utilizamos condi\u00e7\u00f5es que restringem o efeito da atualiza\u00e7\u00e3o para uma quantia menor de linhas. --Todas as linhas de produto ter\u00e3o o valor da coluna nome alterado para Feij\u00e3o UPDATE produto SET nome = 'Feij\u00e3o' ; --O mesmo comando, agora com filtro UPDATE produto SET nome = 'Feij\u00e3o' WHERE codigo = 25 ; No comando update podemos especificar apenas uma tabela. A partir da cl\u00e1usula set informamos qual ser\u00e1 o novo valor das colunas que desejamos modificar. \u00c9 poss\u00edvel informar uma ou mais colunas na mesma instru\u00e7\u00e3o, assim como utilizar o valor atual de colunas para compor novos. Observe: --Modificando v\u00e1rias colunas em uma \u00fanica instru\u00e7\u00e3o UPDATE produto SET nome = 'Feij\u00e3o' , preco = 4 . 86 , peso = 2000 WHERE codigo = 25 ; --Novos valores de coluna com base nos atuais UPDATE produto SET preco = preco + preco * 0 . 05 WHERE codigo = 25 ; Voc\u00ea deve ter observado que a cl\u00e1usula set \u00e9 uma sequ\u00eancia de pares de coluna/valor separados por v\u00edrgula. Utilizando o trecho preco= preco + preco * 0.05 como exemplo, percebemos que \u00e0 esquerda da igualdade temos o nome da coluna que ter\u00e1 o valor modificado, enquanto que na direita encontramos o novo valor. Quando o nome de uma coluna aparece na direita (nosso exemplo), estamos lendo o valor atual para utiliz\u00e1-lo de alguma forma na composi\u00e7\u00e3o do novo. Assim, supondo que a coluna preco tenha por valor atual 2.40 , o novo valor ser\u00e1 o resultado da express\u00e3o 2.40 + 2.40 * 0.05 , ou seja, 2.52 . O PostgreSQL possibilita o retorno de valores em comandos update atrav\u00e9s da cl\u00e1usula returning . Observe o comando abaixo ( Vide Documenta\u00e7\u00e3o ): UPDATE produto SET nome = 'Feij\u00e3o' , preco = preco * 0 . 15 WHERE codigo = 25 RETURNING preco ; Comando SELECT \u00b6 {: .notice--info} Certamente podemos afirmar que o comando select \u00e9 um dos mais importantes da linguagem SQL. Isso porque atrav\u00e9s dele temos condi\u00e7\u00f5es de recompor as informa\u00e7\u00f5es do mundo fragmentados nas diferentes tabelas da base, respondendo \u00e0s consultas dos usu\u00e1rios. A informa\u00e7\u00e3o \u00e9, portanto, o que se busca apresentar nos diferentes softwares que constru\u00edmos para interagir com bases de dados. Proporcional a import\u00e2ncia do comando select \u00e9 a sua complexidade e varia\u00e7\u00e3o de sintaxe. Logo, extrair todo potencial do comando pode levar certo tempo de estudo e dedica\u00e7\u00e3o. Em termos gerais, o comando select representa o meio que temos, em bases relacionais, para recuperar dados. O seu retorno representa uma rela\u00e7\u00e3o (nome formal dado \u00e0s tabelas), uma vez que falamos em um retorno estruturado em linhas e colunas. Vamos come\u00e7ar nosso estudo entendendo as principais se\u00e7\u00f5es que comp\u00f5em o comando select . Para tal, considere o c\u00f3digo SQL abaixo: select medico_id , paciente_id , anamnese , data_hora_alta from internacao Observe a cl\u00e1usula from . Nela especificamos a(s) rela\u00e7\u00e3o(\u00f5es) que iremos consultar. A tabela internacao \u00e9 nossa rela\u00e7\u00e3o e estamos interessados em recuperar as linhas que ela cont\u00e9m. Sabemos que rela\u00e7\u00f5es s\u00e3o segmentadas em colunas e, na consulta, podemos limitar a quais delas gostar\u00edamos de receber no retorno. Portanto, somente as colunas medico_id , paciente_id , anamnese e data_hora_alta de todas as linhas armazenadas em internacao ser\u00e3o retornadas. Perceba que a lista de colunas deve ser expressa entre as cl\u00e1usulas select e from , utilizando v\u00edrgula como caractere separador e respeitando a nomenclatura utilizada no momento da cria\u00e7\u00e3o da tabela. Para os casos onde todas as colunas devem estar presentes na sa\u00edda, utilizamos um asterisco para simplificar a escrita da consulta. Neste caso, ter\u00edamos: select * from internacao Bem, e se voc\u00ea preferir mudar o nome de sa\u00edda da coluna...como faria? Neste caso, basta utilizar o recurso de troca de nomes ( rename ). Veja: select medico_id as \"codigo do m\u00e9dico\" , paciente_id paciente , anamnese , data_hora_alta as saida_paciente from internacao Ao optar por renomear colunas, quando utilizamos nomes compostos com espa\u00e7os entre as palavras, ser\u00e1 preciso envolver com aspas duplas ( medico_id as \"codigo do m\u00e9dico\" ). O operador as \u00e9 opcional, logo fica a seu crit\u00e9rio utiliz\u00e1-lo ou n\u00e3o. Apenas mantenha um padr\u00e3o de escrita, aderindo a uma das formas apenas. Aten\u00e7\u00e3o: A opera\u00e7\u00e3o rename n\u00e3o realiza altera\u00e7\u00f5es de schema. Seu efeito vale apenas no contexto da query. Al\u00e9m de nomes de colunas, podemos solicitar sa\u00edda de express\u00f5es. \u00c9 poss\u00edvel, por exemplo, realizar chamadas de fun\u00e7\u00f5es, c\u00e1lculos matem\u00e1ticos e at\u00e9 fazer uso de subqueries no espa\u00e7o reservado \u00e0s colunas. Contudo, precisamos utilizar tais liberdades com modera\u00e7\u00e3o, pois em alguns casos podemos comprometer o desempenho da consulta (veremos estas situa\u00e7\u00f5es em outro post). select upper ( anamnese ), age ( data_hora_alta ) as tempo_de_saida , 3 * 9 as calculo from internacao At\u00e9 o momento sabemos como especificar as colunas (ou express\u00f5es) e a rela\u00e7\u00e3o para nossas consultas via select . Da forma que apresentamos at\u00e9 ent\u00e3o, todas as linhas da rela\u00e7\u00e3o ser\u00e3o retornadas, uma vez que n\u00e3o definimos filtros para os dados. \u00c9 pouco prov\u00e1vel que suas queries considerem a integralidade de linhas de uma tabela, logo saber restringir o retorno apenas as linhas de interesse \u00e9 de fundamental import\u00e2ncia. A cl\u00e1usula que nos permite condicionar linhas ao retorno chama-se where . Nela, expressamos as restri\u00e7\u00f5es na forma de condi\u00e7\u00f5es l\u00f3gicas, elaboradas por meio de operadores de compara\u00e7\u00e3o ( < > = <= >= <> ) e conectores l\u00f3gicos ( NOT AND OR ) envolvendo colunas e/ou express\u00f5es. select * from internacao where data_hora_internacao > current_timestamp - interval '3 days' and tipo_clinica = 'M' Na query acima, condicionamos ao retorno linhas da tabela internacao que possuem valor igual a M na coluna tipo_clinica e cuja data_hora_internacao registra uma estampa de tempo de at\u00e9 3 dias. Jun\u00e7\u00f5es Internas \u00b6","title":"Structured Query Language - SQL"},{"location":"banco-dados/lang/#data-definition-language","text":"","title":"Data Definition Language"},{"location":"banco-dados/lang/#data-manipulation-language","text":"","title":"Data Manipulation Language"},{"location":"banco-dados/lang/#comando-insert","text":"{: .notice--info} Respons\u00e1vel por adicionar novas linhas a uma tabela, o comando INSERT apresenta sintaxe muito simples, embora com algumas varia\u00e7\u00f5es. A forma trivial de escrev\u00ea-lo \u00e9 especificando todas as colunas da tabela e os seus respectivos valores. Observe o trecho de c\u00f3digo a seguir: INSERT INTO quote ( id , entrance_exam_id , NAME , reference_code , description , comment , is_universal_access ) VALUES ( 1 , 1 , 'ACESSO UNIVERSAL' , '1' , 'Vagas de acesso universal' , '' , true ); Para ter sucesso na execu\u00e7\u00e3o, o comando insert deve respeitar a sintaxe e as constraints definidas para as colunas da tabela. Todas as colunas obrigat\u00f3rias ( not null ) devem aparecer no comando, com exce\u00e7\u00e3o daquelas que possuem valor default , que podem ser omitidas. Ainda, quando a(s) coluna(s) representam chaves estrangeiras, os valores informados devem respeitar a integridade referencial , ou seja, devem estar presentes como valores de chave prim\u00e1ria na tabela referenciada. E, para n\u00e3o esquecer, os valores informados devem respeitar o dom\u00ednio de dados da coluna. Quando h\u00e1 necessidade de adicionar m\u00faltiplas linhas em uma tabela n\u00e3o precisamos repetir diversas vezes o comando insert . Nestes casos, \u00e9 poss\u00edvel informar v\u00e1rios valores de tupla (linha) na cl\u00e1usula VALUES . No exemplo abaixo, o resultado da execu\u00e7\u00e3o ser\u00e1 a inser\u00e7\u00e3o de duas linhas na tabela produto . INSERT INTO produto ( id , nome ) VALUES ( default , 'L\u00e1pis' ), ( default , 'Caneta' ); Outra varia\u00e7\u00e3o de grande utilidade \u00e9 a possibilidade de substituir VALUES por um comando de SELECT . Observe: INSERT INTO produto ( nome ) SELECT item_nome FROM item_nota_fiscal WHERE tipo = 'P' ; Por fim, o PostgreSQL possibilita o retorno de valores em comandos de insert atrav\u00e9s da cl\u00e1usula returning . Esse recurso \u00e9 especialmente \u00fatil para obter valores de colunas configuradas como default , inclu\u00edndo tipos seriais utilizados em chaves prim\u00e1rias, bem como para comandos de PL/SQL que envolvem a atribui\u00e7\u00e3o de vari\u00e1veis ( Vide Documenta\u00e7\u00e3o ). No exemplo abaixo, o comando insert ir\u00e1 retornar o valor gerado para a coluna id , tal qual faria um comando select an\u00e1logo. INSERT INTO produto ( id , nome ) VALUES ( default , 'P\u00e3o' ) RETURNING id ;","title":"Comando INSERT"},{"location":"banco-dados/lang/#comando-delete","text":"{: .notice--info} A exclus\u00e3o de linhas de uma tabela \u00e9 realizada pelo comando delete . N\u00e3o confunda, portanto com o comando drop , cuja finalidade \u00e9 remover do dicion\u00e1rio (schema) a defini\u00e7\u00e3o e dados (se houver) de um objeto existente na base de dados. O comando delete n\u00e3o requer a especifica\u00e7\u00e3o de filtros. Neste caso, todas as linhas da tabela ser\u00e3o removidas, o que pode ser imprudente. Normalmente todo comando delete acompanha condi\u00e7\u00f5es que determinam quais linhas devem ser exclu\u00eddas dentre todas as existentes. Tais condi\u00e7\u00f5es s\u00e3o expressas na cl\u00e1usula WHERE , na forma de condi\u00e7\u00f5es l\u00f3gicas. --ir\u00e1 excluir todas as linhas da tabela estudante DELETE FROM estudante ; /*ir\u00e1 excluir somente as linhas cujas condi\u00e7\u00f5es forem satisfeitas*/ DELETE FROM estudante WHERE cpf = '012365478963' or status = 'C' ; A exclus\u00e3o das linhas somente ocorre quando nenhuma constraint for violada. Casos t\u00edpicos s\u00e3o linhas referenciadas em chaves estrangeiras, as quais n\u00e3o podem ser exclu\u00eddas pois implicaria na viola\u00e7\u00e3o da restri\u00e7\u00e3o de integridade referencial . Um meio de contornar a restri\u00e7\u00e3o e permitir a exclus\u00e3o da linha com depend\u00eancia \u00e9 valer-se da cl\u00e1usula ON DELETE CASCADE no momento de criar a chave estrangeira. Isso, contudo, ir\u00e1 depender das regras do neg\u00f3cio, que por vezes tornam invi\u00e1vel o uso de tal recurso. Pense, por exemplo, se ao excluir o registro de uma cidade, todos os dados de habitantes a ela associados fossem exclu\u00eddos automaticamente. Certamente n\u00e3o parece ser a melhor estrat\u00e9gia. Da mesma forma que ocorre com o comando INSERT , o PostgreSQL possibilita o retorno de valores em comandos de delete atrav\u00e9s da cl\u00e1usula returning . Observe o comando abaixo ( Vide Documenta\u00e7\u00e3o ): DELETE FROM produto WHERE data_validade > current_date - interval '10 days' returning id , nome ;","title":"Comando DELETE"},{"location":"banco-dados/lang/#comando-update","text":"{: .notice--info} Para realizar modifica\u00e7\u00f5es em dados armazenados, utilizamos o comando UPDATE . Por meio dele \u00e9 poss\u00edvel alterar valores de uma ou mais colunas da linha (ou linhas) de uma tabela. Se definido sem filtros, a altera\u00e7\u00e3o solicitada ser\u00e1 efetivada em todas as linhas, contudo nos cen\u00e1rios triviais de uso, este n\u00e3o \u00e9 o objetivo pretendido. Normalmente utilizamos condi\u00e7\u00f5es que restringem o efeito da atualiza\u00e7\u00e3o para uma quantia menor de linhas. --Todas as linhas de produto ter\u00e3o o valor da coluna nome alterado para Feij\u00e3o UPDATE produto SET nome = 'Feij\u00e3o' ; --O mesmo comando, agora com filtro UPDATE produto SET nome = 'Feij\u00e3o' WHERE codigo = 25 ; No comando update podemos especificar apenas uma tabela. A partir da cl\u00e1usula set informamos qual ser\u00e1 o novo valor das colunas que desejamos modificar. \u00c9 poss\u00edvel informar uma ou mais colunas na mesma instru\u00e7\u00e3o, assim como utilizar o valor atual de colunas para compor novos. Observe: --Modificando v\u00e1rias colunas em uma \u00fanica instru\u00e7\u00e3o UPDATE produto SET nome = 'Feij\u00e3o' , preco = 4 . 86 , peso = 2000 WHERE codigo = 25 ; --Novos valores de coluna com base nos atuais UPDATE produto SET preco = preco + preco * 0 . 05 WHERE codigo = 25 ; Voc\u00ea deve ter observado que a cl\u00e1usula set \u00e9 uma sequ\u00eancia de pares de coluna/valor separados por v\u00edrgula. Utilizando o trecho preco= preco + preco * 0.05 como exemplo, percebemos que \u00e0 esquerda da igualdade temos o nome da coluna que ter\u00e1 o valor modificado, enquanto que na direita encontramos o novo valor. Quando o nome de uma coluna aparece na direita (nosso exemplo), estamos lendo o valor atual para utiliz\u00e1-lo de alguma forma na composi\u00e7\u00e3o do novo. Assim, supondo que a coluna preco tenha por valor atual 2.40 , o novo valor ser\u00e1 o resultado da express\u00e3o 2.40 + 2.40 * 0.05 , ou seja, 2.52 . O PostgreSQL possibilita o retorno de valores em comandos update atrav\u00e9s da cl\u00e1usula returning . Observe o comando abaixo ( Vide Documenta\u00e7\u00e3o ): UPDATE produto SET nome = 'Feij\u00e3o' , preco = preco * 0 . 15 WHERE codigo = 25 RETURNING preco ;","title":"Comando UPDATE"},{"location":"banco-dados/lang/#comando-select","text":"{: .notice--info} Certamente podemos afirmar que o comando select \u00e9 um dos mais importantes da linguagem SQL. Isso porque atrav\u00e9s dele temos condi\u00e7\u00f5es de recompor as informa\u00e7\u00f5es do mundo fragmentados nas diferentes tabelas da base, respondendo \u00e0s consultas dos usu\u00e1rios. A informa\u00e7\u00e3o \u00e9, portanto, o que se busca apresentar nos diferentes softwares que constru\u00edmos para interagir com bases de dados. Proporcional a import\u00e2ncia do comando select \u00e9 a sua complexidade e varia\u00e7\u00e3o de sintaxe. Logo, extrair todo potencial do comando pode levar certo tempo de estudo e dedica\u00e7\u00e3o. Em termos gerais, o comando select representa o meio que temos, em bases relacionais, para recuperar dados. O seu retorno representa uma rela\u00e7\u00e3o (nome formal dado \u00e0s tabelas), uma vez que falamos em um retorno estruturado em linhas e colunas. Vamos come\u00e7ar nosso estudo entendendo as principais se\u00e7\u00f5es que comp\u00f5em o comando select . Para tal, considere o c\u00f3digo SQL abaixo: select medico_id , paciente_id , anamnese , data_hora_alta from internacao Observe a cl\u00e1usula from . Nela especificamos a(s) rela\u00e7\u00e3o(\u00f5es) que iremos consultar. A tabela internacao \u00e9 nossa rela\u00e7\u00e3o e estamos interessados em recuperar as linhas que ela cont\u00e9m. Sabemos que rela\u00e7\u00f5es s\u00e3o segmentadas em colunas e, na consulta, podemos limitar a quais delas gostar\u00edamos de receber no retorno. Portanto, somente as colunas medico_id , paciente_id , anamnese e data_hora_alta de todas as linhas armazenadas em internacao ser\u00e3o retornadas. Perceba que a lista de colunas deve ser expressa entre as cl\u00e1usulas select e from , utilizando v\u00edrgula como caractere separador e respeitando a nomenclatura utilizada no momento da cria\u00e7\u00e3o da tabela. Para os casos onde todas as colunas devem estar presentes na sa\u00edda, utilizamos um asterisco para simplificar a escrita da consulta. Neste caso, ter\u00edamos: select * from internacao Bem, e se voc\u00ea preferir mudar o nome de sa\u00edda da coluna...como faria? Neste caso, basta utilizar o recurso de troca de nomes ( rename ). Veja: select medico_id as \"codigo do m\u00e9dico\" , paciente_id paciente , anamnese , data_hora_alta as saida_paciente from internacao Ao optar por renomear colunas, quando utilizamos nomes compostos com espa\u00e7os entre as palavras, ser\u00e1 preciso envolver com aspas duplas ( medico_id as \"codigo do m\u00e9dico\" ). O operador as \u00e9 opcional, logo fica a seu crit\u00e9rio utiliz\u00e1-lo ou n\u00e3o. Apenas mantenha um padr\u00e3o de escrita, aderindo a uma das formas apenas. Aten\u00e7\u00e3o: A opera\u00e7\u00e3o rename n\u00e3o realiza altera\u00e7\u00f5es de schema. Seu efeito vale apenas no contexto da query. Al\u00e9m de nomes de colunas, podemos solicitar sa\u00edda de express\u00f5es. \u00c9 poss\u00edvel, por exemplo, realizar chamadas de fun\u00e7\u00f5es, c\u00e1lculos matem\u00e1ticos e at\u00e9 fazer uso de subqueries no espa\u00e7o reservado \u00e0s colunas. Contudo, precisamos utilizar tais liberdades com modera\u00e7\u00e3o, pois em alguns casos podemos comprometer o desempenho da consulta (veremos estas situa\u00e7\u00f5es em outro post). select upper ( anamnese ), age ( data_hora_alta ) as tempo_de_saida , 3 * 9 as calculo from internacao At\u00e9 o momento sabemos como especificar as colunas (ou express\u00f5es) e a rela\u00e7\u00e3o para nossas consultas via select . Da forma que apresentamos at\u00e9 ent\u00e3o, todas as linhas da rela\u00e7\u00e3o ser\u00e3o retornadas, uma vez que n\u00e3o definimos filtros para os dados. \u00c9 pouco prov\u00e1vel que suas queries considerem a integralidade de linhas de uma tabela, logo saber restringir o retorno apenas as linhas de interesse \u00e9 de fundamental import\u00e2ncia. A cl\u00e1usula que nos permite condicionar linhas ao retorno chama-se where . Nela, expressamos as restri\u00e7\u00f5es na forma de condi\u00e7\u00f5es l\u00f3gicas, elaboradas por meio de operadores de compara\u00e7\u00e3o ( < > = <= >= <> ) e conectores l\u00f3gicos ( NOT AND OR ) envolvendo colunas e/ou express\u00f5es. select * from internacao where data_hora_internacao > current_timestamp - interval '3 days' and tipo_clinica = 'M' Na query acima, condicionamos ao retorno linhas da tabela internacao que possuem valor igual a M na coluna tipo_clinica e cuja data_hora_internacao registra uma estampa de tempo de at\u00e9 3 dias.","title":"Comando SELECT"},{"location":"banco-dados/lang/#juncoes-internas","text":"","title":"Jun\u00e7\u00f5es Internas"},{"location":"banco-dados/project/","text":"","title":"Modelagem e projeto de banco de dados relacionais"},{"location":"banco-dados/references/","text":"Refer\u00eancias \u00b6 1 - Garcia-Molina, H. et al. Database Systems: The Complete Book . 2. ed. Upper Saddle River: Pearson Prentice Hall, 2008. 1240 p. 2 - DAMA International. DAMA-DMBOK (2nd Edition): Data Management Body of Knowledge .2. ed. Technics Publications, 2017. 1827 p.","title":"Refer\u00eancias"},{"location":"banco-dados/references/#referencias","text":"1 - Garcia-Molina, H. et al. Database Systems: The Complete Book . 2. ed. Upper Saddle River: Pearson Prentice Hall, 2008. 1240 p. 2 - DAMA International. DAMA-DMBOK (2nd Edition): Data Management Body of Knowledge .2. ed. Technics Publications, 2017. 1827 p.","title":"Refer\u00eancias"},{"location":"informatica/editores-apresentacao/","text":"","title":"Editores apresentacao"},{"location":"informatica/editores-planilhas/","text":"","title":"Editores planilhas"},{"location":"informatica/fundamentos/","text":"Tentativas de construir m\u00e1quinas que pudessem realizar atividades tipicamente humanas s\u00e3o extremamente comuns na hist\u00f3ria. Com o computador n\u00e3o foi diferente. De avan\u00e7o em avan\u00e7o nos campos da matem\u00e1tica, qu\u00edmica, f\u00edsica e eletr\u00f4nica chegamos ao computador como o conhecemos hoje. Das habilidades humanas, o c\u00e1lculo foi objeto de diversos inventos que buscavam facilitar o processo. O mais antigo deles \u00e9 o \u00e1baco, que embora seja aparentemente simples, pode ser t\u00e3o eficaz quanto uma calculadora eletr\u00f4nica nas m\u00e3os de um usu\u00e1rio experiente. As primeiras m\u00e1quinas capazes de realizar c\u00e1lculos eram puramente mec\u00e2nicas, utilizando rotores e combina\u00e7\u00f5es de engrenagens para efetuar opera\u00e7\u00f5es matem\u00e1ticas. Aqui podemos citar a M\u00e1quina de Pascal e a M\u00e1quina Anal\u00edtica de Charles Babbage , considerado um dos precursores da computa\u00e7\u00e3o. Outro invento marcante na hist\u00f3ria foi a M\u00e1quina de Tabular por Hermann Hollerith em 1890. Utilizando conceitos como cart\u00e3o perfurado, l\u00f3gica booleana e eletricidade, a m\u00e1quina de Hollerith tornou o processamento dos dados de censo americano da \u00e9poca muito mais r\u00e1pidos. Devido ao sucesso alcan\u00e7ado, Hollerith abriu sua pr\u00f3pria companhia que, em 1916, viria a ser conhecida como International Business Machine , a famosa IBM.","title":"Fundamentos"},{"location":"informatica/editores-texto/abnt/","text":"Em diversas situa\u00e7\u00f5es, a formata\u00e7\u00e3o do documento n\u00e3o \u00e9 de livre escolha do autor. Um exemplo cl\u00e1ssico s\u00e3o trabalhos acad\u00eamicos de conclus\u00e3o de curso, como artigos, monografias, teses, disserta\u00e7\u00f5es, entre outros. Para estes, a institui\u00e7\u00e3o define o modelo ( template ) do documento, que deve ser seguido a rigor pelo autor. Boa parte das regras de formata\u00e7\u00e3o contidas nestes modelos s\u00e3o baseados em normas da Associa\u00e7\u00e3o Brasileira de Normas T\u00e9cnicas (ABNT). Tentaremos, neste artigo, abordar alguns elementos presentes nestas normas para a formata\u00e7\u00e3o de trabalhos de conclus\u00e3o de curso. Contudo, aviso que o objetivo n\u00e3o ser\u00e1 apresentar detalhadamente a especifica\u00e7\u00e3o ditada pela norma, mas como configuramos no writer tais informa\u00e7\u00f5es do modo correto. Partes de Documento \u00b6 Trabalhos acad\u00eamicos tem suas partes divididas em tr\u00eas categorias: elementos pr\u00e9-textuais, elementos textuais e p\u00f3s-textuais. Vamos abordar cada um deles e apresentar dicas de como podemos configurar a formata\u00e7\u00e3o no LibreOffice Writer. Fonte: Manual ABNT: Regras Gerais de Estilo e Formata\u00e7\u00e3o de Trabalhos Acad\u00eamicos, pg. 13 De antem\u00e3o, devemos considerar que as p\u00e1ginas devem ser configuradas para formato A4 , orienta\u00e7\u00e3o retrato , e margens esquerda e superior em 3cm, direita e inferior, 2 cm . Quanto a fonte, devemos utilizar Times New Roman ou Arial em tamanho 12 para corpo do texto e 10 , para cita\u00e7\u00f5es, notas de rodap\u00e9, pagina\u00e7\u00e3o e legendas. Para configurar as p\u00e1ginas, sugiro criar estilos e, considerando a exist\u00eancia de tr\u00eas segmentos no documento (pr\u00e9-textuais, textuais e p\u00f3s-textuais), pode ser interessante realizar a cria\u00e7\u00e3o de tr\u00eas novos estilos de p\u00e1gina. Caso esteja com d\u00favidas sobre como criar tais estilos, sugiro a leitura do t\u00f3pico que falamos sobre o recurso . Ser\u00e1 importante tamb\u00e9m colocar todos os elementos pr\u00e9-textuais obrigat\u00f3rio e \u00e0queles opcionais que far\u00e3o parte do trabalho, um em cada p\u00e1gina (apenas reservar a p\u00e1gina). Assim teremos ideia do n\u00famero de p\u00e1ginas utilizadas e, tamb\u00e9m, do que ser\u00e1 necess\u00e1rio configurar para gerar os \u00edndices de forma autom\u00e1tica. Elementos pr\u00e9-textuais \u00b6 S\u00e3o as partes do documento que antecedem o conte\u00fado do trabalho. Nesta categoria, temos: Capa \u00b6 Item obrigat\u00f3rio de qualquer trabalho. Identifica a institui\u00e7\u00e3o, curso, autores, t\u00edtulo e subt\u00edtulo do trabalho, local e ano de entrega. Importante lembrar que a capa n\u00e3o conta na numera\u00e7\u00e3o de p\u00e1gina (p\u00e1gina 0) e que todos os elementos pr\u00e9-textuais n\u00e3o devem apresentar a numera\u00e7\u00e3o de p\u00e1gina no rodap\u00e9. Lombada \u00b6 Para trabalhos encadernados, este item se torna obrigat\u00f3rio. Sua estrutura \u00e9 definida pela institui\u00e7\u00e3o. Folha de Rosto \u00b6 Sua presen\u00e7a no documento \u00e9 obrigat\u00f3ria. Tem por objetivo apresentar os elementos de identifica\u00e7\u00e3o do trabalho, como nome do autor, t\u00edtulo e subt\u00edtulo, natureza, objetivo do trabalho, nome da institui\u00e7\u00e3o, nome do orientador, local e ano de entrega. Composi\u00e7\u00e3o Institucional e Ficha Catalogr\u00e1fica \u00b6 Normalmente gerada por bibliotec\u00e1rios. Ser\u00e1 preciso verificar o procedimento da institui\u00e7\u00e3o para sua obten\u00e7\u00e3o. Errata \u00b6 Item opcional, utilizado para adicionar a lista de erros e suas respectivas corre\u00e7\u00f5es. Folha de Aprova\u00e7\u00e3o \u00b6 Obrigat\u00f3ria. Deve conter detalhes dos autores, da institui\u00e7\u00e3o, t\u00edtulo pretendido e detalhes dos componentes da banca, com espa\u00e7o para assinatura. Dedicat\u00f3ria \u00b6 Item opcional utilizado para prestar homenagens e/ou dedicar o trabalho para algu\u00e9m. Agradecimento \u00b6 Item opcional utilizado para agradecer pessoas e/ou institui\u00e7\u00f5es que colaboraram de alguma forma para o desenvolvimento do trabalho. Ep\u00edgrafe \u00b6 Elemento opcional onde o autor pode fazer uma cita\u00e7\u00e3o que foi significativa no contexto do trabalho. A fonte deve ser indicada. Resumo \u00b6 Item obrigat\u00f3rio, escrito na l\u00edngua vern\u00e1cula (do pa\u00eds). Apresenta os pontos relevantes do documento. Acompanha ao final a lista de palavras-chave. Resumo em L\u00edngua Estrangeira \u00b6 Corresponde ao abstract , vers\u00e3o do resumo escrito em ingl\u00eas, acompanhado das keywords (palavras-chave). \u00c9 obrigat\u00f3rio apresent\u00e1-lo. Lista de Ilustra\u00e7\u00f5es \u00b6 \u00cdndice contendo as legendas das ilustra\u00e7\u00f5es apresentadas no texto, conforme sua ordem de apari\u00e7\u00e3o. \u00c9 opcional. Lista de Tabelas \u00b6 \u00cdndice contendo as legendas das tabelas apresentadas no texto, conforme sua ordem de apari\u00e7\u00e3o. \u00c9 opcional. Lista de Abreviaturas e Siglas \u00b6 Rela\u00e7\u00e3o de siglas e abreviaturas utilizadas no texto, acompanhadas dos respectivos significados. Tamb\u00e9m \u00e9 um elemento opcional. Lista de S\u00edmbolos \u00b6 Rela\u00e7\u00e3o de s\u00edmbolos utilizados e seus respectivos significados. \u00c9 opcional. Sum\u00e1rio \u00b6 \u00daltimo dos elementos pr\u00e9-textuais. \u00c9 obrigat\u00f3rio constar no documento. Corresponde a organiza\u00e7\u00e3o de t\u00f3picos do trabalho (cap\u00edtulos, se\u00e7\u00f5es, etc), apresentadas na ordem em que aparecem com o respectivo n\u00famero de p\u00e1gina. Elementos textuais \u00b6 Os elementos textuais devem contemplar a Introdu\u00e7\u00e3o , Desenvolvimento e Conclus\u00e3o do trabalho e naturalmente s\u00e3o obrigat\u00f3rios. Em termos de formata\u00e7\u00e3o, os pontos mais relevantes dos elementos textuais s\u00e3o t\u00edtulos , numera\u00e7\u00e3o de p\u00e1ginas , corpo do texto , cita\u00e7\u00f5es , figuras , quadros e tabelas . Vamos come\u00e7ar analisando a quest\u00e3o da numera\u00e7\u00e3o de p\u00e1ginas. Neste ponto, precisamos saber exatamente quantas p\u00e1ginas iremos utilizar nos elementos pr\u00e9-textuais (todos os obrigat\u00f3rios e os opcionais escolhidos). Tamb\u00e9m devemos nos atentar de que a capa n\u00e3o \u00e9 contabilizada. Ent\u00e3o, para nosso tutorial, vamos supor que nosso trabalho tenha os seguintes elementos pr\u00e9-textuais: Capa Folha de Rosto Folha de Aprova\u00e7\u00e3o Agradecimentos Lista de Ilustra\u00e7\u00f5es Lista de Tabelas Resumo Abstract Sum\u00e1rio Considerando que teremos 9 p\u00e1ginas de elementos pr\u00e9-textuais e que a capa n\u00e3o entra na contagem, a numera\u00e7\u00e3o de p\u00e1ginas, que ser\u00e1 apresentada a partir da Introdu\u00e7\u00e3o , deve iniciar em 9. Para conseguirmos ocultar a numera\u00e7\u00e3o dos elementos pr\u00e9-textuais e apresentarmos a partir dos elementos textuais, devemos utilizar o recurso quebra manual de p\u00e1gina , em conjunto com os estilos de p\u00e1gina que criamos anteriormente. Antes de realizar a quebra de p\u00e1gina, voc\u00ea deve reservar as p\u00e1ginas para os elementos pr\u00e9-textuais. Utilize o atalho CTRL+ENTER para inserir nova p\u00e1gina no documento. Agora, estando com o cursor na \u00faltima p\u00e1gina dos elementos pr\u00e9-textuais (referente ao sum\u00e1rio), v\u00e1 at\u00e9 o menu Inserir -> Mais quebras -> Quebra Manual e configure os valores conforme a imagem a seguir. Perceba que iremos utilizar o estilo de p\u00e1gina que criamos, alterando a sequ\u00eancia de numera\u00e7\u00e3o para 9 . As quebras de p\u00e1gina s\u00e3o extremamente \u00fateis porque definem regi\u00f5es do documento em que podemos aplicar estilos de p\u00e1gina diferentes. Al\u00e9m disso, cada regi\u00e3o ter\u00e1 cabe\u00e7alho e rodap\u00e9 espec\u00edficos, o que nos permitir\u00e1 ocultar o n\u00famero de p\u00e1gina dos elementos pr\u00e9-textuais de forma simples. Sabemos que o n\u00famero de p\u00e1gina deve estar no canto superior direito do documento, em fonte Arial ou Times New Roman , tamanho 10 . O primeiro passo para adicion\u00e1-lo \u00e9 exibir o cabe\u00e7alho da p\u00e1gina, clicar no espa\u00e7o correspondente e finalmente acessar o menu Inserir -> N\u00famero de P\u00e1gina . Nossos pr\u00f3ximos itens de formata\u00e7\u00e3o ser\u00e3o os t\u00edtulos. Configur\u00e1-los corretamente \u00e9 o segredo para a gera\u00e7\u00e3o do sum\u00e1rio de forma simples. Neste procedimento estaremos alterando estilos de par\u00e1grafo . Por padr\u00e3o, o LibreOffice Writer tr\u00e1s estilos espec\u00edficos para t\u00edtulos. Logo, \u00e9 mais r\u00e1pido modificar estes existentes do que criar novos. Para encontr\u00e1-los, um dos caminhos \u00e9 pela aba de estilos, filtrando por Estilos de Texto . Cap\u00edtulos \u00b6 Come\u00e7aremos a configura\u00e7\u00e3o pelo t\u00edtulo de primeiro n\u00edvel, que estabelece os cap\u00edtulos do documento e, pela norma, deve sempre iniciar nova p\u00e1gina. Para modificarmos o estilo T\u00edtulo 1 devemos clicar com o bot\u00e3o direito do mouse sobre ele, escolhendo a op\u00e7\u00e3o Modificar . Lembre-se que j\u00e1 apresentamos as telas de edi\u00e7\u00e3o de estilos de par\u00e1grafo . Caso n\u00e3o lembre, sugiro uma nova leitura. Os demais n\u00edveis voc\u00ea poder\u00e1 formatar utilizando como refer\u00eancia os exemplos aqui apresentados. Haver\u00e1 varia\u00e7\u00e3o do tamanho da fonte e efeitos aplicados. Revise a norma para detalhes. E, o mais importante: certifique-se de configurar os t\u00edtulos do n\u00edvel correto e de aplicar o estilo nos respectivos t\u00edtulos. Na sequ\u00eancia apresentamos os passos de configura\u00e7\u00e3o para T\u00edtulo 1 . Alinhamento do texto \u00b6 Dica Alinhar \u00e0 esquerda. Aba Alinhamento , Op\u00e7\u00f5es . Caracteres \u00b6 Dica Converter automaticamente todos os caracteres para mai\u00fasculo. Aba Efeitos da fonte , Efeitos Fonte \u00b6 Dica A norma define que a fonte seja Aria ou Times New Roman , tamanho 14 e um efeito, como negrito. Estas configura\u00e7\u00f5es s\u00e3o encontradas na Aba Fonte Fluxo do texto \u00b6 Dica T\u00edtulos de primeiro n\u00edvel devem iniciar nova p\u00e1gina.Aba Fluxo do texto , Quebras N\u00edvel do par\u00e1grafo \u00b6 Dica Verificar se o par\u00e1grafo est\u00e1 vinculado ao n\u00edvel 1 do texto. Esta configura\u00e7\u00e3o est\u00e1 indispon\u00edvel para edi\u00e7\u00e3o. Espa\u00e7amento \u00b6 Dica Antes ou ap\u00f3s o par\u00e1grafo deve-se deixar a dist\u00e2ncia equivalente a duas linhas de texto. No caso do t\u00edtulo de primeiro n\u00edvel, informamos somente o espa\u00e7o abaixo do par\u00e1grafo. Tal configura\u00e7\u00e3o \u00e9 feita na Aba Recuo e Espa\u00e7amento . Importante observar que, para os demais n\u00edveis, deve ser configurado o espa\u00e7o acima e abaixo do par\u00e1grafo. Numera\u00e7\u00e3o dos cap\u00edtulos \u00b6 A numera\u00e7\u00e3o de t\u00edtulos deve utilizar n\u00fameros ar\u00e1bicos, identificando a sequ\u00eancia em que aparecem no documento. Considerando que voc\u00ea configurou e aplicou os estilos corretamente, iremos agora configurar a numera\u00e7\u00e3o por meio do menu Ferramentas -> Numera\u00e7\u00e3o de Cap\u00edtulos . Observe na tela acima que, no lado esquerdo, temos os 10 n\u00edveis de t\u00f3picos poss\u00edveis. Clicando sobre um deles, temos a possibilidade de configurar o n\u00famero , \u00ednicio da contagem , estilo de par\u00e1grafo associado ao n\u00edvel , estilo de caractere , mostrar subn\u00edveis e separadores . Em n\u00famero , informe a sequ\u00eancia de n\u00famero ar\u00e1bicos (1,2,3). Verifique se o estilo de par\u00e1grafo informado condiz com \u00e0queles que voc\u00ea utilizou. Fa\u00e7a as altera\u00e7\u00f5es conforme necess\u00e1rio. No campo mostrar subn\u00edveis voc\u00ea deve informar os n\u00edveis que ir\u00e3o compor a numera\u00e7\u00e3o. Aumente este valor para o m\u00e1ximo poss\u00edvel (todos os n\u00edveis anteriores). Demais itens podem ficar com os valores padr\u00e3o. Repita a configura\u00e7\u00e3o para cada n\u00edvel existente no seu documento. Por fim, na aba Posi\u00e7\u00e3o , campo numera\u00e7\u00e3o seguida de , informe Espa\u00e7o . Sum\u00e1rio autom\u00e1tico \u00b6 Uma vez configurados os estilos e numera\u00e7\u00e3o dos cap\u00edtulos, a gera\u00e7\u00e3o do sum\u00e1rio de forma autom\u00e1tica se torna poss\u00edvel. Para o procedimento, devemos ir at\u00e9 a p\u00e1gina reservada ao sum\u00e1rio na se\u00e7\u00e3o de elementos pr\u00e9-textuais. Ap\u00f3s, acessar a aba Refer\u00eancias , bot\u00e3o Refer\u00eancias que est\u00e1 a direita, op\u00e7\u00e3o Sum\u00e1rio, \u00cdndice ou Bibliografia . Em T\u00edtulo deixaremos o valor padr\u00e3o. No campo Tipo deve estar Sum\u00e1rio e em Para , o valor deve ser Documento inteiro . Ao clicar em OK , o \u00edndice do sum\u00e1rio ser\u00e1 inserido autom\u00e1ticamente no local em que o cursor foi posicionando no documento. Quando o sum\u00e1rio \u00e9 inserido, cada entrada gerada vincula-se com estilos pr\u00e9-definidos. Logo, precisaremos ajustar a formata\u00e7\u00e3o destes estilos para atender os crit\u00e9rios da ABNT, que orienta a apresenta\u00e7\u00e3o de cada entrada no mesmo formato em que aparece no corpo do texto. O que temos de momento \u00e9 algo semelhante a imagem abaixo (ir\u00e1 depender dos t\u00edtulos definidos em seu documento). Para ajustarmos a formata\u00e7\u00e3o das entradas do sum\u00e1rio devemos inicialmente saber quais estilos s\u00e3o utilizados. Para isso, ser\u00e1 preciso clicar com o bot\u00e3o direito do mouse sobre qualquer parte do sum\u00e1rio e escolher a op\u00e7\u00e3o Editar \u00cdndice . Na tela apresentada, escolhemos a aba Estilos . Perceba que, no lado esquerdo da tela, temos cada n\u00edvel e o respectivo estilo entre [] . J\u00e1 no lado direito s\u00e3o listados todos os estilos de par\u00e1grafo dispon\u00edveis para que seja poss\u00edvel vincular o n\u00edvel ao estilo desejado. Nossa op\u00e7\u00e3o ser\u00e1, novamente, editar os estilos padr\u00e3o ( T\u00edtulo de sum\u00e1rio , Sum\u00e1rio 1 , Sum\u00e1rio 2 , etc), adequando-os \u00e0quilo que precisamos. O passo-a-passo para realizar o ajuste \u00e9 id\u00eantico a edi\u00e7\u00e3o de qualquer outro estilo de par\u00e1grafo. Al\u00e9m dos estilos, precisamos ajustar a constru\u00e7\u00e3o das entradas, especificamente a parada de tabula\u00e7\u00e3o . Voc\u00ea deve ter percebido que o espa\u00e7o entre o n\u00famero da p\u00e1gina e o texto do cap\u00edtulo est\u00e1 sendo preenchido com . , sendo que o correto \u00e9 espa\u00e7o . Ent\u00e3o, para este ajuste, devemos acessar a aba Entradas , e, para cada n\u00edvel desejado, alterar o caractere da parada de tabula\u00e7\u00e3o . Dica Clicar primeiro sobre o n\u00famero do n\u00edvel, ap\u00f3s no \"T\" e, por fim, informar o caractere de preenchimento correto. Legendas \u00b6 Legendas s\u00e3o aplicadas a tabelas, quadros e ilustra\u00e7\u00f5es. Compreendem a descri\u00e7\u00e3o do item, de forma objetiva, bem como indicam a sequ\u00eancia do elemento dentro do texto. Segundo a norma, devem estar em tamanho de fonte 10 , entre linhas simples, caracteres em mai\u00fasculo. Quadros : apresenta\u00e7\u00e3o tabular de dados, com moldura em torno (borda externa). Utilizado para apresentar conte\u00fado te\u00f3rico e dados num\u00e9ricos sem tratamento estat\u00edstico . Tabelas : apresenta\u00e7\u00e3o tabular de dados num\u00e9ricos com tratamento estat\u00edstico . Ilustra\u00e7\u00f5es : S\u00e3o imagens, figuras, gr\u00e1ficos, diagramas, entre outros. A inser\u00e7\u00e3o de legendas segue o mesma estrat\u00e9gia para todos os tipos citados. Por conta disso, iremos utilizar tabelas e imagens como estudo de caso. Inserir tabelas no Writer pode ser feito atrav\u00e9s do menu Tabela -> Inserir Tabela . O campo nome \u00e9 utilizado para identificar o objeto internamente e n\u00e3o ser\u00e1 apresentado no texto. Em Op\u00e7\u00f5es , \u00e9 \u00fatil marcar T\u00edtulo e, ap\u00f3s, Repetir linhas de t\u00edtulo nas novas p\u00e1ginas . Tal configura\u00e7\u00e3o aplica-se quando o conte\u00fado da tabela excede o espa\u00e7o dispon\u00edvel da p\u00e1gina e gera uma quebra. Neste caso, as primeiras n linhas da tabela ser\u00e3o repetidas na pr\u00f3xima p\u00e1gina. Tamb\u00e9m \u00e9 poss\u00edvel marcar um estilo predefinido de estilo para tabelas, caso necess\u00e1rio. Uma vez inserida no texto, j\u00e1 podemos adicionar a legenda para nossa tabela, clicando com o bot\u00e3o direito sobre qualquer c\u00e9lula da mesma, op\u00e7\u00e3o Inserir Legenda . O procedimento \u00e9 exatamente o mesmo para outros tipos de elementos, como quadros, imagens, etc. A tela a seguir ser\u00e1 apresentada: Em Legenda , informamos o texto que ir\u00e1 aparecer no documento. Em Categoria , informamos qual \u00e9 o \"tipo\" do objeto (se n\u00e3o houver na lista, \u00e9 poss\u00edvel informar um novo). A Numera\u00e7\u00e3o corresponde a configura\u00e7\u00e3o de como a sequ\u00eancia ser\u00e1 apresentada (segundo a norma, utilizar n\u00fameros ar\u00e1bicos). O caractere que ir\u00e1 separar o n\u00famero do texto da legenda deve ser especificado em Separador . Aqui utilizamos o tra\u00e7o (-). Por fim, em Posi\u00e7\u00e3o , informar em cima . Podemos repetir este procedimento para todo objeto que requer legenda no documento. Contudo, \u00e9 mais pr\u00e1tico configurar op\u00e7\u00f5es de inser\u00e7\u00e3o autom\u00e1tica de legendas. Conseguimos isso por meio do bot\u00e3o Autom\u00e1tico . Na tela apresentada, marcamos para quais objetos desejos que o Writer insira as legendas automaticamente, assim como a configura\u00e7\u00e3o esperada. Quanto \u00e0 formata\u00e7\u00e3o do texto legenda, este deve ser realizado por meio do estilo correspondente. Editar o estilo a partir do texto \u00e9 simples. Basta clicar sobre o texto com o bot\u00e3o direito do mouse, escolher a op\u00e7\u00e3o Par\u00e1grafo -> Editar Estilo . A norma recomenda que a fonte seja Arial ou Times New Roman , tamanho 10 , negrito , caracteres em mai\u00fasculo. Quando temos legendas inseridas em nosso documento, podemos solicitar ao writer que insira o \u00edndice autom\u00e1tico, se assim desejarmos, na folha correspondente dos elementos pr\u00e9-textuais. O processo \u00e9 id\u00eantico \u00e0 inser\u00e7\u00e3o do sum\u00e1rio, com a simples diferen\u00e7a de que devemos alterar o tipo de \u00edndice a ser inserido. Os campos importantes s\u00e3o T\u00edtulo , Tipo e Categoria , que devem estar alinhados com os objetos que voc\u00ea deseja listar no \u00edndice. J\u00e1 a formata\u00e7\u00e3o do \u00edndice deve ser feita pelos estilos correspondentes, tal qual explicamos com rela\u00e7\u00e3o ao sum\u00e1rio. Entradas bibliogr\u00e1ficas e bibliografia \u00b6 Quando elaboramos documentos acad\u00eamicos/cient\u00edficos, consultamos diferentes fontes para endossar nossas afirma\u00e7\u00f5es. Livros, revistas cient\u00edficas, web sites, documentos digitais s\u00e3o exemplos de fontes que podemos utilizar. Todos estes recursos precisam ser citados no texto e jamais podemos utilizar uma afirma\u00e7\u00e3o alheia como se fosse nossa. Tal pr\u00e1tica constitui crime de pl\u00e1gio e \u00e9 repudiada por qualquer acad\u00eamico s\u00e9rio. Manter controle das cita\u00e7\u00f5es n\u00e3o \u00e9 tarefa simples, especialmente quando o documento faz uso de dezenas ou at\u00e9 centenas delas. Al\u00e9m disso, a norma ABNT especifica detalhadamente como devemos citar e apresentar a bibliografia que utilizamos. Para nos auxiliar neste tarefa, o LibreOffice Writer oferece ferramentas espec\u00edficas, voltadas ao gerenciamento de bibliografia de documentos. Trabalhar com refer\u00eancias bibliogr\u00e1ficas requer a compreens\u00e3o dos conceitos de banco de dados bibliogr\u00e1fico , entrada bibliogr\u00e1fica e bibliografia . O banco de dados bibliogr\u00e1fico constitui o reposit\u00f3rio de todas as refer\u00eancias j\u00e1 cadastradas no LibreOffice Writer. Cada registro cont\u00e9m os detalhes da obra, como autores, t\u00edtulo, ano de publica\u00e7\u00e3o, entre outros campos. Logo, o primeiro do processo do processo ser\u00e1 cadastrar a obra neste banco de dados. Para isso, devemos acessar o menu Ferramentas -> Banco de Dados Bibliogr\u00e1fico . Na tela apresentada, iremos cadastrar os detalhes de todas as obras que precisamos citar no documento. O campo Nome abreviado merece especial aten\u00e7\u00e3o, pois ele ser\u00e1 inserido nas cita\u00e7\u00f5es. Ent\u00e3o, \u00e9 conveniente informar de acordo com a norma, a qual define como sendo o SOBRENOME, ano de publica\u00e7\u00e3o . Ap\u00f3s inclu\u00edda a bibliografia, podemos cit\u00e1-la no texto a partir do menu Inserir -> Sum\u00e1rios e \u00cdndices -> Entrada Bibliogr\u00e1fica . O pr\u00f3ximo passo ser\u00e1 escolher qual das refer\u00eancias j\u00e1 cadastradas no banco de dados bibliogr\u00e1ficos ser\u00e1 utilizada na cita\u00e7\u00e3o. Faremos isso para toda e qualquer cita\u00e7\u00e3o existente. Por fim, iremos adicionar a bibliografia ao documento. Faremos tal processo por meio do menu Inserir -> Sum\u00e1rios e \u00cdndices -> Sum\u00e1rio, \u00edndice ou bibliografia . Lembre-se de deixar o cursor do mouse na posi\u00e7\u00e3o correta do documento antes de inserir o \u00edndice. A tela de configura\u00e7\u00e3o \u00e9 a mesma que utilizamos para inserir os demais \u00edndices, com exce\u00e7\u00e3o dos campos de configura\u00e7\u00e3o espec\u00edfica para bibliografia. Entrada num\u00e9rica , por exemplo, \u00e9 o local onde alteramos a forma das cita\u00e7\u00f5es (n\u00fameros ou nome abreviado). Em Colchetes , especificamos o tipo de caractere que ir\u00e1 envolver a cita\u00e7\u00e3o no texto. Outra importante configura\u00e7\u00e3o refere-se a definir como cada entrada de bibliografia ser\u00e1 apresentada no texto. Perceba que, na coluna da esquerda, est\u00e3o todos os tipos de obras, sendo que para cada uma delas podemos especificar o formato de constru\u00e7\u00e3o da refer\u00eancia, modificando a composi\u00e7\u00e3o e ordem dos campos em Estrutura e Formata\u00e7\u00e3o . A ABNT especifica regras para referenciar cada tipo de obra. Logo, voc\u00ea dever\u00e1 compor a entrada com base na norma. Elementos p\u00f3s-textuais \u00b6 Os elementos p\u00f3s-textuais compreendem as refer\u00eancias bibliogr\u00e1fias , ap\u00eandices e anexos . Quanto \u00e0s refer\u00eancias, j\u00e1 comentamos sobre como inser\u00ed-las de forma autom\u00e1tica no documento. J\u00e1 ap\u00eandices e anexos seguem o padr\u00e3o de t\u00edtulos dos elementos textuais de primeiro n\u00edvel. Refer\u00eancias \u00b6 BRITO, G. F.; CHOI, V. P.; ALMEIDA, A. Manual ABNT: Regras Gerais de Estilo e Formata\u00e7\u00e3o de Trabalhos Acad\u00eamicos (4\u00aa edi\u00e7\u00e3o revisada e ampliada). 2014. Dispon\u00edvel em: < http://biblioteca.fecap.br/wp-content/uploads/2016/03/Manual-ABNT_-regras-gerais-de-estilo-e-formata\u00e7\u00e3o-de-trabalhos-acad\u00eamicos.pdf >. Acesso em: 5 jun. 2021.","title":"ABNT"},{"location":"informatica/editores-texto/abnt/#partes-de-documento","text":"Trabalhos acad\u00eamicos tem suas partes divididas em tr\u00eas categorias: elementos pr\u00e9-textuais, elementos textuais e p\u00f3s-textuais. Vamos abordar cada um deles e apresentar dicas de como podemos configurar a formata\u00e7\u00e3o no LibreOffice Writer. Fonte: Manual ABNT: Regras Gerais de Estilo e Formata\u00e7\u00e3o de Trabalhos Acad\u00eamicos, pg. 13 De antem\u00e3o, devemos considerar que as p\u00e1ginas devem ser configuradas para formato A4 , orienta\u00e7\u00e3o retrato , e margens esquerda e superior em 3cm, direita e inferior, 2 cm . Quanto a fonte, devemos utilizar Times New Roman ou Arial em tamanho 12 para corpo do texto e 10 , para cita\u00e7\u00f5es, notas de rodap\u00e9, pagina\u00e7\u00e3o e legendas. Para configurar as p\u00e1ginas, sugiro criar estilos e, considerando a exist\u00eancia de tr\u00eas segmentos no documento (pr\u00e9-textuais, textuais e p\u00f3s-textuais), pode ser interessante realizar a cria\u00e7\u00e3o de tr\u00eas novos estilos de p\u00e1gina. Caso esteja com d\u00favidas sobre como criar tais estilos, sugiro a leitura do t\u00f3pico que falamos sobre o recurso . Ser\u00e1 importante tamb\u00e9m colocar todos os elementos pr\u00e9-textuais obrigat\u00f3rio e \u00e0queles opcionais que far\u00e3o parte do trabalho, um em cada p\u00e1gina (apenas reservar a p\u00e1gina). Assim teremos ideia do n\u00famero de p\u00e1ginas utilizadas e, tamb\u00e9m, do que ser\u00e1 necess\u00e1rio configurar para gerar os \u00edndices de forma autom\u00e1tica.","title":"Partes de Documento"},{"location":"informatica/editores-texto/abnt/#elementos-pre-textuais","text":"S\u00e3o as partes do documento que antecedem o conte\u00fado do trabalho. Nesta categoria, temos:","title":"Elementos pr\u00e9-textuais"},{"location":"informatica/editores-texto/abnt/#capa","text":"Item obrigat\u00f3rio de qualquer trabalho. Identifica a institui\u00e7\u00e3o, curso, autores, t\u00edtulo e subt\u00edtulo do trabalho, local e ano de entrega. Importante lembrar que a capa n\u00e3o conta na numera\u00e7\u00e3o de p\u00e1gina (p\u00e1gina 0) e que todos os elementos pr\u00e9-textuais n\u00e3o devem apresentar a numera\u00e7\u00e3o de p\u00e1gina no rodap\u00e9.","title":"Capa"},{"location":"informatica/editores-texto/abnt/#lombada","text":"Para trabalhos encadernados, este item se torna obrigat\u00f3rio. Sua estrutura \u00e9 definida pela institui\u00e7\u00e3o.","title":"Lombada"},{"location":"informatica/editores-texto/abnt/#folha-de-rosto","text":"Sua presen\u00e7a no documento \u00e9 obrigat\u00f3ria. Tem por objetivo apresentar os elementos de identifica\u00e7\u00e3o do trabalho, como nome do autor, t\u00edtulo e subt\u00edtulo, natureza, objetivo do trabalho, nome da institui\u00e7\u00e3o, nome do orientador, local e ano de entrega.","title":"Folha de Rosto"},{"location":"informatica/editores-texto/abnt/#composicao-institucional-e-ficha-catalografica","text":"Normalmente gerada por bibliotec\u00e1rios. Ser\u00e1 preciso verificar o procedimento da institui\u00e7\u00e3o para sua obten\u00e7\u00e3o.","title":"Composi\u00e7\u00e3o Institucional e Ficha Catalogr\u00e1fica"},{"location":"informatica/editores-texto/abnt/#errata","text":"Item opcional, utilizado para adicionar a lista de erros e suas respectivas corre\u00e7\u00f5es.","title":"Errata"},{"location":"informatica/editores-texto/abnt/#folha-de-aprovacao","text":"Obrigat\u00f3ria. Deve conter detalhes dos autores, da institui\u00e7\u00e3o, t\u00edtulo pretendido e detalhes dos componentes da banca, com espa\u00e7o para assinatura.","title":"Folha de Aprova\u00e7\u00e3o"},{"location":"informatica/editores-texto/abnt/#dedicatoria","text":"Item opcional utilizado para prestar homenagens e/ou dedicar o trabalho para algu\u00e9m.","title":"Dedicat\u00f3ria"},{"location":"informatica/editores-texto/abnt/#agradecimento","text":"Item opcional utilizado para agradecer pessoas e/ou institui\u00e7\u00f5es que colaboraram de alguma forma para o desenvolvimento do trabalho.","title":"Agradecimento"},{"location":"informatica/editores-texto/abnt/#epigrafe","text":"Elemento opcional onde o autor pode fazer uma cita\u00e7\u00e3o que foi significativa no contexto do trabalho. A fonte deve ser indicada.","title":"Ep\u00edgrafe"},{"location":"informatica/editores-texto/abnt/#resumo","text":"Item obrigat\u00f3rio, escrito na l\u00edngua vern\u00e1cula (do pa\u00eds). Apresenta os pontos relevantes do documento. Acompanha ao final a lista de palavras-chave.","title":"Resumo"},{"location":"informatica/editores-texto/abnt/#resumo-em-lingua-estrangeira","text":"Corresponde ao abstract , vers\u00e3o do resumo escrito em ingl\u00eas, acompanhado das keywords (palavras-chave). \u00c9 obrigat\u00f3rio apresent\u00e1-lo.","title":"Resumo em L\u00edngua Estrangeira"},{"location":"informatica/editores-texto/abnt/#lista-de-ilustracoes","text":"\u00cdndice contendo as legendas das ilustra\u00e7\u00f5es apresentadas no texto, conforme sua ordem de apari\u00e7\u00e3o. \u00c9 opcional.","title":"Lista de Ilustra\u00e7\u00f5es"},{"location":"informatica/editores-texto/abnt/#lista-de-tabelas","text":"\u00cdndice contendo as legendas das tabelas apresentadas no texto, conforme sua ordem de apari\u00e7\u00e3o. \u00c9 opcional.","title":"Lista de Tabelas"},{"location":"informatica/editores-texto/abnt/#lista-de-abreviaturas-e-siglas","text":"Rela\u00e7\u00e3o de siglas e abreviaturas utilizadas no texto, acompanhadas dos respectivos significados. Tamb\u00e9m \u00e9 um elemento opcional.","title":"Lista de Abreviaturas e Siglas"},{"location":"informatica/editores-texto/abnt/#lista-de-simbolos","text":"Rela\u00e7\u00e3o de s\u00edmbolos utilizados e seus respectivos significados. \u00c9 opcional.","title":"Lista de S\u00edmbolos"},{"location":"informatica/editores-texto/abnt/#sumario","text":"\u00daltimo dos elementos pr\u00e9-textuais. \u00c9 obrigat\u00f3rio constar no documento. Corresponde a organiza\u00e7\u00e3o de t\u00f3picos do trabalho (cap\u00edtulos, se\u00e7\u00f5es, etc), apresentadas na ordem em que aparecem com o respectivo n\u00famero de p\u00e1gina.","title":"Sum\u00e1rio"},{"location":"informatica/editores-texto/abnt/#elementos-textuais","text":"Os elementos textuais devem contemplar a Introdu\u00e7\u00e3o , Desenvolvimento e Conclus\u00e3o do trabalho e naturalmente s\u00e3o obrigat\u00f3rios. Em termos de formata\u00e7\u00e3o, os pontos mais relevantes dos elementos textuais s\u00e3o t\u00edtulos , numera\u00e7\u00e3o de p\u00e1ginas , corpo do texto , cita\u00e7\u00f5es , figuras , quadros e tabelas . Vamos come\u00e7ar analisando a quest\u00e3o da numera\u00e7\u00e3o de p\u00e1ginas. Neste ponto, precisamos saber exatamente quantas p\u00e1ginas iremos utilizar nos elementos pr\u00e9-textuais (todos os obrigat\u00f3rios e os opcionais escolhidos). Tamb\u00e9m devemos nos atentar de que a capa n\u00e3o \u00e9 contabilizada. Ent\u00e3o, para nosso tutorial, vamos supor que nosso trabalho tenha os seguintes elementos pr\u00e9-textuais: Capa Folha de Rosto Folha de Aprova\u00e7\u00e3o Agradecimentos Lista de Ilustra\u00e7\u00f5es Lista de Tabelas Resumo Abstract Sum\u00e1rio Considerando que teremos 9 p\u00e1ginas de elementos pr\u00e9-textuais e que a capa n\u00e3o entra na contagem, a numera\u00e7\u00e3o de p\u00e1ginas, que ser\u00e1 apresentada a partir da Introdu\u00e7\u00e3o , deve iniciar em 9. Para conseguirmos ocultar a numera\u00e7\u00e3o dos elementos pr\u00e9-textuais e apresentarmos a partir dos elementos textuais, devemos utilizar o recurso quebra manual de p\u00e1gina , em conjunto com os estilos de p\u00e1gina que criamos anteriormente. Antes de realizar a quebra de p\u00e1gina, voc\u00ea deve reservar as p\u00e1ginas para os elementos pr\u00e9-textuais. Utilize o atalho CTRL+ENTER para inserir nova p\u00e1gina no documento. Agora, estando com o cursor na \u00faltima p\u00e1gina dos elementos pr\u00e9-textuais (referente ao sum\u00e1rio), v\u00e1 at\u00e9 o menu Inserir -> Mais quebras -> Quebra Manual e configure os valores conforme a imagem a seguir. Perceba que iremos utilizar o estilo de p\u00e1gina que criamos, alterando a sequ\u00eancia de numera\u00e7\u00e3o para 9 . As quebras de p\u00e1gina s\u00e3o extremamente \u00fateis porque definem regi\u00f5es do documento em que podemos aplicar estilos de p\u00e1gina diferentes. Al\u00e9m disso, cada regi\u00e3o ter\u00e1 cabe\u00e7alho e rodap\u00e9 espec\u00edficos, o que nos permitir\u00e1 ocultar o n\u00famero de p\u00e1gina dos elementos pr\u00e9-textuais de forma simples. Sabemos que o n\u00famero de p\u00e1gina deve estar no canto superior direito do documento, em fonte Arial ou Times New Roman , tamanho 10 . O primeiro passo para adicion\u00e1-lo \u00e9 exibir o cabe\u00e7alho da p\u00e1gina, clicar no espa\u00e7o correspondente e finalmente acessar o menu Inserir -> N\u00famero de P\u00e1gina . Nossos pr\u00f3ximos itens de formata\u00e7\u00e3o ser\u00e3o os t\u00edtulos. Configur\u00e1-los corretamente \u00e9 o segredo para a gera\u00e7\u00e3o do sum\u00e1rio de forma simples. Neste procedimento estaremos alterando estilos de par\u00e1grafo . Por padr\u00e3o, o LibreOffice Writer tr\u00e1s estilos espec\u00edficos para t\u00edtulos. Logo, \u00e9 mais r\u00e1pido modificar estes existentes do que criar novos. Para encontr\u00e1-los, um dos caminhos \u00e9 pela aba de estilos, filtrando por Estilos de Texto .","title":"Elementos textuais"},{"location":"informatica/editores-texto/abnt/#capitulos","text":"Come\u00e7aremos a configura\u00e7\u00e3o pelo t\u00edtulo de primeiro n\u00edvel, que estabelece os cap\u00edtulos do documento e, pela norma, deve sempre iniciar nova p\u00e1gina. Para modificarmos o estilo T\u00edtulo 1 devemos clicar com o bot\u00e3o direito do mouse sobre ele, escolhendo a op\u00e7\u00e3o Modificar . Lembre-se que j\u00e1 apresentamos as telas de edi\u00e7\u00e3o de estilos de par\u00e1grafo . Caso n\u00e3o lembre, sugiro uma nova leitura. Os demais n\u00edveis voc\u00ea poder\u00e1 formatar utilizando como refer\u00eancia os exemplos aqui apresentados. Haver\u00e1 varia\u00e7\u00e3o do tamanho da fonte e efeitos aplicados. Revise a norma para detalhes. E, o mais importante: certifique-se de configurar os t\u00edtulos do n\u00edvel correto e de aplicar o estilo nos respectivos t\u00edtulos. Na sequ\u00eancia apresentamos os passos de configura\u00e7\u00e3o para T\u00edtulo 1 .","title":"Cap\u00edtulos"},{"location":"informatica/editores-texto/abnt/#alinhamento-do-texto","text":"Dica Alinhar \u00e0 esquerda. Aba Alinhamento , Op\u00e7\u00f5es .","title":"Alinhamento do texto"},{"location":"informatica/editores-texto/abnt/#caracteres","text":"Dica Converter automaticamente todos os caracteres para mai\u00fasculo. Aba Efeitos da fonte , Efeitos","title":"Caracteres"},{"location":"informatica/editores-texto/abnt/#fonte","text":"Dica A norma define que a fonte seja Aria ou Times New Roman , tamanho 14 e um efeito, como negrito. Estas configura\u00e7\u00f5es s\u00e3o encontradas na Aba Fonte","title":"Fonte"},{"location":"informatica/editores-texto/abnt/#fluxo-do-texto","text":"Dica T\u00edtulos de primeiro n\u00edvel devem iniciar nova p\u00e1gina.Aba Fluxo do texto , Quebras","title":"Fluxo do texto"},{"location":"informatica/editores-texto/abnt/#nivel-do-paragrafo","text":"Dica Verificar se o par\u00e1grafo est\u00e1 vinculado ao n\u00edvel 1 do texto. Esta configura\u00e7\u00e3o est\u00e1 indispon\u00edvel para edi\u00e7\u00e3o.","title":"N\u00edvel do par\u00e1grafo"},{"location":"informatica/editores-texto/abnt/#espacamento","text":"Dica Antes ou ap\u00f3s o par\u00e1grafo deve-se deixar a dist\u00e2ncia equivalente a duas linhas de texto. No caso do t\u00edtulo de primeiro n\u00edvel, informamos somente o espa\u00e7o abaixo do par\u00e1grafo. Tal configura\u00e7\u00e3o \u00e9 feita na Aba Recuo e Espa\u00e7amento . Importante observar que, para os demais n\u00edveis, deve ser configurado o espa\u00e7o acima e abaixo do par\u00e1grafo.","title":"Espa\u00e7amento"},{"location":"informatica/editores-texto/abnt/#numeracao-dos-capitulos","text":"A numera\u00e7\u00e3o de t\u00edtulos deve utilizar n\u00fameros ar\u00e1bicos, identificando a sequ\u00eancia em que aparecem no documento. Considerando que voc\u00ea configurou e aplicou os estilos corretamente, iremos agora configurar a numera\u00e7\u00e3o por meio do menu Ferramentas -> Numera\u00e7\u00e3o de Cap\u00edtulos . Observe na tela acima que, no lado esquerdo, temos os 10 n\u00edveis de t\u00f3picos poss\u00edveis. Clicando sobre um deles, temos a possibilidade de configurar o n\u00famero , \u00ednicio da contagem , estilo de par\u00e1grafo associado ao n\u00edvel , estilo de caractere , mostrar subn\u00edveis e separadores . Em n\u00famero , informe a sequ\u00eancia de n\u00famero ar\u00e1bicos (1,2,3). Verifique se o estilo de par\u00e1grafo informado condiz com \u00e0queles que voc\u00ea utilizou. Fa\u00e7a as altera\u00e7\u00f5es conforme necess\u00e1rio. No campo mostrar subn\u00edveis voc\u00ea deve informar os n\u00edveis que ir\u00e3o compor a numera\u00e7\u00e3o. Aumente este valor para o m\u00e1ximo poss\u00edvel (todos os n\u00edveis anteriores). Demais itens podem ficar com os valores padr\u00e3o. Repita a configura\u00e7\u00e3o para cada n\u00edvel existente no seu documento. Por fim, na aba Posi\u00e7\u00e3o , campo numera\u00e7\u00e3o seguida de , informe Espa\u00e7o .","title":"Numera\u00e7\u00e3o dos cap\u00edtulos"},{"location":"informatica/editores-texto/abnt/#sumario-automatico","text":"Uma vez configurados os estilos e numera\u00e7\u00e3o dos cap\u00edtulos, a gera\u00e7\u00e3o do sum\u00e1rio de forma autom\u00e1tica se torna poss\u00edvel. Para o procedimento, devemos ir at\u00e9 a p\u00e1gina reservada ao sum\u00e1rio na se\u00e7\u00e3o de elementos pr\u00e9-textuais. Ap\u00f3s, acessar a aba Refer\u00eancias , bot\u00e3o Refer\u00eancias que est\u00e1 a direita, op\u00e7\u00e3o Sum\u00e1rio, \u00cdndice ou Bibliografia . Em T\u00edtulo deixaremos o valor padr\u00e3o. No campo Tipo deve estar Sum\u00e1rio e em Para , o valor deve ser Documento inteiro . Ao clicar em OK , o \u00edndice do sum\u00e1rio ser\u00e1 inserido autom\u00e1ticamente no local em que o cursor foi posicionando no documento. Quando o sum\u00e1rio \u00e9 inserido, cada entrada gerada vincula-se com estilos pr\u00e9-definidos. Logo, precisaremos ajustar a formata\u00e7\u00e3o destes estilos para atender os crit\u00e9rios da ABNT, que orienta a apresenta\u00e7\u00e3o de cada entrada no mesmo formato em que aparece no corpo do texto. O que temos de momento \u00e9 algo semelhante a imagem abaixo (ir\u00e1 depender dos t\u00edtulos definidos em seu documento). Para ajustarmos a formata\u00e7\u00e3o das entradas do sum\u00e1rio devemos inicialmente saber quais estilos s\u00e3o utilizados. Para isso, ser\u00e1 preciso clicar com o bot\u00e3o direito do mouse sobre qualquer parte do sum\u00e1rio e escolher a op\u00e7\u00e3o Editar \u00cdndice . Na tela apresentada, escolhemos a aba Estilos . Perceba que, no lado esquerdo da tela, temos cada n\u00edvel e o respectivo estilo entre [] . J\u00e1 no lado direito s\u00e3o listados todos os estilos de par\u00e1grafo dispon\u00edveis para que seja poss\u00edvel vincular o n\u00edvel ao estilo desejado. Nossa op\u00e7\u00e3o ser\u00e1, novamente, editar os estilos padr\u00e3o ( T\u00edtulo de sum\u00e1rio , Sum\u00e1rio 1 , Sum\u00e1rio 2 , etc), adequando-os \u00e0quilo que precisamos. O passo-a-passo para realizar o ajuste \u00e9 id\u00eantico a edi\u00e7\u00e3o de qualquer outro estilo de par\u00e1grafo. Al\u00e9m dos estilos, precisamos ajustar a constru\u00e7\u00e3o das entradas, especificamente a parada de tabula\u00e7\u00e3o . Voc\u00ea deve ter percebido que o espa\u00e7o entre o n\u00famero da p\u00e1gina e o texto do cap\u00edtulo est\u00e1 sendo preenchido com . , sendo que o correto \u00e9 espa\u00e7o . Ent\u00e3o, para este ajuste, devemos acessar a aba Entradas , e, para cada n\u00edvel desejado, alterar o caractere da parada de tabula\u00e7\u00e3o . Dica Clicar primeiro sobre o n\u00famero do n\u00edvel, ap\u00f3s no \"T\" e, por fim, informar o caractere de preenchimento correto.","title":"Sum\u00e1rio autom\u00e1tico"},{"location":"informatica/editores-texto/abnt/#legendas","text":"Legendas s\u00e3o aplicadas a tabelas, quadros e ilustra\u00e7\u00f5es. Compreendem a descri\u00e7\u00e3o do item, de forma objetiva, bem como indicam a sequ\u00eancia do elemento dentro do texto. Segundo a norma, devem estar em tamanho de fonte 10 , entre linhas simples, caracteres em mai\u00fasculo. Quadros : apresenta\u00e7\u00e3o tabular de dados, com moldura em torno (borda externa). Utilizado para apresentar conte\u00fado te\u00f3rico e dados num\u00e9ricos sem tratamento estat\u00edstico . Tabelas : apresenta\u00e7\u00e3o tabular de dados num\u00e9ricos com tratamento estat\u00edstico . Ilustra\u00e7\u00f5es : S\u00e3o imagens, figuras, gr\u00e1ficos, diagramas, entre outros. A inser\u00e7\u00e3o de legendas segue o mesma estrat\u00e9gia para todos os tipos citados. Por conta disso, iremos utilizar tabelas e imagens como estudo de caso. Inserir tabelas no Writer pode ser feito atrav\u00e9s do menu Tabela -> Inserir Tabela . O campo nome \u00e9 utilizado para identificar o objeto internamente e n\u00e3o ser\u00e1 apresentado no texto. Em Op\u00e7\u00f5es , \u00e9 \u00fatil marcar T\u00edtulo e, ap\u00f3s, Repetir linhas de t\u00edtulo nas novas p\u00e1ginas . Tal configura\u00e7\u00e3o aplica-se quando o conte\u00fado da tabela excede o espa\u00e7o dispon\u00edvel da p\u00e1gina e gera uma quebra. Neste caso, as primeiras n linhas da tabela ser\u00e3o repetidas na pr\u00f3xima p\u00e1gina. Tamb\u00e9m \u00e9 poss\u00edvel marcar um estilo predefinido de estilo para tabelas, caso necess\u00e1rio. Uma vez inserida no texto, j\u00e1 podemos adicionar a legenda para nossa tabela, clicando com o bot\u00e3o direito sobre qualquer c\u00e9lula da mesma, op\u00e7\u00e3o Inserir Legenda . O procedimento \u00e9 exatamente o mesmo para outros tipos de elementos, como quadros, imagens, etc. A tela a seguir ser\u00e1 apresentada: Em Legenda , informamos o texto que ir\u00e1 aparecer no documento. Em Categoria , informamos qual \u00e9 o \"tipo\" do objeto (se n\u00e3o houver na lista, \u00e9 poss\u00edvel informar um novo). A Numera\u00e7\u00e3o corresponde a configura\u00e7\u00e3o de como a sequ\u00eancia ser\u00e1 apresentada (segundo a norma, utilizar n\u00fameros ar\u00e1bicos). O caractere que ir\u00e1 separar o n\u00famero do texto da legenda deve ser especificado em Separador . Aqui utilizamos o tra\u00e7o (-). Por fim, em Posi\u00e7\u00e3o , informar em cima . Podemos repetir este procedimento para todo objeto que requer legenda no documento. Contudo, \u00e9 mais pr\u00e1tico configurar op\u00e7\u00f5es de inser\u00e7\u00e3o autom\u00e1tica de legendas. Conseguimos isso por meio do bot\u00e3o Autom\u00e1tico . Na tela apresentada, marcamos para quais objetos desejos que o Writer insira as legendas automaticamente, assim como a configura\u00e7\u00e3o esperada. Quanto \u00e0 formata\u00e7\u00e3o do texto legenda, este deve ser realizado por meio do estilo correspondente. Editar o estilo a partir do texto \u00e9 simples. Basta clicar sobre o texto com o bot\u00e3o direito do mouse, escolher a op\u00e7\u00e3o Par\u00e1grafo -> Editar Estilo . A norma recomenda que a fonte seja Arial ou Times New Roman , tamanho 10 , negrito , caracteres em mai\u00fasculo. Quando temos legendas inseridas em nosso documento, podemos solicitar ao writer que insira o \u00edndice autom\u00e1tico, se assim desejarmos, na folha correspondente dos elementos pr\u00e9-textuais. O processo \u00e9 id\u00eantico \u00e0 inser\u00e7\u00e3o do sum\u00e1rio, com a simples diferen\u00e7a de que devemos alterar o tipo de \u00edndice a ser inserido. Os campos importantes s\u00e3o T\u00edtulo , Tipo e Categoria , que devem estar alinhados com os objetos que voc\u00ea deseja listar no \u00edndice. J\u00e1 a formata\u00e7\u00e3o do \u00edndice deve ser feita pelos estilos correspondentes, tal qual explicamos com rela\u00e7\u00e3o ao sum\u00e1rio.","title":"Legendas"},{"location":"informatica/editores-texto/abnt/#entradas-bibliograficas-e-bibliografia","text":"Quando elaboramos documentos acad\u00eamicos/cient\u00edficos, consultamos diferentes fontes para endossar nossas afirma\u00e7\u00f5es. Livros, revistas cient\u00edficas, web sites, documentos digitais s\u00e3o exemplos de fontes que podemos utilizar. Todos estes recursos precisam ser citados no texto e jamais podemos utilizar uma afirma\u00e7\u00e3o alheia como se fosse nossa. Tal pr\u00e1tica constitui crime de pl\u00e1gio e \u00e9 repudiada por qualquer acad\u00eamico s\u00e9rio. Manter controle das cita\u00e7\u00f5es n\u00e3o \u00e9 tarefa simples, especialmente quando o documento faz uso de dezenas ou at\u00e9 centenas delas. Al\u00e9m disso, a norma ABNT especifica detalhadamente como devemos citar e apresentar a bibliografia que utilizamos. Para nos auxiliar neste tarefa, o LibreOffice Writer oferece ferramentas espec\u00edficas, voltadas ao gerenciamento de bibliografia de documentos. Trabalhar com refer\u00eancias bibliogr\u00e1ficas requer a compreens\u00e3o dos conceitos de banco de dados bibliogr\u00e1fico , entrada bibliogr\u00e1fica e bibliografia . O banco de dados bibliogr\u00e1fico constitui o reposit\u00f3rio de todas as refer\u00eancias j\u00e1 cadastradas no LibreOffice Writer. Cada registro cont\u00e9m os detalhes da obra, como autores, t\u00edtulo, ano de publica\u00e7\u00e3o, entre outros campos. Logo, o primeiro do processo do processo ser\u00e1 cadastrar a obra neste banco de dados. Para isso, devemos acessar o menu Ferramentas -> Banco de Dados Bibliogr\u00e1fico . Na tela apresentada, iremos cadastrar os detalhes de todas as obras que precisamos citar no documento. O campo Nome abreviado merece especial aten\u00e7\u00e3o, pois ele ser\u00e1 inserido nas cita\u00e7\u00f5es. Ent\u00e3o, \u00e9 conveniente informar de acordo com a norma, a qual define como sendo o SOBRENOME, ano de publica\u00e7\u00e3o . Ap\u00f3s inclu\u00edda a bibliografia, podemos cit\u00e1-la no texto a partir do menu Inserir -> Sum\u00e1rios e \u00cdndices -> Entrada Bibliogr\u00e1fica . O pr\u00f3ximo passo ser\u00e1 escolher qual das refer\u00eancias j\u00e1 cadastradas no banco de dados bibliogr\u00e1ficos ser\u00e1 utilizada na cita\u00e7\u00e3o. Faremos isso para toda e qualquer cita\u00e7\u00e3o existente. Por fim, iremos adicionar a bibliografia ao documento. Faremos tal processo por meio do menu Inserir -> Sum\u00e1rios e \u00cdndices -> Sum\u00e1rio, \u00edndice ou bibliografia . Lembre-se de deixar o cursor do mouse na posi\u00e7\u00e3o correta do documento antes de inserir o \u00edndice. A tela de configura\u00e7\u00e3o \u00e9 a mesma que utilizamos para inserir os demais \u00edndices, com exce\u00e7\u00e3o dos campos de configura\u00e7\u00e3o espec\u00edfica para bibliografia. Entrada num\u00e9rica , por exemplo, \u00e9 o local onde alteramos a forma das cita\u00e7\u00f5es (n\u00fameros ou nome abreviado). Em Colchetes , especificamos o tipo de caractere que ir\u00e1 envolver a cita\u00e7\u00e3o no texto. Outra importante configura\u00e7\u00e3o refere-se a definir como cada entrada de bibliografia ser\u00e1 apresentada no texto. Perceba que, na coluna da esquerda, est\u00e3o todos os tipos de obras, sendo que para cada uma delas podemos especificar o formato de constru\u00e7\u00e3o da refer\u00eancia, modificando a composi\u00e7\u00e3o e ordem dos campos em Estrutura e Formata\u00e7\u00e3o . A ABNT especifica regras para referenciar cada tipo de obra. Logo, voc\u00ea dever\u00e1 compor a entrada com base na norma.","title":"Entradas bibliogr\u00e1ficas e bibliografia"},{"location":"informatica/editores-texto/abnt/#elementos-pos-textuais","text":"Os elementos p\u00f3s-textuais compreendem as refer\u00eancias bibliogr\u00e1fias , ap\u00eandices e anexos . Quanto \u00e0s refer\u00eancias, j\u00e1 comentamos sobre como inser\u00ed-las de forma autom\u00e1tica no documento. J\u00e1 ap\u00eandices e anexos seguem o padr\u00e3o de t\u00edtulos dos elementos textuais de primeiro n\u00edvel.","title":"Elementos p\u00f3s-textuais"},{"location":"informatica/editores-texto/abnt/#referencias","text":"BRITO, G. F.; CHOI, V. P.; ALMEIDA, A. Manual ABNT: Regras Gerais de Estilo e Formata\u00e7\u00e3o de Trabalhos Acad\u00eamicos (4\u00aa edi\u00e7\u00e3o revisada e ampliada). 2014. Dispon\u00edvel em: < http://biblioteca.fecap.br/wp-content/uploads/2016/03/Manual-ABNT_-regras-gerais-de-estilo-e-formata\u00e7\u00e3o-de-trabalhos-acad\u00eamicos.pdf >. Acesso em: 5 jun. 2021.","title":"Refer\u00eancias"},{"location":"informatica/editores-texto/estilos/","text":"Certamente um dos recursos mais \u00fateis e importantes do Writer assim como de outros editores de texto s\u00e3o os estilos. Os estilos s\u00e3o recursos b\u00e1sicos, que permitem a formata\u00e7\u00e3o do texto de forma simples e consistente. Uma vez aplicado o estilo, tudo grupo de formata\u00e7\u00f5es associado \u00e9 aplicado de uma \u00fanica vez. Da mesma forma, altera\u00e7\u00f5es no estilo t\u00eam impacto direto em todos os locais em que o estilo foi aplicado no documento, tornando o processo de modifica\u00e7\u00f5es de formato muito mais simples. Al\u00e9m disso, os estilos s\u00e3o utilizados para automatizar a gera\u00e7\u00e3o de tabelas de conte\u00fado, como sum\u00e1rios, lista de figuras, lista de tabelas. Trabalhando com estilos \u00b6 Os estilos s\u00e3o particularmente \u00fateis na escrita de documentos com muitas p\u00e1ginas e/ou baseados em algum modelo. Alguns usu\u00e1rios aplicam formata\u00e7\u00e3o de par\u00e1grafo para cada trecho do documento que precisa respeitar a mesma est\u00e9tica. Embora produza o resultado esperado, \u00e9 mais demorado e propenso a erros. Imagine que voc\u00ea tenha formatado um documento de 200 p\u00e1ginas e na \u00faltima percebeu que o tamanho do corpo do texto deveria ser 11 e n\u00e3o 12, como est\u00e1. O que fazer? Sem utilizar estilos, a \u00fanica op\u00e7\u00e3o \u00e9 aplicar a formata\u00e7\u00e3o novamente em todos os trechos necess\u00e1rios. J\u00e1 se utilizarmos estilos, basta editar a configura\u00e7\u00e3o do estilo e aplicar a altera\u00e7\u00e3o. Automaticamente todos os trechos associado \u00e0quele estilo ser\u00e1 atualizados. Da\u00ed a import\u00e2ncia de sabermos como utilizar este importante recurso. O Writer oferece estilos para caracteres , par\u00e1grafos , p\u00e1ginas , quadros , tabelas e listas . Para cada um deles pode-se configurar uma ampla quantidade de par\u00e2metros de formata\u00e7\u00e3o associados. Na sequ\u00eancia, as principais destas categorias de estilo ser\u00e3o descritas de forma detalhada. Estilos de Par\u00e1grafo \u00b6 Estilos de par\u00e1grafo controlam todos os aspectos de apar\u00eancia de um par\u00e1grafo de texto, como alinhamento, paradas de tabula\u00e7\u00e3o, espa\u00e7amento entrelinhas, bordas, espa\u00e7amento antes e ap\u00f3s o par\u00e1grafo, recuo de primeira linha, entre outros. Para adicionar um novo estilo de par\u00e1grafo ao documento, o usu\u00e1rio deve acessar o Gerenciador de Estilos , o qual encontra-se no menu Estilos . Ao ativar o gerenciador, uma janela \u00e9 apresentada encaixada \u00e0 direita da tela de trabalho. Nela apresentam-se todas as categorias de estilo, bem como os estilos existentes para elas. Para criar um estilo de par\u00e1grafo, devemos clicar com o bot\u00e3o direito no Gerenciador de Estilos , estando selecionado a op\u00e7\u00e3o Estilos de Par\u00e1grafo , op\u00e7\u00e3o Novo . Ao concluir o procedimento, a janela de configura\u00e7\u00e3o do novo estilo ser\u00e1 exibida. Voc\u00ea ir\u00e1 perceber que o n\u00famero de configura\u00e7\u00f5es \u00e9 consider\u00e1vel. Iremos tentar explorar as principais na sequ\u00eancia. Aba Organizador \u00b6 Permite configurar o nome do novo estilo, que \u00e9 uma informa\u00e7\u00e3o obrigat\u00f3ria. Este nome deve ser suficientemente auto-descritivo, de modo que possa indicar claramente sua aplicabilidade no documento. A configura\u00e7\u00e3o Auto atualizar deve ser utilizada se h\u00e1 interesse de que, quando aplicada uma formata\u00e7\u00e3o direta ao par\u00e1grafo, todos os demais par\u00e1grafos associados ao estilo recebam tal formata\u00e7\u00e3o de forma autom\u00e1tica. Pr\u00f3ximo estilo refere-se ao pr\u00f3ximo estilo de par\u00e1grafo aplicado assim que o usu\u00e1rio pressionar a tecla Enter estando em um par\u00e1grafo do estilo atual. \u00c9 uma configura\u00e7\u00e3o muito \u00fatil para automatizar o fluxo de estilos de um documento. H\u00e1 tamb\u00e9m a possibilidade de herdar propriedades de outros estilos preexistentes e de se associar o novo estilo a uma das categorias dispon\u00edveis. Aba Recuos e Espa\u00e7amento \u00b6 Aqui configuramos o distanciamento (recuo) do par\u00e1grafo em rela\u00e7\u00e3o \u00e0s margens esquerda e direita, bem como o recuo de primeira linha que deve ser aplicado. \u00c9 poss\u00edvel aplicar medidas utilizando unidades como pontos (pt), cent\u00edmetros (cm), mil\u00edmetros (mm), metros (m), entre outras. Assim que o campo perde o foco, a ferramenta automaticamente converte a medida informada para cent\u00edmetros. Outro recurso \u00e9 o espa\u00e7amentos antes e ap\u00f3s o par\u00e1grafo. Caso este distanciamento deva ocorrer apenas quando o pr\u00f3ximo par\u00e1grafo for de um estilo diferente, ent\u00e3o deve-se marcar a op\u00e7\u00e3o N\u00e3o adicionar espa\u00e7os entre os par\u00e1grafos do mesmo estilo . O espa\u00e7o entre as linhas do par\u00e1grafo \u00e9 outra configura\u00e7\u00e3o dispon\u00edvel, que pode ser um dos valores predefinidos, como simples, 1.5 linhas, duplo, proporcional (100% equivale ao espa\u00e7amento simples), entre outros. Aba Alinhamento \u00b6 Especifica o alinhamento do par\u00e1grafo quando aplicado o estilo. Os alinhamentos dispon\u00edveis s\u00e3o esquerda , direita , centralizado e justificar . \u00c9 poss\u00edvel definir tamb\u00e9m um alinhamento espec\u00edfico para a \u00faltima linha do par\u00e1grafo, que pode diferir das anteriores. Pode-se tamb\u00e9m adicionar outras configura\u00e7\u00f5es de alinhamento relacionadas a idiomas asi\u00e1ticos, caracteres subdimensionados e superdimensionados e de dire\u00e7\u00e3o de entrada. Aba Fonte \u00b6 As op\u00e7\u00f5es de formata\u00e7\u00e3o de fonte compreendem a fam\u00edlia, estilo, tamanho (em pontos) e idioma. Aba Efeitos da Fonte \u00b6 Efeitos da fonte, por sua vez, apresenta configura\u00e7\u00f5es relacionadas a efeitos, como cor, relevo, tachado, sublinhado, sobre linhas, sombra e contorno. \u00c9 poss\u00edvel, por exemplo, definir que todas as letras ser\u00e3o convertidas para mai\u00fasculo, min\u00fasculo ou mesmo para t\u00edtulo, onde a inicial de cada palavra \u00e9 posta em mai\u00fasculo e as demais letras em min\u00fasculo. Aba Posi\u00e7\u00e3o \u00b6 Configurar a posi\u00e7\u00e3o dos caracteres do par\u00e1grafo refere-se \u00e0 mudan\u00e7a para sobrescrita, subscrita ou posi\u00e7\u00e3o normal de escrita. Quando informado sobrescrito ou subscrito, pode-se informar o percentual de deslocamento para cima ou para baixo em rela\u00e7\u00e3o a linha base. Outra configura\u00e7\u00e3o interessante \u00e9 a possibilidade de rotacionar e/ou dimensionar caracteres de diversas formas. Aba Estruturas de T\u00f3picos \u00b6 A configura\u00e7\u00e3o de estrutura de t\u00f3picos \u00e9 um recurso de grande valia para gera\u00e7\u00e3o de sum\u00e1rio autom\u00e1tico, por exemplo. Isso porque todo estilo de par\u00e1grafo est\u00e1 vinculado a um n\u00edvel de estrutura espec\u00edfico do texto, que ao todo s\u00e3o 11. Dentre estes 11 n\u00edveis consta o Corpo do Texto , que refere-se ao conte\u00fado escrito e que n\u00e3o tem rela\u00e7\u00e3o com a hierarquia de t\u00edtulos do documento. Os demais 10 n\u00edveis, nomeados de N\u00edvel 1 a N\u00edvel 10 , compreendem toda hierarquia de estrutura de t\u00edtulos. Deste modo, se um determinado estilo for vinculado ao N\u00edvel 2 , ele automaticamente indicar\u00e1 que o conte\u00fado do par\u00e1grafo corresponde a um t\u00edtulo de n\u00edvel 2 no documento. Na configura\u00e7\u00e3o de Numera\u00e7\u00e3o especificamos qual \u00e9 o estilo de lista utilizado para numerar o par\u00e1grafo. Tamb\u00e9m \u00e9 poss\u00edvel habilitar e configurar a numera\u00e7\u00e3o das linhas do par\u00e1grafo, recurso muito interessante para reda\u00e7\u00e3o de atas, por exemplo. No caso da gera\u00e7\u00e3o de sum\u00e1rio autom\u00e1tico, cria-se um estilo para cada um dos 10 n\u00edveis da estrutura de t\u00f3picos, associando-os com um estilo de lista espec\u00edfico. Feito isso, basta configurar o documento para fazer uso dos estilos criados para numerar os diferentes cap\u00edtulos. Tal configura\u00e7\u00e3o \u00e9 feita por meio do menu Ferramentas-> Numera\u00e7\u00e3o de Cap\u00edtulos , o qual d\u00e1 acesso \u00e0 janela de configura\u00e7\u00f5es. Estilos de Caracteres \u00b6 Estilos de caractere permitem definir formata\u00e7\u00e3o espec\u00edfica para um \u00fanico caractere ou palavra em meio a um par\u00e1grafo. Tal qual ocorre com os estilos de par\u00e1grafo, a cria\u00e7\u00e3o de um estilo de caractere \u00e9 feito clicando-se com o bot\u00e3o direito sobre a \u00e1rea branco do Gerenciador de Estilos , naturalmente estando agora na categoria Estilos de Caractere , selecionando a op\u00e7\u00e3o Novo . As principais op\u00e7\u00f5es de configura\u00e7\u00e3o de estilos de caractere s\u00e3o oferecidas pelas abas Organizador , Fonte , Efeito de Fonte e Posi\u00e7\u00e3o , todas elas j\u00e1 abordadas em detalhes. Estilos de P\u00e1gina \u00b6 Assim como par\u00e1grafos e caracteres, as p\u00e1ginas de um documento tamb\u00e9m podem receber estilos de formata\u00e7\u00e3o. Normalmente os estilos de p\u00e1gina s\u00e3o \u00fateis para configurar margens, orienta\u00e7\u00e3o, bordas e a apar\u00eancia do cabe\u00e7alho, rodap\u00e9 e notas de rodap\u00e9. O procedimento utilizado para criar um novo estilo de p\u00e1gina segue o mesmo procedimento dos estilos de caractere e par\u00e1grafo. H\u00e1, contudo, altera\u00e7\u00f5es substanciais nas op\u00e7\u00f5es de formata\u00e7\u00e3o que podem ser configuradas, conforme podemos ver na tela a seguir. Aba P\u00e1gina \u00b6 As configura\u00e7\u00f5es de p\u00e1gina v\u00e3o desde aspectos b\u00e1sicos, como formato do papel, margens e orienta\u00e7\u00e3o a configura\u00e7\u00f5es mais avan\u00e7adas de leiaute, como estilos vinculados somente \u00e0s p\u00e1ginas da direita ou da esquerda e o tipo de numera\u00e7\u00e3o a ser utilizado. Um mesmo documento pode apresentar diversos estilos de p\u00e1gina vinculados, em primeiro momento, pela possibilidade de um estilo de p\u00e1gina vincular-se a um pr\u00f3ximo estilo ( Aba Organizador ) e, em segundo momento, pela possibilidade de sec\u00e7\u00e3o do documento em diferentes partes l\u00f3gicas. Este processo de seccionamento \u00e9 feito pelo menu Inserir -> Quebra Manual . Dentre as op\u00e7\u00f5es oferecidas (quebra de linha, coluna e p\u00e1gina), a quebra de p\u00e1gina permite, a partir da posi\u00e7\u00e3o do cursor, modificar o fluxo de estilos de p\u00e1gina aplicados. As quebras de p\u00e1gina s\u00e3o necess\u00e1rias pois representam o \u00fanico meio de alterar os fluxos de estilo sem modificar o documento integralmente, afinal inicialmente o documento encontra-se integralmente dentro de uma \u00fanica se\u00e7\u00e3o de conte\u00fado. Aba \u00c1rea \u00b6 Permite configurar o preenchimento de fundo da p\u00e1gina. Comumente nenhum preenchimento \u00e9 utilizado, mas a ferramenta Writer permite utilizar preenchimentos de diferentes categorias, como Cor , Gradiente , Bitmap , Padronagem e Hachurado . Para ilustrar, imagem a seguir apresenta a op\u00e7\u00e3o preenchimento de \u00e1rea por hachuras. Aba Transpar\u00eancia \u00b6 Sendo poss\u00edvel aplicar diferentes tipos de preenchimento \u00e0 \u00e1rea da p\u00e1gina, podemos tamb\u00e9m aplicar diferentes estrat\u00e9gias de transpar\u00eancia, como gradiente, padr\u00e3o ou simplesmente nenhuma. Importante considerar que a transpar\u00eancia tem por efeito tornar gradualmente vis\u00edvel aquilo que encontra-se atr\u00e1s do preenchimento e que a escala de valores inicia em 0%, indicando total opacidade at\u00e9 100%, conferindo total transpar\u00eancia \u00e0 \u00e1rea. Aba Cabe\u00e7alho e Aba Rodap\u00e9 \u00b6 Cabe\u00e7alhos e rodap\u00e9s s\u00e3o \u00e1reas nas margens superior e inferior das p\u00e1ginas para adicionar textos ou figuras. Os cabe\u00e7alhos e rodap\u00e9s s\u00e3o adicionados ao estilo de p\u00e1gina atual. Todas as p\u00e1ginas que usarem o mesmo estilo receber\u00e3o automaticamente o cabe\u00e7alho ou rodap\u00e9 adicionado. \u00c9 poss\u00edvel inserir campos, tais como n\u00fameros de p\u00e1ginas e t\u00edtulos de cap\u00edtulos, nos cabe\u00e7alhos e rodap\u00e9s de um documento de texto. Quando configuramos cabe\u00e7alho e rodap\u00e9 no estilo de p\u00e1gina, estamos informando a apar\u00eancia e formato que tais estruturas ter\u00e3o nas p\u00e1ginas onde o estilo em quest\u00e3o for aplicado. Cabe\u00e7alho e rodap\u00e9 s\u00e3o estruturas opcionais, podendo ser exibidas ou n\u00e3o no documento. Os principais atributos de formata\u00e7\u00e3o relacionados aos cabe\u00e7alhos s\u00e3o a repeti\u00e7\u00e3o do conte\u00fado, tanto em p\u00e1ginas da esquerda quanto da direita e se a primeira p\u00e1gina ter\u00e1 o mesmo conte\u00fado que as demais. Adicionalmente tamb\u00e9m \u00e9 poss\u00edvel especificar as margens do cabe\u00e7alho (esquerda e direita). Para rodap\u00e9, os mesmos atributos de formata\u00e7\u00e3o de cabe\u00e7alho s\u00e3o aplicados. Aba Bordas \u00b6 Bordas s\u00e3o contornos aplicados a diferentes objetos, dentre eles, \u00e0s p\u00e1ginas. Na configura\u00e7\u00e3o de bordas pode-se especificar quais dos lados a borda estar\u00e1 ativa. Quando ativa, \u00e9 poss\u00edvel tamb\u00e9m determinar o tipo de linha, espessura, cor, dist\u00e2ncia em rela\u00e7\u00e3o ao conte\u00fado e efeito de sombra. Todas as op\u00e7\u00f5es dispon\u00edveis s\u00e3o apresentadas na aba Bordas . Aba Colunas \u00b6 O espa\u00e7o contido entre as margens, que \u00e9 destinado ao conte\u00fado do documento, a depender do estilo da p\u00e1gina, pode ser subdividido em colunas, na quantidade que o usu\u00e1rio desejar. Quando a quantidade de colunas for superior a 1 (um), torna-se poss\u00edvel configurar a largura de cada uma das colunas, espa\u00e7amento entre as mesmas e eventualmente as caracter\u00edsticas da linha que as separa. Aba Notas de Rodap\u00e9 \u00b6 Por vezes, na constru\u00e7\u00e3o de um documento de texto, torna-se conveniente adicionar uma anota\u00e7\u00e3o explicativa ao p\u00e9 da p\u00e1gina. Comumente tal anota\u00e7\u00e3o est\u00e1 diretamente vinculada a uma palavra ou trecho de par\u00e1grafo da p\u00e1gina em que se encontra. A este recurso tipogr\u00e1fico chamamos de nota de rodap\u00e9 . No Writer, as configura\u00e7\u00f5es de formata\u00e7\u00e3o das notas de rodap\u00e9 s\u00e3o feitas por meio dos estilos de p\u00e1gina. As op\u00e7\u00f5es de formata\u00e7\u00e3o oferecidas permitem controlar a \u00e1rea reservada para as notas e a configura\u00e7\u00e3o da linha separadora, que estabelece a divisa entre o texto e as suas respectivas notas. Com rela\u00e7\u00e3o \u00e0 linha separadora, \u00e9 poss\u00edvel especificar a posi\u00e7\u00e3o horizontal da mesma, sua espessura, cor, comprimento e distanciamento em rela\u00e7\u00e3o a primeira nota. Refer\u00eancias \u00b6 The Document Foundation. Ajuda do LibreOffice 7.1 . Dispon\u00edvel em https://help.libreoffice.org/latest/pt-BR/text/shared/05/new_help.html?&DbPAR=WRITER . Acesso em 21 mai. 2021.","title":"Estilos"},{"location":"informatica/editores-texto/estilos/#trabalhando-com-estilos","text":"Os estilos s\u00e3o particularmente \u00fateis na escrita de documentos com muitas p\u00e1ginas e/ou baseados em algum modelo. Alguns usu\u00e1rios aplicam formata\u00e7\u00e3o de par\u00e1grafo para cada trecho do documento que precisa respeitar a mesma est\u00e9tica. Embora produza o resultado esperado, \u00e9 mais demorado e propenso a erros. Imagine que voc\u00ea tenha formatado um documento de 200 p\u00e1ginas e na \u00faltima percebeu que o tamanho do corpo do texto deveria ser 11 e n\u00e3o 12, como est\u00e1. O que fazer? Sem utilizar estilos, a \u00fanica op\u00e7\u00e3o \u00e9 aplicar a formata\u00e7\u00e3o novamente em todos os trechos necess\u00e1rios. J\u00e1 se utilizarmos estilos, basta editar a configura\u00e7\u00e3o do estilo e aplicar a altera\u00e7\u00e3o. Automaticamente todos os trechos associado \u00e0quele estilo ser\u00e1 atualizados. Da\u00ed a import\u00e2ncia de sabermos como utilizar este importante recurso. O Writer oferece estilos para caracteres , par\u00e1grafos , p\u00e1ginas , quadros , tabelas e listas . Para cada um deles pode-se configurar uma ampla quantidade de par\u00e2metros de formata\u00e7\u00e3o associados. Na sequ\u00eancia, as principais destas categorias de estilo ser\u00e3o descritas de forma detalhada.","title":"Trabalhando com estilos"},{"location":"informatica/editores-texto/estilos/#estilos-de-paragrafo","text":"Estilos de par\u00e1grafo controlam todos os aspectos de apar\u00eancia de um par\u00e1grafo de texto, como alinhamento, paradas de tabula\u00e7\u00e3o, espa\u00e7amento entrelinhas, bordas, espa\u00e7amento antes e ap\u00f3s o par\u00e1grafo, recuo de primeira linha, entre outros. Para adicionar um novo estilo de par\u00e1grafo ao documento, o usu\u00e1rio deve acessar o Gerenciador de Estilos , o qual encontra-se no menu Estilos . Ao ativar o gerenciador, uma janela \u00e9 apresentada encaixada \u00e0 direita da tela de trabalho. Nela apresentam-se todas as categorias de estilo, bem como os estilos existentes para elas. Para criar um estilo de par\u00e1grafo, devemos clicar com o bot\u00e3o direito no Gerenciador de Estilos , estando selecionado a op\u00e7\u00e3o Estilos de Par\u00e1grafo , op\u00e7\u00e3o Novo . Ao concluir o procedimento, a janela de configura\u00e7\u00e3o do novo estilo ser\u00e1 exibida. Voc\u00ea ir\u00e1 perceber que o n\u00famero de configura\u00e7\u00f5es \u00e9 consider\u00e1vel. Iremos tentar explorar as principais na sequ\u00eancia.","title":"Estilos de Par\u00e1grafo"},{"location":"informatica/editores-texto/estilos/#aba-organizador","text":"Permite configurar o nome do novo estilo, que \u00e9 uma informa\u00e7\u00e3o obrigat\u00f3ria. Este nome deve ser suficientemente auto-descritivo, de modo que possa indicar claramente sua aplicabilidade no documento. A configura\u00e7\u00e3o Auto atualizar deve ser utilizada se h\u00e1 interesse de que, quando aplicada uma formata\u00e7\u00e3o direta ao par\u00e1grafo, todos os demais par\u00e1grafos associados ao estilo recebam tal formata\u00e7\u00e3o de forma autom\u00e1tica. Pr\u00f3ximo estilo refere-se ao pr\u00f3ximo estilo de par\u00e1grafo aplicado assim que o usu\u00e1rio pressionar a tecla Enter estando em um par\u00e1grafo do estilo atual. \u00c9 uma configura\u00e7\u00e3o muito \u00fatil para automatizar o fluxo de estilos de um documento. H\u00e1 tamb\u00e9m a possibilidade de herdar propriedades de outros estilos preexistentes e de se associar o novo estilo a uma das categorias dispon\u00edveis.","title":"Aba Organizador"},{"location":"informatica/editores-texto/estilos/#aba-recuos-e-espacamento","text":"Aqui configuramos o distanciamento (recuo) do par\u00e1grafo em rela\u00e7\u00e3o \u00e0s margens esquerda e direita, bem como o recuo de primeira linha que deve ser aplicado. \u00c9 poss\u00edvel aplicar medidas utilizando unidades como pontos (pt), cent\u00edmetros (cm), mil\u00edmetros (mm), metros (m), entre outras. Assim que o campo perde o foco, a ferramenta automaticamente converte a medida informada para cent\u00edmetros. Outro recurso \u00e9 o espa\u00e7amentos antes e ap\u00f3s o par\u00e1grafo. Caso este distanciamento deva ocorrer apenas quando o pr\u00f3ximo par\u00e1grafo for de um estilo diferente, ent\u00e3o deve-se marcar a op\u00e7\u00e3o N\u00e3o adicionar espa\u00e7os entre os par\u00e1grafos do mesmo estilo . O espa\u00e7o entre as linhas do par\u00e1grafo \u00e9 outra configura\u00e7\u00e3o dispon\u00edvel, que pode ser um dos valores predefinidos, como simples, 1.5 linhas, duplo, proporcional (100% equivale ao espa\u00e7amento simples), entre outros.","title":"Aba Recuos e Espa\u00e7amento"},{"location":"informatica/editores-texto/estilos/#aba-alinhamento","text":"Especifica o alinhamento do par\u00e1grafo quando aplicado o estilo. Os alinhamentos dispon\u00edveis s\u00e3o esquerda , direita , centralizado e justificar . \u00c9 poss\u00edvel definir tamb\u00e9m um alinhamento espec\u00edfico para a \u00faltima linha do par\u00e1grafo, que pode diferir das anteriores. Pode-se tamb\u00e9m adicionar outras configura\u00e7\u00f5es de alinhamento relacionadas a idiomas asi\u00e1ticos, caracteres subdimensionados e superdimensionados e de dire\u00e7\u00e3o de entrada.","title":"Aba Alinhamento"},{"location":"informatica/editores-texto/estilos/#aba-fonte","text":"As op\u00e7\u00f5es de formata\u00e7\u00e3o de fonte compreendem a fam\u00edlia, estilo, tamanho (em pontos) e idioma.","title":"Aba Fonte"},{"location":"informatica/editores-texto/estilos/#aba-efeitos-da-fonte","text":"Efeitos da fonte, por sua vez, apresenta configura\u00e7\u00f5es relacionadas a efeitos, como cor, relevo, tachado, sublinhado, sobre linhas, sombra e contorno. \u00c9 poss\u00edvel, por exemplo, definir que todas as letras ser\u00e3o convertidas para mai\u00fasculo, min\u00fasculo ou mesmo para t\u00edtulo, onde a inicial de cada palavra \u00e9 posta em mai\u00fasculo e as demais letras em min\u00fasculo.","title":"Aba Efeitos da Fonte"},{"location":"informatica/editores-texto/estilos/#aba-posicao","text":"Configurar a posi\u00e7\u00e3o dos caracteres do par\u00e1grafo refere-se \u00e0 mudan\u00e7a para sobrescrita, subscrita ou posi\u00e7\u00e3o normal de escrita. Quando informado sobrescrito ou subscrito, pode-se informar o percentual de deslocamento para cima ou para baixo em rela\u00e7\u00e3o a linha base. Outra configura\u00e7\u00e3o interessante \u00e9 a possibilidade de rotacionar e/ou dimensionar caracteres de diversas formas.","title":"Aba Posi\u00e7\u00e3o"},{"location":"informatica/editores-texto/estilos/#aba-estruturas-de-topicos","text":"A configura\u00e7\u00e3o de estrutura de t\u00f3picos \u00e9 um recurso de grande valia para gera\u00e7\u00e3o de sum\u00e1rio autom\u00e1tico, por exemplo. Isso porque todo estilo de par\u00e1grafo est\u00e1 vinculado a um n\u00edvel de estrutura espec\u00edfico do texto, que ao todo s\u00e3o 11. Dentre estes 11 n\u00edveis consta o Corpo do Texto , que refere-se ao conte\u00fado escrito e que n\u00e3o tem rela\u00e7\u00e3o com a hierarquia de t\u00edtulos do documento. Os demais 10 n\u00edveis, nomeados de N\u00edvel 1 a N\u00edvel 10 , compreendem toda hierarquia de estrutura de t\u00edtulos. Deste modo, se um determinado estilo for vinculado ao N\u00edvel 2 , ele automaticamente indicar\u00e1 que o conte\u00fado do par\u00e1grafo corresponde a um t\u00edtulo de n\u00edvel 2 no documento. Na configura\u00e7\u00e3o de Numera\u00e7\u00e3o especificamos qual \u00e9 o estilo de lista utilizado para numerar o par\u00e1grafo. Tamb\u00e9m \u00e9 poss\u00edvel habilitar e configurar a numera\u00e7\u00e3o das linhas do par\u00e1grafo, recurso muito interessante para reda\u00e7\u00e3o de atas, por exemplo. No caso da gera\u00e7\u00e3o de sum\u00e1rio autom\u00e1tico, cria-se um estilo para cada um dos 10 n\u00edveis da estrutura de t\u00f3picos, associando-os com um estilo de lista espec\u00edfico. Feito isso, basta configurar o documento para fazer uso dos estilos criados para numerar os diferentes cap\u00edtulos. Tal configura\u00e7\u00e3o \u00e9 feita por meio do menu Ferramentas-> Numera\u00e7\u00e3o de Cap\u00edtulos , o qual d\u00e1 acesso \u00e0 janela de configura\u00e7\u00f5es.","title":"Aba Estruturas de T\u00f3picos"},{"location":"informatica/editores-texto/estilos/#estilos-de-caracteres","text":"Estilos de caractere permitem definir formata\u00e7\u00e3o espec\u00edfica para um \u00fanico caractere ou palavra em meio a um par\u00e1grafo. Tal qual ocorre com os estilos de par\u00e1grafo, a cria\u00e7\u00e3o de um estilo de caractere \u00e9 feito clicando-se com o bot\u00e3o direito sobre a \u00e1rea branco do Gerenciador de Estilos , naturalmente estando agora na categoria Estilos de Caractere , selecionando a op\u00e7\u00e3o Novo . As principais op\u00e7\u00f5es de configura\u00e7\u00e3o de estilos de caractere s\u00e3o oferecidas pelas abas Organizador , Fonte , Efeito de Fonte e Posi\u00e7\u00e3o , todas elas j\u00e1 abordadas em detalhes.","title":"Estilos de Caracteres"},{"location":"informatica/editores-texto/estilos/#estilos-de-pagina","text":"Assim como par\u00e1grafos e caracteres, as p\u00e1ginas de um documento tamb\u00e9m podem receber estilos de formata\u00e7\u00e3o. Normalmente os estilos de p\u00e1gina s\u00e3o \u00fateis para configurar margens, orienta\u00e7\u00e3o, bordas e a apar\u00eancia do cabe\u00e7alho, rodap\u00e9 e notas de rodap\u00e9. O procedimento utilizado para criar um novo estilo de p\u00e1gina segue o mesmo procedimento dos estilos de caractere e par\u00e1grafo. H\u00e1, contudo, altera\u00e7\u00f5es substanciais nas op\u00e7\u00f5es de formata\u00e7\u00e3o que podem ser configuradas, conforme podemos ver na tela a seguir.","title":"Estilos de P\u00e1gina"},{"location":"informatica/editores-texto/estilos/#aba-pagina","text":"As configura\u00e7\u00f5es de p\u00e1gina v\u00e3o desde aspectos b\u00e1sicos, como formato do papel, margens e orienta\u00e7\u00e3o a configura\u00e7\u00f5es mais avan\u00e7adas de leiaute, como estilos vinculados somente \u00e0s p\u00e1ginas da direita ou da esquerda e o tipo de numera\u00e7\u00e3o a ser utilizado. Um mesmo documento pode apresentar diversos estilos de p\u00e1gina vinculados, em primeiro momento, pela possibilidade de um estilo de p\u00e1gina vincular-se a um pr\u00f3ximo estilo ( Aba Organizador ) e, em segundo momento, pela possibilidade de sec\u00e7\u00e3o do documento em diferentes partes l\u00f3gicas. Este processo de seccionamento \u00e9 feito pelo menu Inserir -> Quebra Manual . Dentre as op\u00e7\u00f5es oferecidas (quebra de linha, coluna e p\u00e1gina), a quebra de p\u00e1gina permite, a partir da posi\u00e7\u00e3o do cursor, modificar o fluxo de estilos de p\u00e1gina aplicados. As quebras de p\u00e1gina s\u00e3o necess\u00e1rias pois representam o \u00fanico meio de alterar os fluxos de estilo sem modificar o documento integralmente, afinal inicialmente o documento encontra-se integralmente dentro de uma \u00fanica se\u00e7\u00e3o de conte\u00fado.","title":"Aba P\u00e1gina"},{"location":"informatica/editores-texto/estilos/#aba-area","text":"Permite configurar o preenchimento de fundo da p\u00e1gina. Comumente nenhum preenchimento \u00e9 utilizado, mas a ferramenta Writer permite utilizar preenchimentos de diferentes categorias, como Cor , Gradiente , Bitmap , Padronagem e Hachurado . Para ilustrar, imagem a seguir apresenta a op\u00e7\u00e3o preenchimento de \u00e1rea por hachuras.","title":"Aba \u00c1rea"},{"location":"informatica/editores-texto/estilos/#aba-transparencia","text":"Sendo poss\u00edvel aplicar diferentes tipos de preenchimento \u00e0 \u00e1rea da p\u00e1gina, podemos tamb\u00e9m aplicar diferentes estrat\u00e9gias de transpar\u00eancia, como gradiente, padr\u00e3o ou simplesmente nenhuma. Importante considerar que a transpar\u00eancia tem por efeito tornar gradualmente vis\u00edvel aquilo que encontra-se atr\u00e1s do preenchimento e que a escala de valores inicia em 0%, indicando total opacidade at\u00e9 100%, conferindo total transpar\u00eancia \u00e0 \u00e1rea.","title":"Aba Transpar\u00eancia"},{"location":"informatica/editores-texto/estilos/#aba-cabecalho-e-aba-rodape","text":"Cabe\u00e7alhos e rodap\u00e9s s\u00e3o \u00e1reas nas margens superior e inferior das p\u00e1ginas para adicionar textos ou figuras. Os cabe\u00e7alhos e rodap\u00e9s s\u00e3o adicionados ao estilo de p\u00e1gina atual. Todas as p\u00e1ginas que usarem o mesmo estilo receber\u00e3o automaticamente o cabe\u00e7alho ou rodap\u00e9 adicionado. \u00c9 poss\u00edvel inserir campos, tais como n\u00fameros de p\u00e1ginas e t\u00edtulos de cap\u00edtulos, nos cabe\u00e7alhos e rodap\u00e9s de um documento de texto. Quando configuramos cabe\u00e7alho e rodap\u00e9 no estilo de p\u00e1gina, estamos informando a apar\u00eancia e formato que tais estruturas ter\u00e3o nas p\u00e1ginas onde o estilo em quest\u00e3o for aplicado. Cabe\u00e7alho e rodap\u00e9 s\u00e3o estruturas opcionais, podendo ser exibidas ou n\u00e3o no documento. Os principais atributos de formata\u00e7\u00e3o relacionados aos cabe\u00e7alhos s\u00e3o a repeti\u00e7\u00e3o do conte\u00fado, tanto em p\u00e1ginas da esquerda quanto da direita e se a primeira p\u00e1gina ter\u00e1 o mesmo conte\u00fado que as demais. Adicionalmente tamb\u00e9m \u00e9 poss\u00edvel especificar as margens do cabe\u00e7alho (esquerda e direita). Para rodap\u00e9, os mesmos atributos de formata\u00e7\u00e3o de cabe\u00e7alho s\u00e3o aplicados.","title":"Aba Cabe\u00e7alho e Aba Rodap\u00e9"},{"location":"informatica/editores-texto/estilos/#aba-bordas","text":"Bordas s\u00e3o contornos aplicados a diferentes objetos, dentre eles, \u00e0s p\u00e1ginas. Na configura\u00e7\u00e3o de bordas pode-se especificar quais dos lados a borda estar\u00e1 ativa. Quando ativa, \u00e9 poss\u00edvel tamb\u00e9m determinar o tipo de linha, espessura, cor, dist\u00e2ncia em rela\u00e7\u00e3o ao conte\u00fado e efeito de sombra. Todas as op\u00e7\u00f5es dispon\u00edveis s\u00e3o apresentadas na aba Bordas .","title":"Aba Bordas"},{"location":"informatica/editores-texto/estilos/#aba-colunas","text":"O espa\u00e7o contido entre as margens, que \u00e9 destinado ao conte\u00fado do documento, a depender do estilo da p\u00e1gina, pode ser subdividido em colunas, na quantidade que o usu\u00e1rio desejar. Quando a quantidade de colunas for superior a 1 (um), torna-se poss\u00edvel configurar a largura de cada uma das colunas, espa\u00e7amento entre as mesmas e eventualmente as caracter\u00edsticas da linha que as separa.","title":"Aba Colunas"},{"location":"informatica/editores-texto/estilos/#aba-notas-de-rodape","text":"Por vezes, na constru\u00e7\u00e3o de um documento de texto, torna-se conveniente adicionar uma anota\u00e7\u00e3o explicativa ao p\u00e9 da p\u00e1gina. Comumente tal anota\u00e7\u00e3o est\u00e1 diretamente vinculada a uma palavra ou trecho de par\u00e1grafo da p\u00e1gina em que se encontra. A este recurso tipogr\u00e1fico chamamos de nota de rodap\u00e9 . No Writer, as configura\u00e7\u00f5es de formata\u00e7\u00e3o das notas de rodap\u00e9 s\u00e3o feitas por meio dos estilos de p\u00e1gina. As op\u00e7\u00f5es de formata\u00e7\u00e3o oferecidas permitem controlar a \u00e1rea reservada para as notas e a configura\u00e7\u00e3o da linha separadora, que estabelece a divisa entre o texto e as suas respectivas notas. Com rela\u00e7\u00e3o \u00e0 linha separadora, \u00e9 poss\u00edvel especificar a posi\u00e7\u00e3o horizontal da mesma, sua espessura, cor, comprimento e distanciamento em rela\u00e7\u00e3o a primeira nota.","title":"Aba Notas de Rodap\u00e9"},{"location":"informatica/editores-texto/estilos/#referencias","text":"The Document Foundation. Ajuda do LibreOffice 7.1 . Dispon\u00edvel em https://help.libreoffice.org/latest/pt-BR/text/shared/05/new_help.html?&DbPAR=WRITER . Acesso em 21 mai. 2021.","title":"Refer\u00eancias"},{"location":"informatica/editores-texto/introducao/","text":"Afirmar que a tecnologia transformou drasticamente o mundo nas \u00faltimas d\u00e9cadas certamente n\u00e3o tr\u00e1s espanto a ningu\u00e9m, afinal todos s\u00e3o testemunhas oculares das transforma\u00e7\u00f5es que dia ap\u00f3s dia ocorrem na sociedade em fun\u00e7\u00e3o dela. Dentre as diversas \u00e1reas que popularmente chama-se \u201ctecnologia\u201d, a Inform\u00e1tica certamente ocupa lugar de destaque, haja vista que solu\u00e7\u00f5es de hardware e software t\u00eam contribu\u00eddo significativamente para revolu\u00e7\u00f5es em diversas \u00e1reas, como comunica\u00e7\u00e3o, rela\u00e7\u00f5es de consumo, educa\u00e7\u00e3o, medicina, entre outros. Um dos usos mais t\u00edpicos do computador compreende a edi\u00e7\u00e3o e produ\u00e7\u00e3o de documentos escritos e planilhas eletr\u00f4nicas. Estes recursos, hoje t\u00e3o comuns, foram importantes alicerces na populariza\u00e7\u00e3o do uso da arquitetura PC ( Personal Computer ) em empresas e, tempos ap\u00f3s, nos ambientes dom\u00e9sticos. Logo, ter dom\u00ednio na manipula\u00e7\u00e3o de tais softwares representa uma das muitas habilidades exigidas pelo mercado de trabalho atual. Vamos come\u00e7ar falando de editores de texto, softwares especializados na produ\u00e7\u00e3o de documentos textuais com amplos recursos para edi\u00e7\u00e3o e diagrama\u00e7\u00e3o. Est\u00e3o presentes no dia-a-dia de boa parte dos usu\u00e1rios de computador, seja para escrever aquele relat\u00f3rio da faculdade, fazer um curr\u00edculo caprichado ou mesmo um cart\u00e3o de Dia das M\u00e3es. No mundo do trabalho, \u00e9 ferramenta essencial para produ\u00e7\u00e3o dos mais variados tipos de documentos que transmitem informa\u00e7\u00f5es e formalizam etapas de processos. \u00c9 comum encontrar editores de texto como sendo parte de pacotes para escrit\u00f3rio. Um dos mais populares \u00e9 o Microsoft Office , software propriet\u00e1rio da Microsoft, cujo editor de texto chama-se Microsoft Word . Para fazer uso deste pacote de softwares o usu\u00e1rio deve ter em m\u00e3os uma licen\u00e7a. Para aqueles que n\u00e3o disp\u00f5em de recursos ou mesmo preferem solu\u00e7\u00f5es livres, temos dispon\u00edvel a suite LibreOffice , mantida por uma comunidade de desenvolvedores e distribu\u00edda livremente, sem custos, a qualquer interessado. Outra alternativa interessante s\u00e3o as solu\u00e7\u00f5es em nuvem, como Google Docs. Para finalidades triviais de edi\u00e7\u00e3o, atendem perfeitamente as necessidades. E, quando associadas a recursos de colabora\u00e7\u00e3o e compartilhamento, tornam-se ferramentas extremamente poderosas. Para nossos estudos, utilizaremos o LibreOffice Writer, editor de texto dispon\u00edvel no pacote LibreOffice , vers\u00e3o 7.1, bem como o Google Docs, buscando realizar um contraponto dos recursos dispon\u00edveis. A Suite LibreOffice, da qual o software Writer faz parte, compreende um projeto iniciado em setembro de 2010, \u00e9poca em que um grupo de desenvolvedores volunt\u00e1rios da comunidade anunciou a cria\u00e7\u00e3o do The Document Foundation com vistas a dar continuidade ao desenvolvimento da suite de escrit\u00f3rio OpenOffice. Com o evento da aquisi\u00e7\u00e3o da Sun Microsystems pela empresa Oracle, o projeto OpenOffice foi entregue \u00e0 Funda\u00e7\u00e3o Apache , visto que at\u00e9 ent\u00e3o a Sun era respons\u00e1vel por manter o desenvolvimento ativo. O Writer apresenta uma grande quantidade de recursos para manipula\u00e7\u00e3o de texto e de objetos em documentos por meio da tecnologia WYSIWYG. A tecnologia WYSIWYG \u00e9 acr\u00f4nimo de What You See Is What You Get , ou seja, tecnologias de software onde o usu\u00e1rio tem feedback imediado do resultado final da formata\u00e7\u00e3o do documento, de tal modo que o visto na tela ser\u00e1 o resultado final quando impresso. Apresentamos tela inicial de trabalho do Writer na sequ\u00eancia. Na parte superior consta a barra de menus, com as op\u00e7\u00f5es Arquivo , Editar , Exibir , Inserir , Formatar , Estilos , Tabela , Formul\u00e1rio , Ferramentas , Janela e Ajuda . Logo abaixo \u00e0 barra de menus, encontram-se as abas para acesso r\u00e1pido \u00e0s ferramentas de edi\u00e7\u00e3o. Na aba Arquivo s\u00e3o oferecidos recursos de abertura de documentos locais e remotos, op\u00e7\u00f5es de salvamento e de exporta\u00e7\u00e3o em PDF. Na aba In\u00edcio encontram-se ferramentas de formata\u00e7\u00e3o de fonte (cor, tipo, tamanho), tipos de listas, alinhamento de texto, entre outros. A aba Inserir , por sua vez, cont\u00e9m op\u00e7\u00f5es para adi\u00e7\u00e3o de objetos como figuras, tabelas, galeria, gr\u00e1ficos, s\u00edmbolos e refer\u00eancias cruzadas no documento. Na aba P\u00e1gina s\u00e3o oferecidas as op\u00e7\u00f5es que permitem configurar margens, tamanho do papel, divis\u00e3o em colunas e orienta\u00e7\u00e3o do documento. Na aba Refer\u00eancias encontram-se as op\u00e7\u00f5es para gest\u00e3o de bibliografia, notas de rodap\u00e9, notas de fim e gera\u00e7\u00e3o de sum\u00e1rio. A aba Revisar cont\u00e9m ferramentas de corre\u00e7\u00e3o ortogr\u00e1fica, dicion\u00e1rio de sin\u00f4nimos, contagem de palavras, anota\u00e7\u00f5es e gest\u00e3o de mudan\u00e7as. Por fim, na aba Exibir , est\u00e3o as op\u00e7\u00f5es relacionadas \u00e0 exibi\u00e7\u00e3o de r\u00e9guas, zoom e visualiza\u00e7\u00e3o de impress\u00e3o.","title":"Writer"},{"location":"programacao/linguagens/","text":"A comunica\u00e7\u00e3o humana \u00e9 poss\u00edvel por meio de diferentes linguagens. No caso do computador, o mesmo se aplica, pois fazemos uso de uma linguagem de programa\u00e7\u00e3o para elaborar rotinas de computa\u00e7\u00e3o, ensinando o passo-a-passo para o computador. Importante Programar \u00e9 a arte de escrever sequ\u00eancias de instru\u00e7\u00f5es (comandos) para, computacionalmente, resolver problemas do mundo real por meio de uma linguagem de programa\u00e7\u00e3o. O programador converte problemas do mundo real em algoritmos atrav\u00e9s do processo de abstra\u00e7\u00e3o. O algoritmo representa a solu\u00e7\u00e3o computacional do problema, que ir\u00e1 se tornar operacional a partir do momento em que for codificado por meio de uma linguagem de programa\u00e7\u00e3o. S\u00f3 ent\u00e3o o usu\u00e1rio final ter\u00e1 condi\u00e7\u00f5es de utilizar o programa (que \u00e9 resultado da compila\u00e7\u00e3o ou interpreta\u00e7\u00e3o da codifica\u00e7\u00e3o) para atender suas necessidades. Do problema ao programa Problema > Algoritmo > C\u00f3digo-Fonte > Programa As linguagens de programa\u00e7\u00e3o podem ser classificadas sob diferentes perspectivas. \u00c9 poss\u00edvel agrup\u00e1-las quanto \u00e0: Gera\u00e7\u00e3o Dom\u00ednio da Aplica\u00e7\u00e3o Implementa\u00e7\u00e3o Paradigma A classifica\u00e7\u00e3o acima, contudo, n\u00e3o \u00e9 consenso. De qualquer forma, vamos tentar explorar as linguagens de programa\u00e7\u00e3o a partir da \u00f3tica das gera\u00e7\u00f5es e paradigmas. Linguagens de M\u00e1quina \u00b6 Interpretada diretamente pelo hardware. \u00c9 a linguagem que o processador reconhece. Compiladores, interpretadores e montadores convertem linguagens de mais alto n\u00edvel para linguagem de m\u00e1quina. Representa a 1\u00ba gera\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o . C\u00f3digo em linguagem de m\u00e1quina \u00e9 normalmente representado em hexadecimal para tornar a leitura mais simples. Contudo, sua codifica\u00e7\u00e3o original \u00e9 bin\u00e1ria. Programar neste n\u00edvel \u00e9 complexo e exige do profissional profundo conhecimento da arquitetura do hardware em que o programa ir\u00e1 executar. Este tipo de c\u00f3digo s\u00f3 \u00e9 port\u00e1vel para arquiteturas id\u00eanticas, uma vez que \u00e9 altamente dependente do hardware que executa. 8B542408 83FA0077 06B80000 0000C383 FA027706 B8010000 00C353BB 01000000 B9010000 008D0419 83FA0376 078BD989 Linguagem Assembly \u00b6 A interpreta\u00e7\u00e3o de c\u00f3digo de m\u00e1quina por seres humanos \u00e9 extremamente dif\u00edcil. Reconhecer a funcionalidade do c\u00f3digo a partir de sequ\u00eancias de c\u00f3digos hexadecimais \u00e9 praticamente uma odiss\u00e9ia. Isso porque o c\u00f3digo de m\u00e1quina n\u00e3o se preocupa com quest\u00f5es de legibilidade, afinal o processador n\u00e3o precisa desta feature . A fim de tornar a programa\u00e7\u00e3o uma atividade mais amig\u00e1vel para seres humanos, desenvolveu-se uma linguagem cuja sintaxe era mais pr\u00f3xima da escrita em ingl\u00eas, com as devidas restri\u00e7\u00f5es para tornar o c\u00f3digo n\u00e3o amb\u00edguo. Al\u00e9m de facilitar a compreens\u00e3o do algoritmo, a linguagem Assembly trouxe recursos de abstra\u00e7\u00e3o que permitiram manter a complexidade do programa sob controle (at\u00e9 certo ponto, \u00e9 claro). A Linguagem Assembly foi a primeira tentativa de adicionar abstra\u00e7\u00f5es (s\u00edmbolos chamado de mnem\u00f4nicos) sobre a linguagem de m\u00e1quina na esperan\u00e7a de que a programa\u00e7\u00e3o de software n\u00e3o fosse equipar\u00e1vel a um dos Doze Trabalhos de H\u00e9rcules . Ela representa a 2\u00aa gera\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o . Nota Perceba que tornou-se necess\u00e1rio \"passar\" o c\u00f3digo-fonte para um software chamado Assembler (montador) para gerar o c\u00f3digo em linguagem de m\u00e1quina (execut\u00e1vel). ;---------------------------------------------------------------------; START: ;---------------------------------------------------------------------; ; TEST FOR PRESENCE OF CALCULATOR ; ;---------------------------------------------------------------------; SUB AX,AX MOV ES,AX SUB BH,BH MOV BL,INT_NUMBER SHL BX,1 SHL BX,1 MOV DI,ES:[BX] MOV ES,ES:[BX+L\u00f3gica2] ADD DI,4 LEA SI,TAG MOV CX,TAG_LEN REPE CMPSB JE CALL_CALC MOV BX,SCREEN_HANDLE MOV CX,MESSAGE_LEN LEA DX,MESSAGE MOV AH,40h INT 21h JMP SHORT CALC_EXIT ;---------------------------------------------------------------------; ; CALL CALCULATOR ; ;---------------------------------------------------------------------; CALL_CALC: MOV AL,INT_NUMBER MOV BYTE PTR INT_CODE,AL DB 0CDh ; INT C\u00f3digo-fonte extra\u00eddo de https://assembly.happycodings.com/code13.html . Linguagens de Alto N\u0131\u0301vel \u00b6 A escrita do algoritmo \u00e9 feita utilizando-se um conjunto de comandos (palavras reservadas) em ingl\u00eas que determinam as a\u00e7\u00f5es que o computador deve realizar. Se na linguagem Assembly, os comandos representam \"apelidos\" para instru\u00e7\u00e3o de m\u00e1quina, nas linguagens de alto n\u00edvel, os comandos representam a\u00e7\u00f5es abstratas. Tais linguagens abrangem diferentes paradigmas, como estruturado, orientado a objetos, funcional e l\u00f3gico, por exemplo. Ao utilizar linguagens de alto n\u00edvel, o programador aumenta significativamente a portabilidade de seu c\u00f3digo dentre as diferentes arquiteturas de m\u00e1quina existentes, diferentemente da linguagem assembly ou de m\u00e1quina, que s\u00e3o altamente acopladas ao conjunto de instru\u00e7\u00f5es da CPU . Em termos de gera\u00e7\u00e3o, as linguagens de alto n\u00edvel podem enquadrar-se como sendo de 3\u00aa, 4\u00aa ou 5\u00aa gera\u00e7\u00e3o . Veja abaixo um trecho de c\u00f3digo escrito na linguagem C++. #include <iostream> using namespace std ; int saldo ; //vari\u00e1vel global int main (){ int parcela1 , parcela2 ; //vari\u00e1veis locais parcela1 = 10 , parcela2 = 12 ; saldo = parcela1 + parcela2 ; { //in\u00edcio de bloco cout << saldo << endl ; int saldo = 14 ; //variavel local cout << saldo << endl ; } //fim de bloco cout << saldo << endl ; return 0 ; } Linguagens de Sistema \u00b6 S\u00e3o linguagens de alto n\u00edvel utilizadas para programa\u00e7\u00e3o de sistemas. Caracterizam-se por oferecer acesso facilitado ao hardware, ao mesmo tempo que oferecem recursos t\u00edpicos de linguagens de pr\u00f3posito geral, como estruturas de sele\u00e7\u00e3o, la\u00e7os de repeti\u00e7\u00e3o e blocos, por exemplo. Uma destas linguagens chama-se Rust . fn main () { println! ( \"Hello World!\" ); } Linguagens de Dom\u00ednio Espec\u00edfico \u00b6 De alto n\u0131\u0301vel, aplicada a um contexto espec\u00edfico, com expressividade limitada. Express\u00f5es regulares s\u00e3o exemplos desta categoria. Saiba mais sobre DSL . Linguagens Visuais \u00b6 Toda linguagem que n\u00e3o \u00e9 baseada em texto. Exemplos deste tipo de linguagem s\u00e3o o Scratch e o Blockly . Linguagens Esot\u00e9ricas \u00b6 Linguagens que n\u00e3o tem prop\u00f3sito de uso, especificamente. Neste link voc\u00ea encontrar\u00e1 algumas delas . Ficou curioso sobre a classifica\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o? Que tal ler o conte\u00fado deste link para come\u00e7ar :)","title":"Linguagens de Programa\u00e7\u00e3o"},{"location":"programacao/linguagens/#linguagens-de-maquina","text":"Interpretada diretamente pelo hardware. \u00c9 a linguagem que o processador reconhece. Compiladores, interpretadores e montadores convertem linguagens de mais alto n\u00edvel para linguagem de m\u00e1quina. Representa a 1\u00ba gera\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o . C\u00f3digo em linguagem de m\u00e1quina \u00e9 normalmente representado em hexadecimal para tornar a leitura mais simples. Contudo, sua codifica\u00e7\u00e3o original \u00e9 bin\u00e1ria. Programar neste n\u00edvel \u00e9 complexo e exige do profissional profundo conhecimento da arquitetura do hardware em que o programa ir\u00e1 executar. Este tipo de c\u00f3digo s\u00f3 \u00e9 port\u00e1vel para arquiteturas id\u00eanticas, uma vez que \u00e9 altamente dependente do hardware que executa. 8B542408 83FA0077 06B80000 0000C383 FA027706 B8010000 00C353BB 01000000 B9010000 008D0419 83FA0376 078BD989","title":"Linguagens de M\u00e1quina"},{"location":"programacao/linguagens/#linguagem-assembly","text":"A interpreta\u00e7\u00e3o de c\u00f3digo de m\u00e1quina por seres humanos \u00e9 extremamente dif\u00edcil. Reconhecer a funcionalidade do c\u00f3digo a partir de sequ\u00eancias de c\u00f3digos hexadecimais \u00e9 praticamente uma odiss\u00e9ia. Isso porque o c\u00f3digo de m\u00e1quina n\u00e3o se preocupa com quest\u00f5es de legibilidade, afinal o processador n\u00e3o precisa desta feature . A fim de tornar a programa\u00e7\u00e3o uma atividade mais amig\u00e1vel para seres humanos, desenvolveu-se uma linguagem cuja sintaxe era mais pr\u00f3xima da escrita em ingl\u00eas, com as devidas restri\u00e7\u00f5es para tornar o c\u00f3digo n\u00e3o amb\u00edguo. Al\u00e9m de facilitar a compreens\u00e3o do algoritmo, a linguagem Assembly trouxe recursos de abstra\u00e7\u00e3o que permitiram manter a complexidade do programa sob controle (at\u00e9 certo ponto, \u00e9 claro). A Linguagem Assembly foi a primeira tentativa de adicionar abstra\u00e7\u00f5es (s\u00edmbolos chamado de mnem\u00f4nicos) sobre a linguagem de m\u00e1quina na esperan\u00e7a de que a programa\u00e7\u00e3o de software n\u00e3o fosse equipar\u00e1vel a um dos Doze Trabalhos de H\u00e9rcules . Ela representa a 2\u00aa gera\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o . Nota Perceba que tornou-se necess\u00e1rio \"passar\" o c\u00f3digo-fonte para um software chamado Assembler (montador) para gerar o c\u00f3digo em linguagem de m\u00e1quina (execut\u00e1vel). ;---------------------------------------------------------------------; START: ;---------------------------------------------------------------------; ; TEST FOR PRESENCE OF CALCULATOR ; ;---------------------------------------------------------------------; SUB AX,AX MOV ES,AX SUB BH,BH MOV BL,INT_NUMBER SHL BX,1 SHL BX,1 MOV DI,ES:[BX] MOV ES,ES:[BX+L\u00f3gica2] ADD DI,4 LEA SI,TAG MOV CX,TAG_LEN REPE CMPSB JE CALL_CALC MOV BX,SCREEN_HANDLE MOV CX,MESSAGE_LEN LEA DX,MESSAGE MOV AH,40h INT 21h JMP SHORT CALC_EXIT ;---------------------------------------------------------------------; ; CALL CALCULATOR ; ;---------------------------------------------------------------------; CALL_CALC: MOV AL,INT_NUMBER MOV BYTE PTR INT_CODE,AL DB 0CDh ; INT C\u00f3digo-fonte extra\u00eddo de https://assembly.happycodings.com/code13.html .","title":"Linguagem Assembly"},{"location":"programacao/linguagens/#linguagens-de-alto-nvel","text":"A escrita do algoritmo \u00e9 feita utilizando-se um conjunto de comandos (palavras reservadas) em ingl\u00eas que determinam as a\u00e7\u00f5es que o computador deve realizar. Se na linguagem Assembly, os comandos representam \"apelidos\" para instru\u00e7\u00e3o de m\u00e1quina, nas linguagens de alto n\u00edvel, os comandos representam a\u00e7\u00f5es abstratas. Tais linguagens abrangem diferentes paradigmas, como estruturado, orientado a objetos, funcional e l\u00f3gico, por exemplo. Ao utilizar linguagens de alto n\u00edvel, o programador aumenta significativamente a portabilidade de seu c\u00f3digo dentre as diferentes arquiteturas de m\u00e1quina existentes, diferentemente da linguagem assembly ou de m\u00e1quina, que s\u00e3o altamente acopladas ao conjunto de instru\u00e7\u00f5es da CPU . Em termos de gera\u00e7\u00e3o, as linguagens de alto n\u00edvel podem enquadrar-se como sendo de 3\u00aa, 4\u00aa ou 5\u00aa gera\u00e7\u00e3o . Veja abaixo um trecho de c\u00f3digo escrito na linguagem C++. #include <iostream> using namespace std ; int saldo ; //vari\u00e1vel global int main (){ int parcela1 , parcela2 ; //vari\u00e1veis locais parcela1 = 10 , parcela2 = 12 ; saldo = parcela1 + parcela2 ; { //in\u00edcio de bloco cout << saldo << endl ; int saldo = 14 ; //variavel local cout << saldo << endl ; } //fim de bloco cout << saldo << endl ; return 0 ; }","title":"Linguagens de Alto N\u0131\u0301vel"},{"location":"programacao/linguagens/#linguagens-de-sistema","text":"S\u00e3o linguagens de alto n\u00edvel utilizadas para programa\u00e7\u00e3o de sistemas. Caracterizam-se por oferecer acesso facilitado ao hardware, ao mesmo tempo que oferecem recursos t\u00edpicos de linguagens de pr\u00f3posito geral, como estruturas de sele\u00e7\u00e3o, la\u00e7os de repeti\u00e7\u00e3o e blocos, por exemplo. Uma destas linguagens chama-se Rust . fn main () { println! ( \"Hello World!\" ); }","title":"Linguagens de Sistema"},{"location":"programacao/linguagens/#linguagens-de-dominio-especifico","text":"De alto n\u0131\u0301vel, aplicada a um contexto espec\u00edfico, com expressividade limitada. Express\u00f5es regulares s\u00e3o exemplos desta categoria. Saiba mais sobre DSL .","title":"Linguagens de Dom\u00ednio Espec\u00edfico"},{"location":"programacao/linguagens/#linguagens-visuais","text":"Toda linguagem que n\u00e3o \u00e9 baseada em texto. Exemplos deste tipo de linguagem s\u00e3o o Scratch e o Blockly .","title":"Linguagens Visuais"},{"location":"programacao/linguagens/#linguagens-esotericas","text":"Linguagens que n\u00e3o tem prop\u00f3sito de uso, especificamente. Neste link voc\u00ea encontrar\u00e1 algumas delas . Ficou curioso sobre a classifica\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o? Que tal ler o conte\u00fado deste link para come\u00e7ar :)","title":"Linguagens Esot\u00e9ricas"},{"location":"programacao/paradigmas/","text":"Quando desenvolvemos software, precisamos representar fatos do mundo por meio de uma linguagem formal. Neste processo criativo, de abstra\u00e7\u00e3o, aplicamos estrat\u00e9gias, caminhos, formas espec\u00edficas de expressar, de codificar. A isso chamados paradigma de programa\u00e7\u00e3o. As in\u00fameras linguagens de programa\u00e7\u00e3o que podem ser utilizadas na codifica\u00e7\u00e3o facilitam o uso de um ou mais paradigmas em detrimento de outros. Contudo, n\u00e3o podemos imaginar que a linguagem seja a concretiza\u00e7\u00e3o do paradigma, haja vista que \u00e9 algo abstrato. O que ocorre \u00e9 que, pela facilidade em expressarmos o paradigma \\(Y\\) por meio de um linguagem \\(X\\) , a classificamos como sendo do tipo \\(Y\\) . Por exemplo, sabemos que a linguagem Java facilita a codifica\u00e7\u00e3o utilizando o paradigma da Orienta\u00e7\u00e3o a Objetos, ent\u00e3o costumamos dizer que Java \u00e9 uma linguagem orientada a objetos. Na sequ\u00eancia iremos abordar os principais paradigmas de programa\u00e7\u00e3o. Importante ressaltar que uma \u00fanica linguagem de programa\u00e7\u00e3o pode expressar v\u00e1rios paradigmas, embora um deles seja, por vezes, mais evidente no c\u00f3digo do que outros. Imperativo \u00b6 ...continua Declarativo \u00b6 ...continua Estruturado \u00b6 ...continua Procedural \u00b6 ...continua Funcional \u00b6 ...continua Orientado a Objetos \u00b6 Neste paradigma, a programa\u00e7\u00e3o \u00e9 realizada por meio da defini\u00e7\u00e3o de objetos que trocam mensagens entre si. Estes objetos t\u00eam estado e comportamento encapsulados, ocultando do mundo exterior seus detalhes internos de opera\u00e7\u00e3o. Para criar objetos, podemos fazer uso de classes ou prot\u00f3tipos , a depender do que a linguagem de programa\u00e7\u00e3o proporciona. O comportamento do software \u00e9 gerado pela intera\u00e7\u00e3o entre os objetos que o comp\u00f5em, atrav\u00e9s da troca de mensagens em que um objeto emissor dispara no receptor a execu\u00e7\u00e3o de uma opera\u00e7\u00e3o espec\u00edfica, a qual chamamos de m\u00e9todo . Estes objetos t\u00eam atributos e comportamentos definidos a partir de suas classes ou prot\u00f3tipos . Entendemos por atributos as propriedades do objeto sobre as quais armazenamos dados. J\u00e1 os comportamentos referem-se \u00e0s a\u00e7\u00f5es que o objeto realizada. Todas as altera\u00e7\u00f5es de estado (fotografia dos valores de atributo em um dado momento) s\u00e3o feitas exclusivamente pelos m\u00e9todos, a partir da recep\u00e7\u00e3o de mensagens. Vamos imaginar, por exemplo, a representa\u00e7\u00e3o de um simples ret\u00e2ngulo atrav\u00e9s do paradigma da orienta\u00e7\u00e3o a objetos. Iremos considerar utilizar orienta\u00e7\u00e3o a objetos baseada em classes neste momento. Observe o diagrama: classDiagram class Retangulo{ -float altura -float largura +obterArea() float +definirDimensao(float altura, float largura) void } Chamamos nossa classe de Retangulo , visto que ela ir\u00e1 representar qualquer ret\u00e2ngulo em nossa codifica\u00e7\u00e3o. Os atributos estabelecidos foram altura e largura , ou seja, s\u00e3o as propriedades que desejamos armazenar valor. Considerando uma linguagem de programa\u00e7\u00e3o fortemente tipada, estabelecemos que ambos os atributos s\u00e3o do tipo float (real de precis\u00e3o simples). J\u00e1 os comportamentos s\u00e3o dois, representados pelos m\u00e9todos obterArea e definirDimensao . Percebeu os s\u00edmbolos de \\(+\\) e \\(-\\) em frente aos atributos e m\u00e9todos? Bem, eles estabelecem a visibilidade e, de momento, basta saber que \\(+\\) indica acesso p\u00fablico e \\(-\\) , acesso privado . C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Retangulo { private : float largura , altura ; public : float obterArea () { return this -> altura * this -> altura ; } void definirDimensao ( float altura , float largura ) { this -> altura = altura ; this -> largura = largura ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 class Retangulo { private float largura , altura ; public float obterArea () { return this . altura * this . altura ; } public void definirDimensao ( float altura , float largura ) { this . altura = altura ; this . largura = largura ; } }; Python 1 2 3 4 5 6 7 8 9 10 11 class Retangulo : def __init__ ( self ): self . __largura = 0 self . __altura = 0 def obterArea ( self ): return self . __altura * self . __altura def definirDimensao ( self , altura , largura ): self . __altura = altura self . __largura = largura Perceba que as implementa\u00e7\u00f5es da classe Retangulo , embora feitas em tr\u00eas linguagens de programa\u00e7\u00e3o diferentes, apresentam semelhan\u00e7a na forma de codificar. Atributos s\u00e3o definidos tal qual o s\u00e3o vari\u00e1veis comuns e m\u00e9todos como sendo fun\u00e7\u00f5es. A diferen\u00e7a \u00e9 que as defini\u00e7\u00f5es ficam restritas ao escopo da classe e funcionam como um molde para a cria\u00e7\u00e3o dos objetos. A defini\u00e7\u00e3o da classe implica na disponibilidade de um novo tipo abstrato de dados (TAD) no c\u00f3digo. Com este novo tipo podemos criar vari\u00e1veis e nelas, instanciar objetos. Veremos isso com mais detalhes quando tratarmos dos aspectos espec\u00edficos de implementa\u00e7\u00e3o. Esses objetos criados trocam mensagens entre si durante a execu\u00e7\u00e3o do software, produzindo o resultado almejado pelo desenvolvedor. Saiba mais sobre este paradigma na se\u00e7\u00e3o de Programa\u00e7\u00e3o Orientada a Objetos . Orientado a Eventos \u00b6 ...continua L\u00f3gico \u00b6 ...continua Orientado a Aspectos \u00b6 ...continua","title":"Paradigmas de Programa\u00e7\u00e3o"},{"location":"programacao/paradigmas/#imperativo","text":"...continua","title":"Imperativo"},{"location":"programacao/paradigmas/#declarativo","text":"...continua","title":"Declarativo"},{"location":"programacao/paradigmas/#estruturado","text":"...continua","title":"Estruturado"},{"location":"programacao/paradigmas/#procedural","text":"...continua","title":"Procedural"},{"location":"programacao/paradigmas/#funcional","text":"...continua","title":"Funcional"},{"location":"programacao/paradigmas/#orientado-a-objetos","text":"Neste paradigma, a programa\u00e7\u00e3o \u00e9 realizada por meio da defini\u00e7\u00e3o de objetos que trocam mensagens entre si. Estes objetos t\u00eam estado e comportamento encapsulados, ocultando do mundo exterior seus detalhes internos de opera\u00e7\u00e3o. Para criar objetos, podemos fazer uso de classes ou prot\u00f3tipos , a depender do que a linguagem de programa\u00e7\u00e3o proporciona. O comportamento do software \u00e9 gerado pela intera\u00e7\u00e3o entre os objetos que o comp\u00f5em, atrav\u00e9s da troca de mensagens em que um objeto emissor dispara no receptor a execu\u00e7\u00e3o de uma opera\u00e7\u00e3o espec\u00edfica, a qual chamamos de m\u00e9todo . Estes objetos t\u00eam atributos e comportamentos definidos a partir de suas classes ou prot\u00f3tipos . Entendemos por atributos as propriedades do objeto sobre as quais armazenamos dados. J\u00e1 os comportamentos referem-se \u00e0s a\u00e7\u00f5es que o objeto realizada. Todas as altera\u00e7\u00f5es de estado (fotografia dos valores de atributo em um dado momento) s\u00e3o feitas exclusivamente pelos m\u00e9todos, a partir da recep\u00e7\u00e3o de mensagens. Vamos imaginar, por exemplo, a representa\u00e7\u00e3o de um simples ret\u00e2ngulo atrav\u00e9s do paradigma da orienta\u00e7\u00e3o a objetos. Iremos considerar utilizar orienta\u00e7\u00e3o a objetos baseada em classes neste momento. Observe o diagrama: classDiagram class Retangulo{ -float altura -float largura +obterArea() float +definirDimensao(float altura, float largura) void } Chamamos nossa classe de Retangulo , visto que ela ir\u00e1 representar qualquer ret\u00e2ngulo em nossa codifica\u00e7\u00e3o. Os atributos estabelecidos foram altura e largura , ou seja, s\u00e3o as propriedades que desejamos armazenar valor. Considerando uma linguagem de programa\u00e7\u00e3o fortemente tipada, estabelecemos que ambos os atributos s\u00e3o do tipo float (real de precis\u00e3o simples). J\u00e1 os comportamentos s\u00e3o dois, representados pelos m\u00e9todos obterArea e definirDimensao . Percebeu os s\u00edmbolos de \\(+\\) e \\(-\\) em frente aos atributos e m\u00e9todos? Bem, eles estabelecem a visibilidade e, de momento, basta saber que \\(+\\) indica acesso p\u00fablico e \\(-\\) , acesso privado . C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Retangulo { private : float largura , altura ; public : float obterArea () { return this -> altura * this -> altura ; } void definirDimensao ( float altura , float largura ) { this -> altura = altura ; this -> largura = largura ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 class Retangulo { private float largura , altura ; public float obterArea () { return this . altura * this . altura ; } public void definirDimensao ( float altura , float largura ) { this . altura = altura ; this . largura = largura ; } }; Python 1 2 3 4 5 6 7 8 9 10 11 class Retangulo : def __init__ ( self ): self . __largura = 0 self . __altura = 0 def obterArea ( self ): return self . __altura * self . __altura def definirDimensao ( self , altura , largura ): self . __altura = altura self . __largura = largura Perceba que as implementa\u00e7\u00f5es da classe Retangulo , embora feitas em tr\u00eas linguagens de programa\u00e7\u00e3o diferentes, apresentam semelhan\u00e7a na forma de codificar. Atributos s\u00e3o definidos tal qual o s\u00e3o vari\u00e1veis comuns e m\u00e9todos como sendo fun\u00e7\u00f5es. A diferen\u00e7a \u00e9 que as defini\u00e7\u00f5es ficam restritas ao escopo da classe e funcionam como um molde para a cria\u00e7\u00e3o dos objetos. A defini\u00e7\u00e3o da classe implica na disponibilidade de um novo tipo abstrato de dados (TAD) no c\u00f3digo. Com este novo tipo podemos criar vari\u00e1veis e nelas, instanciar objetos. Veremos isso com mais detalhes quando tratarmos dos aspectos espec\u00edficos de implementa\u00e7\u00e3o. Esses objetos criados trocam mensagens entre si durante a execu\u00e7\u00e3o do software, produzindo o resultado almejado pelo desenvolvedor. Saiba mais sobre este paradigma na se\u00e7\u00e3o de Programa\u00e7\u00e3o Orientada a Objetos .","title":"Orientado a Objetos"},{"location":"programacao/paradigmas/#orientado-a-eventos","text":"...continua","title":"Orientado a Eventos"},{"location":"programacao/paradigmas/#logico","text":"...continua","title":"L\u00f3gico"},{"location":"programacao/paradigmas/#orientado-a-aspectos","text":"...continua","title":"Orientado a Aspectos"},{"location":"programacao/cpp/ambiente/","text":"Para codificar em C++ \u00e9 preciso minimamente do compilador e de um editor de texto. A instala\u00e7\u00e3o do compilador apresenta diferen\u00e7as de acordo com a plataforma. J\u00e1 o editor de texto pode ser qualquer um dispon\u00edvel no mercado. Quando falamos de codifica\u00e7\u00e3o profissional de software, os editores de texto s\u00e3o substitu\u00eddos por IDEs ( Integrated Development Environment ) com a finalidade de aumentar a produtividade e a qualidade do c\u00f3digo-fonte. As IDEs agregam diversos plugins que auxiliam o desenvolvedor na tarefa de codifica\u00e7\u00e3o. Na sequ\u00eancia apresento a configura\u00e7\u00e3o do ambiente m\u00ednimo para desenvolvimento em C++ nas plataformas Linux ( Debian based ) e Windows. Plataforma Linux \u00b6 Normalmente as distribui\u00e7\u00f5es Linux j\u00e1 possuem o compilador g++ instalado. Para verificar se o compilador est\u00e1 corretamente instalado, podemos abrir o terminal e executar o comando abaixo, que solicita a vers\u00e3o do mesmo. g++ --version Uma vez instalado, esperamos que a sa\u00edda seja semelhante ao trecho abaixo: g++ ( Ubuntu 7 .3.0-27ubuntu1~18.04 ) 7 .3.0 Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Caso o compilador n\u00e3o esteja instalado no sistema, ser\u00e1 preciso utilizar a ferramenta de gest\u00e3o de pacotes da distribui\u00e7\u00e3o para instala\u00e7\u00e3o. Em distribui\u00e7\u00f5es baseadas no Debian ( Ubuntu, por exemplo ) , o comando apt-get install realiza a instala\u00e7\u00e3o do compilador via terminal. A checagem da instala\u00e7\u00e3o pode ser realizada utilizando o comando g++ --version, conforme demonstrando anteriormente. Caso o compilador n\u00e3o esteja dispon\u00edvel no sistema, ser\u00e1 preciso utilizar a ferramenta de gest\u00e3o de pacotes da distribui\u00e7\u00e3o para instala\u00e7\u00e3o. Em distribui\u00e7\u00f5es baseadas no Debian (Ubuntu, por exemplo), o comando sudo apt-get install g++ realiza a instala\u00e7\u00e3o do compilador via terminal. A checagem da instala\u00e7\u00e3o pode ser realizada utilizando o comando g++ --version , conforme demonstrando anteriormente. Windows Plataforma Windows \u00b6 Assim como na plataforma Linux, no Windows temos diferentes op\u00e7\u00f5es de editores e IDEs para desenvolvimento em C++. Uma destas solu\u00e7\u00f5es \u00e9 o DevC++ , uma ferramenta gratuita e com bons recursos para quem est\u00e1 iniciando na linguagem. Outras op\u00e7\u00f5es tamb\u00e9m podem ser consideradas, como Code::Blocks , Netbeans , Eclipse , Clion e Visual Studio Code . Basicamente, a diferen\u00e7a entre uma IDE e outra refere-se ao conjunto de ferramentas e recursos oferecidos pelas mesmas. Interessante observar que boa parte destas ferramentas vem com o compilador integrado, o que facilita o processo de instala\u00e7\u00e3o. Dos listados abaixo, a exce\u00e7\u00e3o fica para o Visual Studio Code. DevC++ Visual Studio Visual Studio Code NetBeans Eclipse CLion CodeBlocks Dentre as ferramentas que citei, tenho prefer\u00eancia pelo Visual Studio Code . O processo de instala\u00e7\u00e3o do editor \u00e9 simples, compreendendo o download do arquivo de pacote (.deb ou .rpm) ou do instalador (conforme sistema operacional escolhido). O VS Code , como tamb\u00e9m \u00e9 conhecido, \u00e9 um editor avan\u00e7ado com suporte para in\u00fameras linguagens e tecnologias. Apresenta interface intuitiva, baixo consumo de mem\u00f3ria e terminal integrado. N\u00e3o posso deixar de comentar que a ferramenta \u00e9 gratuita, estando o usu\u00e1rio livre de qualquer cobran\u00e7a/restri\u00e7\u00e3o em rela\u00e7\u00e3o ao seu uso. A tela inicial do software cont\u00e9m \u00e0 esquerda o Explorer , no qual apresentam-se os arquivos e diret\u00f3rios do projeto, ferramenta de Busca , integra\u00e7\u00e3o com ferramenta de Versionamento de C\u00f3digo , Debug e Extens\u00f5es . A parte central da tela \u00e9 ocupada pelos diferentes arquivos em edi\u00e7\u00e3o e na parte inferior constam o Terminal Integrado , sa\u00edda de logs, erros, entre outros. Programas escritos em C++ podem compreender um ou mais arquivos de c\u00f3digo-fonte. Ao conjunto de arquivos que formam o programa chamamos de projeto . No VS Code podemos mapear o projeto abrindo a pasta raiz que cont\u00e9m os arquivos. Ainda, para deixar o ambiente completo, podemos instalar uma extens\u00e3o espec\u00edfica para a linguagem C++, que ir\u00e1 nos auxiliar nas tarefas relacionadas \u00e0 codifica\u00e7\u00e3o. Existem in\u00fameras extens\u00f5es, mas recomendo a C/C++ for Visual Studio Code . \u00c9 poss\u00edvel instalar a extens\u00e3o diretamente pelo VS Code procurando pela mesma na tela Extensions (observe a imagem a seguir). Execu\u00e7\u00e3o \u00b6 Com a extens\u00e3o C/C++ for Visual Studio Code instalada, o VS Code j\u00e1 tem condi\u00e7\u00f5es de compilar o c\u00f3digo-fonte e executar o programa gerado de forma integrada. O processo \u00e9 muito simples! Utilize o bot\u00e3o direito do mouse na tela de edi\u00e7\u00e3o do c\u00f3digo-fonte e escolha a op\u00e7\u00e3o Run Code . Aten\u00e7\u00e3o Como o VS Code n\u00e3o possui compilador C++ integrado, \u00e9 preciso instalar separadamente. Neste endere\u00e7o voc\u00ea ir\u00e1 encontrar informa\u00e7\u00f5es de como realizar o procedimento.","title":"Ambiente de Desenvolvimento"},{"location":"programacao/cpp/ambiente/#plataforma-linux","text":"Normalmente as distribui\u00e7\u00f5es Linux j\u00e1 possuem o compilador g++ instalado. Para verificar se o compilador est\u00e1 corretamente instalado, podemos abrir o terminal e executar o comando abaixo, que solicita a vers\u00e3o do mesmo. g++ --version Uma vez instalado, esperamos que a sa\u00edda seja semelhante ao trecho abaixo: g++ ( Ubuntu 7 .3.0-27ubuntu1~18.04 ) 7 .3.0 Copyright ( C ) 2017 Free Software Foundation, Inc. This is free software ; see the source for copying conditions. There is NO warranty ; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. Caso o compilador n\u00e3o esteja instalado no sistema, ser\u00e1 preciso utilizar a ferramenta de gest\u00e3o de pacotes da distribui\u00e7\u00e3o para instala\u00e7\u00e3o. Em distribui\u00e7\u00f5es baseadas no Debian ( Ubuntu, por exemplo ) , o comando apt-get install realiza a instala\u00e7\u00e3o do compilador via terminal. A checagem da instala\u00e7\u00e3o pode ser realizada utilizando o comando g++ --version, conforme demonstrando anteriormente. Caso o compilador n\u00e3o esteja dispon\u00edvel no sistema, ser\u00e1 preciso utilizar a ferramenta de gest\u00e3o de pacotes da distribui\u00e7\u00e3o para instala\u00e7\u00e3o. Em distribui\u00e7\u00f5es baseadas no Debian (Ubuntu, por exemplo), o comando sudo apt-get install g++ realiza a instala\u00e7\u00e3o do compilador via terminal. A checagem da instala\u00e7\u00e3o pode ser realizada utilizando o comando g++ --version , conforme demonstrando anteriormente.","title":"Plataforma Linux"},{"location":"programacao/cpp/ambiente/#windows-plataforma-windows","text":"Assim como na plataforma Linux, no Windows temos diferentes op\u00e7\u00f5es de editores e IDEs para desenvolvimento em C++. Uma destas solu\u00e7\u00f5es \u00e9 o DevC++ , uma ferramenta gratuita e com bons recursos para quem est\u00e1 iniciando na linguagem. Outras op\u00e7\u00f5es tamb\u00e9m podem ser consideradas, como Code::Blocks , Netbeans , Eclipse , Clion e Visual Studio Code . Basicamente, a diferen\u00e7a entre uma IDE e outra refere-se ao conjunto de ferramentas e recursos oferecidos pelas mesmas. Interessante observar que boa parte destas ferramentas vem com o compilador integrado, o que facilita o processo de instala\u00e7\u00e3o. Dos listados abaixo, a exce\u00e7\u00e3o fica para o Visual Studio Code. DevC++ Visual Studio Visual Studio Code NetBeans Eclipse CLion CodeBlocks Dentre as ferramentas que citei, tenho prefer\u00eancia pelo Visual Studio Code . O processo de instala\u00e7\u00e3o do editor \u00e9 simples, compreendendo o download do arquivo de pacote (.deb ou .rpm) ou do instalador (conforme sistema operacional escolhido). O VS Code , como tamb\u00e9m \u00e9 conhecido, \u00e9 um editor avan\u00e7ado com suporte para in\u00fameras linguagens e tecnologias. Apresenta interface intuitiva, baixo consumo de mem\u00f3ria e terminal integrado. N\u00e3o posso deixar de comentar que a ferramenta \u00e9 gratuita, estando o usu\u00e1rio livre de qualquer cobran\u00e7a/restri\u00e7\u00e3o em rela\u00e7\u00e3o ao seu uso. A tela inicial do software cont\u00e9m \u00e0 esquerda o Explorer , no qual apresentam-se os arquivos e diret\u00f3rios do projeto, ferramenta de Busca , integra\u00e7\u00e3o com ferramenta de Versionamento de C\u00f3digo , Debug e Extens\u00f5es . A parte central da tela \u00e9 ocupada pelos diferentes arquivos em edi\u00e7\u00e3o e na parte inferior constam o Terminal Integrado , sa\u00edda de logs, erros, entre outros. Programas escritos em C++ podem compreender um ou mais arquivos de c\u00f3digo-fonte. Ao conjunto de arquivos que formam o programa chamamos de projeto . No VS Code podemos mapear o projeto abrindo a pasta raiz que cont\u00e9m os arquivos. Ainda, para deixar o ambiente completo, podemos instalar uma extens\u00e3o espec\u00edfica para a linguagem C++, que ir\u00e1 nos auxiliar nas tarefas relacionadas \u00e0 codifica\u00e7\u00e3o. Existem in\u00fameras extens\u00f5es, mas recomendo a C/C++ for Visual Studio Code . \u00c9 poss\u00edvel instalar a extens\u00e3o diretamente pelo VS Code procurando pela mesma na tela Extensions (observe a imagem a seguir).","title":"Windows Plataforma Windows"},{"location":"programacao/cpp/ambiente/#execucao","text":"Com a extens\u00e3o C/C++ for Visual Studio Code instalada, o VS Code j\u00e1 tem condi\u00e7\u00f5es de compilar o c\u00f3digo-fonte e executar o programa gerado de forma integrada. O processo \u00e9 muito simples! Utilize o bot\u00e3o direito do mouse na tela de edi\u00e7\u00e3o do c\u00f3digo-fonte e escolha a op\u00e7\u00e3o Run Code . Aten\u00e7\u00e3o Como o VS Code n\u00e3o possui compilador C++ integrado, \u00e9 preciso instalar separadamente. Neste endere\u00e7o voc\u00ea ir\u00e1 encontrar informa\u00e7\u00f5es de como realizar o procedimento.","title":"Execu\u00e7\u00e3o"},{"location":"programacao/cpp/arranjos/","text":"Os tipos primitivos de dados, como int , double e char , permitem armazenar um valor singular, \u00fanico, na respectiva posi\u00e7\u00e3o de mem\u00f3ria. H\u00e1, contudo, situa\u00e7\u00f5es em que se faz necess\u00e1rio armazenar a partir de uma \u00fanica vari\u00e1vel um conjunto de valores. Tais estruturas recebem o nome de arrays (arranjos). Os arrays , junto a enumerations , strings , ponteiros , ponteiros para membros , referencias e classes s\u00e3o conhecidos como tipos compostos no C++. Os tipos compostos permitem combinar tipos e outros objetos para definir estruturas de armazenamento e manipula\u00e7\u00e3o de dados de alto n\u00edvel. Vamos ao exemplo: imagine que uma escola de programa\u00e7\u00e3o ofere\u00e7a um curso de Introdu\u00e7\u00e3o \u00e0 Linguagem C++, dividido em 10 m\u00f3dulos. Ao final de cada m\u00f3dulo, o estudante dever\u00e1 realizar uma avalia\u00e7\u00e3o. A nota final do curso ser\u00e1 obtida a partir da m\u00e9dia aritm\u00e9tica dentre todas as 10 avalia\u00e7\u00f5es realizadas pelo estudante. Em uma solu\u00e7\u00e3o utilizando apenas tipos primitivos, poder\u00edamos pensar em algo assim: C++ #include <iostream> using namespace std ; int main () { float nt1 , nt2 , nt3 , nt4 , nt5 , nt6 , nt7 , nt8 , nt9 , nt10 ; cin >> nt1 >> nt2 >> nt3 >> nt4 >> nt5 >> nt6 >> nt7 >> nt8 >> nt9 >> nt10 ; float nota_final = ( nt1 + nt2 + nt3 + nt4 + nt5 + nt6 + nt7 + nt8 + nt9 + nt10 ) / 10 ; cout << \"NF: \" << nota_final << endl ; } Observe que criamos 10 vari\u00e1veis do tipo float para armazenar as notas. No c\u00f3digo, a grande quantidade de vari\u00e1veis prejudica a legibilidade e torna a resolu\u00e7\u00e3o do problema mais dif\u00edcil. Mas se pud\u00e9ssemos utilizar apenas uma vari\u00e1vel e, nesta, armazenar 10 notas? A\u00ed est\u00e1 o benef\u00edcio de se utilizar os arrays . Observe a solu\u00e7\u00e3o alternativa aplicando este conceito: C++ #include <iostream> using namespace std ; int main (){ float notas [ 10 ], nota_final = 0 ; for ( int i = 0 ; i < 10 ; i ++ ){ cin >> notas [ i ]; nota_final += notas [ i ]; } nota_final /= 10 ; cout << \"NF: \" << nota_final << endl ; } \u00c9 n\u00edtida diferen\u00e7a: nosso c\u00f3digo ficou mais enxuto e leg\u00edvel. Al\u00e9m disso, adequ\u00e1-lo para receber 100 notas distintas seria algo muito simples, bem diferente do primeiro exemplo. Agora \u00e9 momento de esmiu\u00e7ar a declara\u00e7\u00e3o do array e as opera\u00e7\u00f5es de leitura e escrita realizadas. No C++, declaramos o arranjo adicionando a quantidade de posi\u00e7\u00f5es em cada dimens\u00e3o. Logo, no trecho float notas[10] , a vari\u00e1vel notas ter\u00e1 uma \u00fanica dimens\u00e3o com 10 posi\u00e7\u00f5es. Entendeu a ideia: cada dimens\u00e3o \u00e9 especificada entre [] e podemos ter quantas dimens\u00f5es quisermos (at\u00e9 o limite da mem\u00f3ria dispon\u00edvel!). Ao declarar um array de 10 posi\u00e7\u00f5es do tipo float estamos solicitando a aloca\u00e7\u00e3o da quantidade de 40 bytes de mem\u00f3ria (cada float requer 4 bytes). Em qualquer opera\u00e7\u00e3o que demande a leitura ou escrita de algum valor na estrutura ser\u00e1 preciso especificar o \u00edndice , ou seja, a posi\u00e7\u00e3o do array que dever\u00e1 ser considerada. Se temos um array chamado val de 10 posi\u00e7\u00f5es e gostar\u00edamos de escrever o valor 15 na 5\u00ba posi\u00e7\u00e3o, utilizar\u00edamos a instru\u00e7\u00e3o val[4] = 15; . Percebeu que a 5\u00ba posi\u00e7\u00e3o est\u00e1 no \u00edndice 4? Isso ocorre porque, no C++ e muitas outras linguagens, os \u00edndices come\u00e7am em 0 . Para ler o valor de uma determinada posi\u00e7\u00e3o, utilizamos a mesma sintaxe, especificando o respectivo \u00edndice. Quando pensamos em termos matem\u00e1ticos, costumamos chamar arrays de \u00fanica dimens\u00e3o de vetores e de duas dimens\u00f5es, matrizes . Aos demais, denominamos arrays multidimensionais . Inicializa\u00e7\u00e3o de Arrays \u00b6 Assim como vari\u00e1veis escalares, arrays tamb\u00e9m podem ser inicializados. Observe o programa de exemplo a seguir: C++ #include <iostream> using namespace std ; int main () { float notas [ 2 ][ 4 ] = {{ 0 }, { 0 }}, pesos [ 4 ] = { 3.0 , 2.0 , 4.0 , 1.0 }, media = 0 ; for ( int a = 0 ; a < 2 ; a ++ ) { cout << \"ALUNO \" << a + 1 << endl ; media = 0 ; for ( int n = 0 ; n < 4 ; n ++ ) { cout << \"...NOTA \" << n + 1 << \": \" ; cin >> notas [ a ][ n ]; media += notas [ a ][ n ] * pesos [ n ]; } cout << \"MEDIA: \" << ( media / 10.0 ) << endl ; } } Perceba que a vari\u00e1vel notas \u00e9 uma matriz , uma vez que cont\u00e9m duas dimens\u00f5es. Inicializamos todas as posi\u00e7\u00f5es com zero. Perceba que, para cada dimens\u00e3o, devemos utilizar um par de {} . J\u00e1 o vetor notas foi inicializado com valores correspondentes aos pesos das avalia\u00e7\u00f5es. Observe tamb\u00e9m que a instru\u00e7\u00e3o cin >> notas[a][n]; utiliza dois \u00edndices, uma para cada dimens\u00e3o. Podemos ilustrar a estrutura da matriz notas pela tabela abaixo, em termos dos 8 valores de notas. A primeira linha e primeira coluna s\u00e3o apenas cabe\u00e7alhos e servem apenas para facilitar a compreens\u00e3o. Ao ler a posi\u00e7\u00e3o notas[1][3] obter\u00edamos 7 com base nos dados apresentados. Nota 1 Nota 2 Nota 3 Nota 4 Aluno 1 5 6 9 6 Aluno 2 9 8 7.9 7 Arrays e La\u00e7os de Repeti\u00e7\u00e3o \u00b6 \u00c9 extramente comum utilizarmos la\u00e7os de repeti\u00e7\u00e3o para percorrer arrays , mesmo em c\u00f3digos triviais. E o motivo \u00e9 \u00f3bvio: \u00e9 a forma mais simples de faz\u00ea-lo. Al\u00e9m de reduzir a quantidade de linhas de c\u00f3digo (instru\u00e7\u00f5es), o uso de la\u00e7os de repeti\u00e7\u00e3o facilita eventuais adapta\u00e7\u00f5es no c\u00f3digo, como mudan\u00e7a do tamanho do array , por exemplo. Mas aten\u00e7\u00e3o: a regra n\u00e3o vale para todos os casos, apenas para \u00e0queles em que o uso de la\u00e7os de repeti\u00e7\u00e3o trouxer algum benef\u00edcio. Interessante observar tamb\u00e9m que a quantidade de la\u00e7os utilizados corresponde ao n\u00famero de dimens\u00f5es na maioria dos casos. E os la\u00e7os s\u00e3o aninhados, ou seja, postos um dentro do outro. Arrays de Caracteres \u00b6 O tipo char permite armazenar um caractere espec\u00edfico, como uma letra, s\u00edmbolo ou meta-caractere. Se observamos com aten\u00e7\u00e3o, um texto qualquer corresponde a um vetor de caracteres, onde cada \u00edndice armazena um caractere deste texto. Este forma de manipular texto \u00e9 justamente o que chamamos de cstring no C++, uma alus\u00e3o \u00e0 forma de representa\u00e7\u00e3o de texto t\u00edpica da linguagem C. Embora possamos utilizar cstrings no C++, devemos considerar o uso do tipo abstrato string , que nos oferece maior simplicidade de uso e recursos associados que um simples vetor de caracteres. Observe o exemplo a seguir: C++ #include <iostream> #include <limits> using namespace std ; int main () { int idade ; char nome [ 200 ]; cout << \"Nome: \" ; cin . getline ( nome , 200 ); if ( cin . fail ()){ cin . clear (); cin . ignore ( numeric_limits < streamsize >:: max (), '\\n' ); } cout << endl << \"Idade: \" ; cin >> idade ; cout << endl << nome << \" tem \" << idade << \" anos. \" ; } A vari\u00e1vel nome foi declarada como sendo um array de 200 posi\u00e7\u00f5es. Isso significa que podemos armazenar, no m\u00e1ximo, 200 caracteres. O comando cin.getline(nome, 200); ir\u00e1 aguardar o usu\u00e1rio digitar um valor, para ent\u00e3o armazen\u00e1-lo no array , limitando a captura de 200 caracteres para n\u00e3o causar erro de overflow . Observe que logo ap\u00f3s a leitura via cin estamos realizando um teste l\u00f3gico, utilizando cin.fail() . Este teste ir\u00e1 retornar verdadeiro quando ocorrer algum problema de leitura, como exceder o n\u00famero m\u00e1ximo de 200 caracteres estabelecido. Ocorrendo tal situa\u00e7\u00e3o, limpamos o status via cin.clear() e, na sequencia, removemos todos os caracteres que permaneceram no input stream atrav\u00e9s do comando cin.ignore( numeric_limits<streamsize>::max(), '\\n') . Isso deve ser feito para garantir que o pr\u00f3ximo comando cin capture o valor informado, visto que mantido o status de erro, o valor seria desconsiderado. Outro ponto interessante sobre arrays de caracteres \u00e9 que eles devem ser finalizados atrav\u00e9s do meta-caractere \\0 . Por exemplo, se quis\u00e9ssemos inicializar um array com o texto Ol\u00e1, mundo! , poder\u00edamos faz\u00ea-lo da seguinte forma: C++ #include <iostream> using namespace std ; int main () { char mensagem [] = { 'O' , 'l' , 'a' , ' ' , 'm' , 'u' , 'n' , 'd' , 'o' , '!' , '\\0' }; cout << mensagem ; } O tipo string diferencia-se de um simples array por ser uma classe , ou seja, um tipo abstrato de dados associado ao paradigma da orienta\u00e7\u00e3o a objetos. Contudo, podemos utilizar o tipo sem nos preocuparmos com estes detalhes. Veja como seria o c\u00f3digo para solicitarmos o nome e idade de uma pessoa. Atente-se ao fato de que n\u00e3o estamos informando limite de caracteres, justamente porque o tipo string \u00e9 dinamicamente expans\u00edvel. C++ #include <iostream> using namespace std ; int main () { int idade ; string nome ; cout << \"Nome: \" ; getline ( cin , nome ); cout << endl << \"Idade: \" ; cin >> idade ; cout << endl << nome << \" tem \" << idade << \" anos. \" ; } Al\u00e9m de ter tamanho din\u00e2mico, vari\u00e1veis do tipo string (objetos, no termo correto) permitem opera\u00e7\u00f5es interessantes, como compara\u00e7\u00f5es, indexa\u00e7\u00e3o, substring , entre outros. Observe o exemplo a seguir: C++ #include <iostream> using namespace std ; int main () { string mensagem = \"Consideramos estas verdades como evidentes por si mesmas, que todos os homens s\u00e3o criados iguais, dotados pelo Criador de certos direitos inalien\u00e1veis, que entre estes est\u00e3o a vida, a liberdade e a procura da felicidade.\" ; cout << \"Primeiro caractere: \" << mensagem [ 0 ] << endl ; cout << \"Total de caracteres: \" << mensagem . length () << endl ; cout << \"\u00cdndice em que se encontra 'inalien\u00e1veis': \" << mensagem . find ( \"inalien\u00e1veis\" ) << endl ; cout << \"A partir da posi\u00e7\u00e3o 123, 4 caracteres: \" << mensagem . substr ( 123 , 4 ) << endl ; }","title":"Arranjos"},{"location":"programacao/cpp/arranjos/#inicializacao-de-arrays","text":"Assim como vari\u00e1veis escalares, arrays tamb\u00e9m podem ser inicializados. Observe o programa de exemplo a seguir: C++ #include <iostream> using namespace std ; int main () { float notas [ 2 ][ 4 ] = {{ 0 }, { 0 }}, pesos [ 4 ] = { 3.0 , 2.0 , 4.0 , 1.0 }, media = 0 ; for ( int a = 0 ; a < 2 ; a ++ ) { cout << \"ALUNO \" << a + 1 << endl ; media = 0 ; for ( int n = 0 ; n < 4 ; n ++ ) { cout << \"...NOTA \" << n + 1 << \": \" ; cin >> notas [ a ][ n ]; media += notas [ a ][ n ] * pesos [ n ]; } cout << \"MEDIA: \" << ( media / 10.0 ) << endl ; } } Perceba que a vari\u00e1vel notas \u00e9 uma matriz , uma vez que cont\u00e9m duas dimens\u00f5es. Inicializamos todas as posi\u00e7\u00f5es com zero. Perceba que, para cada dimens\u00e3o, devemos utilizar um par de {} . J\u00e1 o vetor notas foi inicializado com valores correspondentes aos pesos das avalia\u00e7\u00f5es. Observe tamb\u00e9m que a instru\u00e7\u00e3o cin >> notas[a][n]; utiliza dois \u00edndices, uma para cada dimens\u00e3o. Podemos ilustrar a estrutura da matriz notas pela tabela abaixo, em termos dos 8 valores de notas. A primeira linha e primeira coluna s\u00e3o apenas cabe\u00e7alhos e servem apenas para facilitar a compreens\u00e3o. Ao ler a posi\u00e7\u00e3o notas[1][3] obter\u00edamos 7 com base nos dados apresentados. Nota 1 Nota 2 Nota 3 Nota 4 Aluno 1 5 6 9 6 Aluno 2 9 8 7.9 7","title":"Inicializa\u00e7\u00e3o de Arrays"},{"location":"programacao/cpp/arranjos/#arrays-e-lacos-de-repeticao","text":"\u00c9 extramente comum utilizarmos la\u00e7os de repeti\u00e7\u00e3o para percorrer arrays , mesmo em c\u00f3digos triviais. E o motivo \u00e9 \u00f3bvio: \u00e9 a forma mais simples de faz\u00ea-lo. Al\u00e9m de reduzir a quantidade de linhas de c\u00f3digo (instru\u00e7\u00f5es), o uso de la\u00e7os de repeti\u00e7\u00e3o facilita eventuais adapta\u00e7\u00f5es no c\u00f3digo, como mudan\u00e7a do tamanho do array , por exemplo. Mas aten\u00e7\u00e3o: a regra n\u00e3o vale para todos os casos, apenas para \u00e0queles em que o uso de la\u00e7os de repeti\u00e7\u00e3o trouxer algum benef\u00edcio. Interessante observar tamb\u00e9m que a quantidade de la\u00e7os utilizados corresponde ao n\u00famero de dimens\u00f5es na maioria dos casos. E os la\u00e7os s\u00e3o aninhados, ou seja, postos um dentro do outro.","title":"Arrays e La\u00e7os de Repeti\u00e7\u00e3o"},{"location":"programacao/cpp/arranjos/#arrays-de-caracteres","text":"O tipo char permite armazenar um caractere espec\u00edfico, como uma letra, s\u00edmbolo ou meta-caractere. Se observamos com aten\u00e7\u00e3o, um texto qualquer corresponde a um vetor de caracteres, onde cada \u00edndice armazena um caractere deste texto. Este forma de manipular texto \u00e9 justamente o que chamamos de cstring no C++, uma alus\u00e3o \u00e0 forma de representa\u00e7\u00e3o de texto t\u00edpica da linguagem C. Embora possamos utilizar cstrings no C++, devemos considerar o uso do tipo abstrato string , que nos oferece maior simplicidade de uso e recursos associados que um simples vetor de caracteres. Observe o exemplo a seguir: C++ #include <iostream> #include <limits> using namespace std ; int main () { int idade ; char nome [ 200 ]; cout << \"Nome: \" ; cin . getline ( nome , 200 ); if ( cin . fail ()){ cin . clear (); cin . ignore ( numeric_limits < streamsize >:: max (), '\\n' ); } cout << endl << \"Idade: \" ; cin >> idade ; cout << endl << nome << \" tem \" << idade << \" anos. \" ; } A vari\u00e1vel nome foi declarada como sendo um array de 200 posi\u00e7\u00f5es. Isso significa que podemos armazenar, no m\u00e1ximo, 200 caracteres. O comando cin.getline(nome, 200); ir\u00e1 aguardar o usu\u00e1rio digitar um valor, para ent\u00e3o armazen\u00e1-lo no array , limitando a captura de 200 caracteres para n\u00e3o causar erro de overflow . Observe que logo ap\u00f3s a leitura via cin estamos realizando um teste l\u00f3gico, utilizando cin.fail() . Este teste ir\u00e1 retornar verdadeiro quando ocorrer algum problema de leitura, como exceder o n\u00famero m\u00e1ximo de 200 caracteres estabelecido. Ocorrendo tal situa\u00e7\u00e3o, limpamos o status via cin.clear() e, na sequencia, removemos todos os caracteres que permaneceram no input stream atrav\u00e9s do comando cin.ignore( numeric_limits<streamsize>::max(), '\\n') . Isso deve ser feito para garantir que o pr\u00f3ximo comando cin capture o valor informado, visto que mantido o status de erro, o valor seria desconsiderado. Outro ponto interessante sobre arrays de caracteres \u00e9 que eles devem ser finalizados atrav\u00e9s do meta-caractere \\0 . Por exemplo, se quis\u00e9ssemos inicializar um array com o texto Ol\u00e1, mundo! , poder\u00edamos faz\u00ea-lo da seguinte forma: C++ #include <iostream> using namespace std ; int main () { char mensagem [] = { 'O' , 'l' , 'a' , ' ' , 'm' , 'u' , 'n' , 'd' , 'o' , '!' , '\\0' }; cout << mensagem ; } O tipo string diferencia-se de um simples array por ser uma classe , ou seja, um tipo abstrato de dados associado ao paradigma da orienta\u00e7\u00e3o a objetos. Contudo, podemos utilizar o tipo sem nos preocuparmos com estes detalhes. Veja como seria o c\u00f3digo para solicitarmos o nome e idade de uma pessoa. Atente-se ao fato de que n\u00e3o estamos informando limite de caracteres, justamente porque o tipo string \u00e9 dinamicamente expans\u00edvel. C++ #include <iostream> using namespace std ; int main () { int idade ; string nome ; cout << \"Nome: \" ; getline ( cin , nome ); cout << endl << \"Idade: \" ; cin >> idade ; cout << endl << nome << \" tem \" << idade << \" anos. \" ; } Al\u00e9m de ter tamanho din\u00e2mico, vari\u00e1veis do tipo string (objetos, no termo correto) permitem opera\u00e7\u00f5es interessantes, como compara\u00e7\u00f5es, indexa\u00e7\u00e3o, substring , entre outros. Observe o exemplo a seguir: C++ #include <iostream> using namespace std ; int main () { string mensagem = \"Consideramos estas verdades como evidentes por si mesmas, que todos os homens s\u00e3o criados iguais, dotados pelo Criador de certos direitos inalien\u00e1veis, que entre estes est\u00e3o a vida, a liberdade e a procura da felicidade.\" ; cout << \"Primeiro caractere: \" << mensagem [ 0 ] << endl ; cout << \"Total de caracteres: \" << mensagem . length () << endl ; cout << \"\u00cdndice em que se encontra 'inalien\u00e1veis': \" << mensagem . find ( \"inalien\u00e1veis\" ) << endl ; cout << \"A partir da posi\u00e7\u00e3o 123, 4 caracteres: \" << mensagem . substr ( 123 , 4 ) << endl ; }","title":"Arrays de Caracteres"},{"location":"programacao/cpp/compilacao/","text":"Ap\u00f3s escrito o c\u00f3digo-fonte de um programa, precisamos convert\u00ea-lo em c\u00f3digo de m\u00e1quina, para que o processador tenha condi\u00e7\u00f5es de execut\u00e1-lo. Esse processo de \"tradu\u00e7\u00e3o\" pode ser realizado de duas formas diferentes: compila\u00e7\u00e3o e interpreta\u00e7\u00e3o . A compila\u00e7\u00e3o \u00e9 o processo em que submetemos o c\u00f3digo-fonte do programa a um software chamado compilador . O compilador deve estar dispon\u00edvel no sistema e corretamente configurado. No processo, o compilador realiza verifica\u00e7\u00f5es sint\u00e1ticas (uso correto da sintaxe da linguagem) e sem\u00e2nticas (interpreta\u00e7\u00e3o do significado de instru\u00e7\u00f5es para detectar erros). N\u00e3o havendo erros, o c\u00f3digo de alto n\u00edvel \u00e9 traduzido para c\u00f3digo de baixo n\u00edvel (m\u00e1quina) direcionado \u00e0 plataforma (sistema operacional + arquitetura de m\u00e1quina) alvo. \u00c9 criado ent\u00e3o um execut\u00e1vel . A compila\u00e7\u00e3o ocorre apenas uma vez, sendo que o produto final \u00e9 o programa que o usu\u00e1rio ir\u00e1 utilizar. Podemos citar as seguintes vantagens do processo: N\u00e3o h\u00e1 custo de tradu\u00e7\u00e3o em tempo de execu\u00e7\u00e3o O c\u00f3digo-fonte \u00e9 preservado, n\u00e3o sendo distribu\u00eddo para o cliente Possibilidade de otimiza\u00e7\u00f5es aprimoradas, visto que um maior tempo de compila\u00e7\u00e3o \u00e9 aceit\u00e1vel Contudo tamb\u00e9m existem desvantagens, como: Dificuldade no diagn\u00f3stico de erros Testar o software torna-se mais oneroso, porque requer v\u00e1rios ciclos de compila\u00e7\u00e3o Algumas valida\u00e7\u00f5es s\u00e3o dif\u00edceis de executar em tempo de compila\u00e7\u00e3o Construir bons compiladores \u00e9 algo muito complexo J\u00e1 a interpreta\u00e7\u00e3o \u00e9 o processo em que o c\u00f3d igo-fonte \u00e9 traduzido a cada execu\u00e7\u00e3o ( on the fly ). O interpretador \u00e9 o software que realiza tal tarefa e ele sempre trabalha com dois elementos: programa e o c\u00f3digo-fonte. O c\u00f3digo \u00e9 gerado sob demanda, seguindo o fluxo de execu\u00e7\u00e3o do algoritmo. Existem interpretadores que otimizam o processo, mantendo trechos de c\u00f3digo frequentemente acessados j\u00e1 compilados. A interpreta\u00e7\u00e3o tem benef\u00edcios interessantes. Podemos citar, por exemplo: Facilidade em debugar o c\u00f3digo Interpretadores s\u00e3o mais simples de desenvolver, se comparados \u00e0 compiladores Testar o software torna-se mais simples O interpretador pode ser incorporado ao software para fins de implanta\u00e7\u00e3o \u00c9 poss\u00edvel avaliar c\u00f3digo em tempo de execu\u00e7\u00e3o Como desvantagens do processo de interpreta\u00e7\u00e3o, podemos citar: Necessidade de tradu\u00e7\u00e3o a cada execu\u00e7\u00e3o, que implica em maior custo computacional Dificuldades em se proteger o c\u00f3digo-fonte Interpretadores eficientes s\u00e3o complexos para desenvolver Voc\u00ea pode saber mais sobre estes processos de tradu\u00e7\u00e3o no excelente material produzido para a disciplina COMP 524: Programming Language Concepts , por Bj\u00f6rn B. Brandenburg da University of North Carolina Dica Lembre-se que a linguagem C++ \u00e9 compilada!","title":"Compila\u00e7\u00e3o"},{"location":"programacao/cpp/condicionais/","text":"Na programa\u00e7\u00e3o, os estruturas de sele\u00e7\u00e3o s\u00e3o um dos componentes b\u00e1sicos na constru\u00e7\u00e3o dos programas. Entendemos por estruturas de sele\u00e7\u00e3o comandos que permitem desviar o fluxo natural de execu\u00e7\u00e3o das instru\u00e7\u00f5es de um programa sob determinadas condi\u00e7\u00f5es. Tais estruturas permitem criar ramifica\u00e7\u00f5es de fluxo e est\u00e3o intimamente relacionadas com o uso da l\u00f3gica booleana. Desta forma, a compreens\u00e3o de desvios condicionais requer bons fundamentos de l\u00f3gica, o que tentaremos oferecer na sequ\u00eancia, antes de propriamente apresentarmos os comandos de sele\u00e7\u00e3o. L\u00f3gica Booleana \u00b6 Como sabemos, computa\u00e7\u00e3o e matem\u00e1tica s\u00e3o \u00e1reas irm\u00e3s. Uma das mais relevantes contribui\u00e7\u00f5es da matem\u00e1tica incorporadas \u00e0 computa\u00e7\u00e3o foi do matem\u00e1tico ingl\u00eas George Boole (1815-1864), que desenvolveu um sistema alg\u00e9brico bin\u00e1rio essencial ao funcionamento dos computadores. De modo simplificado, as ideias de Boole permitem obter conclus\u00f5es l\u00f3gicas a partir de vari\u00e1veis que representam apenas dois valores (0 e 1) e operadores que retornam apenas dois valores (0 e 1). Dica 0 indica FALSO e 1 , VERDADEIRO A aplica\u00e7\u00e3o da L\u00f3gica Booleana, como normalmente \u00e9 conhecida, vai desde a constru\u00e7\u00e3o de circuitos de hardware a partir de portas l\u00f3gicas at\u00e9 a programa\u00e7\u00e3o, quando se faz necess\u00e1rio realizar testes l\u00f3gicos no c\u00f3digo. Mas afinal, o que s\u00e3o testes l\u00f3gicos e qual \u00e9 a rela\u00e7\u00e3o destes com o sistema alg\u00e9brico desenvolvido por Boole? N\u00f3s, humanos, expressamos e avaliamos proposi\u00e7\u00f5es l\u00f3gicas a todo o momento. De forma pr\u00e1tica, vamos entender proposi\u00e7\u00e3o l\u00f3gica como sendo uma declara\u00e7\u00e3o que pode ser avaliada como VERDADEIRA ou FALSA, mas nunca ambas . Logo, as duas afirma\u00e7\u00f5es abaixo podem ser consideradas proposi\u00e7\u00f5es l\u00f3gicas: p : Vai chover amanh\u00e3 q : Tenho 10 reais na carteira Tanto para p quanto para q , somente existem duas possibilidades de conclus\u00e3o: V erdadeiro ou F also. Sabemos tamb\u00e9m que os operadores l\u00f3gicos somente podem retornar V ou F , o que nos leva a concluir que express\u00f5es l\u00f3gicas que combinam v\u00e1rias proposi\u00e7\u00f5es, ao final, se reduzem a V ou F . Mas, para elaborar tais express\u00f5es, precisamos conhecer o funcionamento de tr\u00eas operadores l\u00f3gicos b\u00e1sicos: AND , OR e NOT . Aten\u00e7\u00e3o Estamos direcionando o entendimento da l\u00f3gica booleana para a programa\u00e7\u00e3o, omitindo alguns formalismos matem\u00e1ticos propositalmente. Operador AND (conjun\u00e7\u00e3o) \u00b6 O operador l\u00f3gico AND (^), tamb\u00e9m conhecido como conjun\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico bin\u00e1rio que retorna VERDADEIRO sempre que TODOS os seus operandos forem verdadeiros . Para facilitar a compreens\u00e3o, utilizamos uma tabela de valores l\u00f3gicos, a tabela verdade , para expressar os poss\u00edveis resultados da aplica\u00e7\u00e3o do operador AND sobre duas proposi\u00e7\u00f5es. Vamos supor que p tenha seus valores expressos na coluna e q , nas linhas. Deste modo, os poss\u00edvels resultados de p ^ q s\u00e3o: AND V F F F F V V F Resumo A conclus\u00e3o l\u00f3gica do operador AND somente \u00e9 verdadeira se todas as proposi\u00e7\u00f5es forem verdadeiras. Operador OR (disjun\u00e7\u00e3o) \u00b6 O operador l\u00f3gico OR (\u2228), tamb\u00e9m conhecido como disjun\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico bin\u00e1rio que retorna FALSO sempre que TODOS os seus operandos forem falsos . Utilizando a tabela verdade para expressar os poss\u00edveis resultados de p v q temos: OR V F F V F V V V Resumo A conclus\u00e3o l\u00f3gica do operador OR somente \u00e9 falsas se todas as proposi\u00e7\u00f5es forem falsas. Operador NOT (~) \u00b6 O operador l\u00f3gico NOT (~), tamb\u00e9m conhecido como nega\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico un\u00e1rio que retorna a nega\u00e7\u00e3o (inverso l\u00f3gico) de seu operando . Utilizando a tabela verdade para expressar os poss\u00edveis resultados de ~p temos: p ~p F V V F Resumo A conclus\u00e3o l\u00f3gica do operador NOT \u00e9 verdadeiro quando receber falso , e falso quando receber verdadeiro Tudo bem, sabemos o que s\u00e3o proposi\u00e7\u00f5es l\u00f3gicas e conhecemos os tr\u00eas operadores l\u00f3gicos b\u00e1sicos. Mas, de que forma utilizamos tais recursos na programa\u00e7\u00e3o? ...\u00c9 justamente isso que vou apresentar na sequ\u00eancia ;) L\u00f3gica booleana aplicada \u00e0 programa\u00e7\u00e3o \u00b6 Microprocessadores possuem uma ou mais unidades l\u00f3gico-aritm\u00e9ticas (ULA), componente que, como o pr\u00f3prio nome sugere, tem a capacidade de executar instru\u00e7\u00f5es aritm\u00e9ticas e instru\u00e7\u00f5es l\u00f3gicas. Utilizando linguagens de programa\u00e7\u00e3o de alto n\u00edvel, como C++, temos acesso a estes recursos atrav\u00e9s de operadores, s\u00edmbolos que a linguagem define para tais finalidades. Especificamente sobre as opera\u00e7\u00f5es l\u00f3gicas, precisamos lembrar que o C++ define um tipo de dado espec\u00edfico para representar valores booleanos, o tipo bool . Quanto aos operadores l\u00f3gicos, os s\u00edmbolos utilizados s\u00e3o: && para AND, || para OR e ! para NOT. J\u00e1 os operadores de compara\u00e7\u00e3o principais s\u00e3o os seguintes: Operador Significado Exemplo Descri\u00e7\u00e3o > maior que a > b verdadeiro, se a for maior que b < menor que a < b verdadeiro, se a for menor que b >= maior ou igual a a >= b verdadeiro, se a for maior ou igual a b <= menor ou igual a a <= b verdadeiro, se a for menor ou igual a b == igual a == b verdadeiro, se iguais != diferente a !== b verdadeiro, se diferentes Utilizando os operadores l\u00f3gicos e os operadores de compara\u00e7\u00e3o temos como escrever express\u00f5es l\u00f3gicas em nossos programas. Imaginemos por um instante que estamos trabalhando em c\u00f3digo para sele\u00e7\u00e3o de candidatos. Nossos crit\u00e9rios de sele\u00e7\u00e3o ser\u00e3o idade igual ou superior a 18 anos, altura superior a 160cm e peso superior a 60kg . Em nosso c\u00f3digo, armazenamos a idade do candidato em uma vari\u00e1vel inteira chamava idade_c , altura em uma vari\u00e1vel inteira altura_c e peso, em uma vari\u00e1vel de ponto flutuante peso_c . Ap\u00f3s atribuir os dados \u00e0s respectivas vari\u00e1veis, poder\u00edamos codificar a express\u00e3o abaixo para determinar se o candidato ser\u00e1 selecionado ou n\u00e3o: bool is_selecionado = idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ; Observe que utilizamos o operador && , uma vez que as tr\u00eas condi\u00e7\u00f5es (proposi\u00e7\u00f5es) devem ser atendidas. Portanto, a vari\u00e1vel is_selecionado receber\u00e1 true somente nesta situa\u00e7\u00e3o. Mas o que faremos com a vari\u00e1vel is_selecionado ? Sabemos que sendo true precisamos indicar ao usu\u00e1rio de nosso programa que o candidato atende os crit\u00e9rios. Ou seja, precisamos condicionar a execu\u00e7\u00e3o de determinadas instru\u00e7\u00f5es do programa ao resultado de avalia\u00e7\u00e3o da express\u00e3o l\u00f3gica. Como fazer ent\u00e3o? Comando IF ELSE \u00b6 Um dos comandos da linguagem C++ (e de boa parte das outras) \u00e9 o if . Utilizamos ele para criar desvios condicionais na execu\u00e7\u00e3o das instru\u00e7\u00f5es, que, pela ordem natural, s\u00e3o executadas em sequ\u00eancia. A estrutura do comando if \u00e9 simples e para demostrar, vamos seguir falando do nosso programa hipot\u00e9tico de sele\u00e7\u00e3o de candidatos. Observe o c\u00f3digo a seguir: bool is_selecionado = idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ; if ( is_selecionado ){ cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" << endl ; } else { cout << \"Candidato desclassificado\" << endl ; } Perceba que existem tr\u00eas partes do comando if no c\u00f3digo. express\u00e3o l\u00f3gica : sempre fica entre os par\u00eanteses () . \u00c9 parte obrigat\u00f3ria do comando e requer qualquer express\u00e3o l\u00f3gica v\u00e1lida, que possa ser reduzida a true ou false . Em nosso exemplo, estamos avaliando o valor contido na vari\u00e1vel is_selecionado , que \u00e9 do tipo bool . bloco de comandos para o resultado true : \u00e9 o primeiro par de chaves {} logo ap\u00f3s a express\u00e3o l\u00f3gica. Pode conter uma ou mais instru\u00e7\u00f5es, que ser\u00e3o executadas somente quando o resultado da express\u00e3o l\u00f3gica for avaliado como true . \u00c9 parte obrigat\u00f3ria do comando. bloco de comandos para o resultado false (else) : par de chaves imediatamente ap\u00f3s a palavra else . Pode conter uma ou mais instru\u00e7\u00f5es que ser\u00e3o executadas somente quando o resultado da express\u00e3o l\u00f3gica for avaliado como false . \u00c9 parte opcional do comando. Ent\u00e3o, conforme explicamos, nosso c\u00f3digo ir\u00e1 executar a instru\u00e7\u00e3o cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\"<< endl; quando is_selecionado for true e cout << \"Candidato desclassificado\"<< endl; quando for false . A express\u00e3o l\u00f3gica pode ser informada diretamente no comando if . Inclusive, esta \u00e9 a forma mais comum de encontr\u00e1-la. Assim, podemos simplificar nosso trecho de c\u00f3digo, eliminando a vari\u00e1vel is_selecionado . Ter\u00edamos ent\u00e3o: if ( idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ){ cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" << endl ; } else { cout << \"Candidato desclassificado\" << endl ; } Comando IF ELSE IF \u00b6 Uma varia\u00e7\u00e3o do comando if permite especificar condi\u00e7\u00f5es para os blocos else . Para demonstrar seu uso, vamos imaginar um novo programa que apresente a situa\u00e7\u00e3o de estudantes com base na m\u00e9dia final em determinada disciplina. A rela\u00e7\u00e3o entre as notas e as respectivas situa\u00e7\u00f5es est\u00e3o na tabela que segue. Nota Situa\u00e7\u00e3o 0-4.9 Reprovado 5.0-6.9 Exame 7.0-10 Aprovado Uma poss\u00edvel codifica\u00e7\u00e3o para o programa em quest\u00e3o seria: /*defini\u00e7\u00e3o de vari\u00e1veis e leitura de dados...*/ if ( nota >= 0 && nota <= 4.9 ){ cout << \"Reprovado\" ; } else if ( nota >= 5.0 && nota <= 6.9 ){ cout << \"Exame\" ; } else { cout << \"Aprovado\" ; } Note que o else if pode aparecer v\u00e1rias vezes na mesma instru\u00e7\u00e3o, tantas quantas forem necess\u00e1rias. E, mais importante: assim que uma condi\u00e7\u00e3o for avaliada como true , nenhuma outra da mesma instru\u00e7\u00e3o ser\u00e1 avaliada. Operador tern\u00e1rio \u00b6 Para algumas situa\u00e7\u00f5es, podemos utilizar uma simplifica\u00e7\u00e3o de sintaxe da estrutura if else chamada operador tern\u00e1rio . Seu uso \u00e9 especialmente interessante para testes simples, como aquele que fizemos no programa de sele\u00e7\u00e3o de candidatos. Veja a diferen\u00e7a: cout << ( idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ? \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" : \"Candidato desclassificado\" ) << endl ; Pelo c\u00f3digo, percebemos que a sintaxe do comando \u00e9: express\u00e3o l\u00f3gica ? valor quando true : valor quando false . \u00c9 simples de usar, mas pode prejudicar a legibilidade do c\u00f3digo se aplicado para testes mais complexos. Vale o bom senso ;) Switch \u00b6 Finalizamos nosso estudo com o comando switch , uma estrutura de decis\u00e3o baseada em casos. Antes de conhecermos a sintaxe do comando, vamos propor um c\u00f3digo de exemplo: int nota ; cin >> nota ; switch ( nota ) { case 1 : case 2 : case 3 : case 4 : cout << \"Reprovado\" << endl ; break ; case 5 : case 6 : cout << \"Exame\" << endl ; break ; case 7 : case 8 : case 9 : case 10 : cout << \"Aprovado\" << endl ; break ; default : cout << \"Nota inv\u00e1lida\" << endl ; } Nosso exemplo tr\u00e1s importantes informa\u00e7\u00f5es acerca da sintaxe e uso do comando switch . O primeiro deles \u00e9 que devemos informar uma vari\u00e1vel (ou express\u00e3o) que possa ser avaliada como inteiro ou tipo enumer\u00e1vel. No c\u00f3digo, a vari\u00e1vel nota entre parenteses () serve a tal finalidade. Objetivamente estamos consultando o valor de nota e estabelecendo o que fazer para cada um dos valores de interesse. Estes valores de interesse est\u00e3o expressos nos casos ( case ). Ent\u00e3o, se a leitura da vari\u00e1vel nota indicar que seu valor \u00e9 4 , o programa vai executar as instru\u00e7\u00f5es cout << \"Exame\" << endl; e break . E se o valor for 1 , vai executar todas as instru\u00e7\u00f5es que seguem nos pr\u00f3ximos cases at\u00e9 encontrar o break . Opa, como assim executar os \"outros cases\"? Exatamente isso: o comando break indica a interrup\u00e7\u00e3o do processamento do switch . Se ele n\u00e3o estiver presente, a execu\u00e7\u00e3o ir\u00e1 iniciar pelo case pertinente ao valor da express\u00e3o, continuando at\u00e9 o final, passando pelas instru\u00e7\u00f5es de outros casos. Ent\u00e3o, se voc\u00ea quer finalizar a execu\u00e7\u00e3o naquele case espec\u00edfico, deve colocar o comando break . Ok, mas por que o c\u00f3digo anterior n\u00e3o tem break em v\u00e1rios cases ? Bem, porque notas entre 1 e 4 est\u00e3o associadas com a situa\u00e7\u00e3o Reprovado . Para n\u00e3o repetir a mesma instru\u00e7\u00e3o v\u00e1rias vezes, colocamos o break somente no case 4 . O mesmo vale para 5 e 6 e 7 a 10 . J\u00e1 o comando default \u00e9 especial, executado quando nenhum dos cases anteriores corresponde ao valor da express\u00e3o avaliada. A presen\u00e7a do default \u00e9 opcional no comando switch . Para mais informa\u00e7\u00f5es sobre desvios condicionais, recomendo a leitura do tutorial da W3C que trata deste assunto.","title":"Condicionais"},{"location":"programacao/cpp/condicionais/#logica-booleana","text":"Como sabemos, computa\u00e7\u00e3o e matem\u00e1tica s\u00e3o \u00e1reas irm\u00e3s. Uma das mais relevantes contribui\u00e7\u00f5es da matem\u00e1tica incorporadas \u00e0 computa\u00e7\u00e3o foi do matem\u00e1tico ingl\u00eas George Boole (1815-1864), que desenvolveu um sistema alg\u00e9brico bin\u00e1rio essencial ao funcionamento dos computadores. De modo simplificado, as ideias de Boole permitem obter conclus\u00f5es l\u00f3gicas a partir de vari\u00e1veis que representam apenas dois valores (0 e 1) e operadores que retornam apenas dois valores (0 e 1). Dica 0 indica FALSO e 1 , VERDADEIRO A aplica\u00e7\u00e3o da L\u00f3gica Booleana, como normalmente \u00e9 conhecida, vai desde a constru\u00e7\u00e3o de circuitos de hardware a partir de portas l\u00f3gicas at\u00e9 a programa\u00e7\u00e3o, quando se faz necess\u00e1rio realizar testes l\u00f3gicos no c\u00f3digo. Mas afinal, o que s\u00e3o testes l\u00f3gicos e qual \u00e9 a rela\u00e7\u00e3o destes com o sistema alg\u00e9brico desenvolvido por Boole? N\u00f3s, humanos, expressamos e avaliamos proposi\u00e7\u00f5es l\u00f3gicas a todo o momento. De forma pr\u00e1tica, vamos entender proposi\u00e7\u00e3o l\u00f3gica como sendo uma declara\u00e7\u00e3o que pode ser avaliada como VERDADEIRA ou FALSA, mas nunca ambas . Logo, as duas afirma\u00e7\u00f5es abaixo podem ser consideradas proposi\u00e7\u00f5es l\u00f3gicas: p : Vai chover amanh\u00e3 q : Tenho 10 reais na carteira Tanto para p quanto para q , somente existem duas possibilidades de conclus\u00e3o: V erdadeiro ou F also. Sabemos tamb\u00e9m que os operadores l\u00f3gicos somente podem retornar V ou F , o que nos leva a concluir que express\u00f5es l\u00f3gicas que combinam v\u00e1rias proposi\u00e7\u00f5es, ao final, se reduzem a V ou F . Mas, para elaborar tais express\u00f5es, precisamos conhecer o funcionamento de tr\u00eas operadores l\u00f3gicos b\u00e1sicos: AND , OR e NOT . Aten\u00e7\u00e3o Estamos direcionando o entendimento da l\u00f3gica booleana para a programa\u00e7\u00e3o, omitindo alguns formalismos matem\u00e1ticos propositalmente.","title":"L\u00f3gica Booleana"},{"location":"programacao/cpp/condicionais/#operador-and-conjuncao","text":"O operador l\u00f3gico AND (^), tamb\u00e9m conhecido como conjun\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico bin\u00e1rio que retorna VERDADEIRO sempre que TODOS os seus operandos forem verdadeiros . Para facilitar a compreens\u00e3o, utilizamos uma tabela de valores l\u00f3gicos, a tabela verdade , para expressar os poss\u00edveis resultados da aplica\u00e7\u00e3o do operador AND sobre duas proposi\u00e7\u00f5es. Vamos supor que p tenha seus valores expressos na coluna e q , nas linhas. Deste modo, os poss\u00edvels resultados de p ^ q s\u00e3o: AND V F F F F V V F Resumo A conclus\u00e3o l\u00f3gica do operador AND somente \u00e9 verdadeira se todas as proposi\u00e7\u00f5es forem verdadeiras.","title":"Operador AND (conjun\u00e7\u00e3o)"},{"location":"programacao/cpp/condicionais/#operador-or-disjuncao","text":"O operador l\u00f3gico OR (\u2228), tamb\u00e9m conhecido como disjun\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico bin\u00e1rio que retorna FALSO sempre que TODOS os seus operandos forem falsos . Utilizando a tabela verdade para expressar os poss\u00edveis resultados de p v q temos: OR V F F V F V V V Resumo A conclus\u00e3o l\u00f3gica do operador OR somente \u00e9 falsas se todas as proposi\u00e7\u00f5es forem falsas.","title":"Operador OR (disjun\u00e7\u00e3o)"},{"location":"programacao/cpp/condicionais/#operador-not","text":"O operador l\u00f3gico NOT (~), tamb\u00e9m conhecido como nega\u00e7\u00e3o, \u00e9 definido como sendo um operador l\u00f3gico un\u00e1rio que retorna a nega\u00e7\u00e3o (inverso l\u00f3gico) de seu operando . Utilizando a tabela verdade para expressar os poss\u00edveis resultados de ~p temos: p ~p F V V F Resumo A conclus\u00e3o l\u00f3gica do operador NOT \u00e9 verdadeiro quando receber falso , e falso quando receber verdadeiro Tudo bem, sabemos o que s\u00e3o proposi\u00e7\u00f5es l\u00f3gicas e conhecemos os tr\u00eas operadores l\u00f3gicos b\u00e1sicos. Mas, de que forma utilizamos tais recursos na programa\u00e7\u00e3o? ...\u00c9 justamente isso que vou apresentar na sequ\u00eancia ;)","title":"Operador NOT (~)"},{"location":"programacao/cpp/condicionais/#logica-booleana-aplicada-a-programacao","text":"Microprocessadores possuem uma ou mais unidades l\u00f3gico-aritm\u00e9ticas (ULA), componente que, como o pr\u00f3prio nome sugere, tem a capacidade de executar instru\u00e7\u00f5es aritm\u00e9ticas e instru\u00e7\u00f5es l\u00f3gicas. Utilizando linguagens de programa\u00e7\u00e3o de alto n\u00edvel, como C++, temos acesso a estes recursos atrav\u00e9s de operadores, s\u00edmbolos que a linguagem define para tais finalidades. Especificamente sobre as opera\u00e7\u00f5es l\u00f3gicas, precisamos lembrar que o C++ define um tipo de dado espec\u00edfico para representar valores booleanos, o tipo bool . Quanto aos operadores l\u00f3gicos, os s\u00edmbolos utilizados s\u00e3o: && para AND, || para OR e ! para NOT. J\u00e1 os operadores de compara\u00e7\u00e3o principais s\u00e3o os seguintes: Operador Significado Exemplo Descri\u00e7\u00e3o > maior que a > b verdadeiro, se a for maior que b < menor que a < b verdadeiro, se a for menor que b >= maior ou igual a a >= b verdadeiro, se a for maior ou igual a b <= menor ou igual a a <= b verdadeiro, se a for menor ou igual a b == igual a == b verdadeiro, se iguais != diferente a !== b verdadeiro, se diferentes Utilizando os operadores l\u00f3gicos e os operadores de compara\u00e7\u00e3o temos como escrever express\u00f5es l\u00f3gicas em nossos programas. Imaginemos por um instante que estamos trabalhando em c\u00f3digo para sele\u00e7\u00e3o de candidatos. Nossos crit\u00e9rios de sele\u00e7\u00e3o ser\u00e3o idade igual ou superior a 18 anos, altura superior a 160cm e peso superior a 60kg . Em nosso c\u00f3digo, armazenamos a idade do candidato em uma vari\u00e1vel inteira chamava idade_c , altura em uma vari\u00e1vel inteira altura_c e peso, em uma vari\u00e1vel de ponto flutuante peso_c . Ap\u00f3s atribuir os dados \u00e0s respectivas vari\u00e1veis, poder\u00edamos codificar a express\u00e3o abaixo para determinar se o candidato ser\u00e1 selecionado ou n\u00e3o: bool is_selecionado = idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ; Observe que utilizamos o operador && , uma vez que as tr\u00eas condi\u00e7\u00f5es (proposi\u00e7\u00f5es) devem ser atendidas. Portanto, a vari\u00e1vel is_selecionado receber\u00e1 true somente nesta situa\u00e7\u00e3o. Mas o que faremos com a vari\u00e1vel is_selecionado ? Sabemos que sendo true precisamos indicar ao usu\u00e1rio de nosso programa que o candidato atende os crit\u00e9rios. Ou seja, precisamos condicionar a execu\u00e7\u00e3o de determinadas instru\u00e7\u00f5es do programa ao resultado de avalia\u00e7\u00e3o da express\u00e3o l\u00f3gica. Como fazer ent\u00e3o?","title":"L\u00f3gica booleana aplicada \u00e0 programa\u00e7\u00e3o"},{"location":"programacao/cpp/condicionais/#comando-if-else","text":"Um dos comandos da linguagem C++ (e de boa parte das outras) \u00e9 o if . Utilizamos ele para criar desvios condicionais na execu\u00e7\u00e3o das instru\u00e7\u00f5es, que, pela ordem natural, s\u00e3o executadas em sequ\u00eancia. A estrutura do comando if \u00e9 simples e para demostrar, vamos seguir falando do nosso programa hipot\u00e9tico de sele\u00e7\u00e3o de candidatos. Observe o c\u00f3digo a seguir: bool is_selecionado = idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ; if ( is_selecionado ){ cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" << endl ; } else { cout << \"Candidato desclassificado\" << endl ; } Perceba que existem tr\u00eas partes do comando if no c\u00f3digo. express\u00e3o l\u00f3gica : sempre fica entre os par\u00eanteses () . \u00c9 parte obrigat\u00f3ria do comando e requer qualquer express\u00e3o l\u00f3gica v\u00e1lida, que possa ser reduzida a true ou false . Em nosso exemplo, estamos avaliando o valor contido na vari\u00e1vel is_selecionado , que \u00e9 do tipo bool . bloco de comandos para o resultado true : \u00e9 o primeiro par de chaves {} logo ap\u00f3s a express\u00e3o l\u00f3gica. Pode conter uma ou mais instru\u00e7\u00f5es, que ser\u00e3o executadas somente quando o resultado da express\u00e3o l\u00f3gica for avaliado como true . \u00c9 parte obrigat\u00f3ria do comando. bloco de comandos para o resultado false (else) : par de chaves imediatamente ap\u00f3s a palavra else . Pode conter uma ou mais instru\u00e7\u00f5es que ser\u00e3o executadas somente quando o resultado da express\u00e3o l\u00f3gica for avaliado como false . \u00c9 parte opcional do comando. Ent\u00e3o, conforme explicamos, nosso c\u00f3digo ir\u00e1 executar a instru\u00e7\u00e3o cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\"<< endl; quando is_selecionado for true e cout << \"Candidato desclassificado\"<< endl; quando for false . A express\u00e3o l\u00f3gica pode ser informada diretamente no comando if . Inclusive, esta \u00e9 a forma mais comum de encontr\u00e1-la. Assim, podemos simplificar nosso trecho de c\u00f3digo, eliminando a vari\u00e1vel is_selecionado . Ter\u00edamos ent\u00e3o: if ( idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ){ cout << \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" << endl ; } else { cout << \"Candidato desclassificado\" << endl ; }","title":"Comando IF ELSE"},{"location":"programacao/cpp/condicionais/#comando-if-else-if","text":"Uma varia\u00e7\u00e3o do comando if permite especificar condi\u00e7\u00f5es para os blocos else . Para demonstrar seu uso, vamos imaginar um novo programa que apresente a situa\u00e7\u00e3o de estudantes com base na m\u00e9dia final em determinada disciplina. A rela\u00e7\u00e3o entre as notas e as respectivas situa\u00e7\u00f5es est\u00e3o na tabela que segue. Nota Situa\u00e7\u00e3o 0-4.9 Reprovado 5.0-6.9 Exame 7.0-10 Aprovado Uma poss\u00edvel codifica\u00e7\u00e3o para o programa em quest\u00e3o seria: /*defini\u00e7\u00e3o de vari\u00e1veis e leitura de dados...*/ if ( nota >= 0 && nota <= 4.9 ){ cout << \"Reprovado\" ; } else if ( nota >= 5.0 && nota <= 6.9 ){ cout << \"Exame\" ; } else { cout << \"Aprovado\" ; } Note que o else if pode aparecer v\u00e1rias vezes na mesma instru\u00e7\u00e3o, tantas quantas forem necess\u00e1rias. E, mais importante: assim que uma condi\u00e7\u00e3o for avaliada como true , nenhuma outra da mesma instru\u00e7\u00e3o ser\u00e1 avaliada.","title":"Comando IF ELSE IF"},{"location":"programacao/cpp/condicionais/#operador-ternario","text":"Para algumas situa\u00e7\u00f5es, podemos utilizar uma simplifica\u00e7\u00e3o de sintaxe da estrutura if else chamada operador tern\u00e1rio . Seu uso \u00e9 especialmente interessante para testes simples, como aquele que fizemos no programa de sele\u00e7\u00e3o de candidatos. Veja a diferen\u00e7a: cout << ( idade_c >= 18 && altura_c > 160 && peso_c > 60.0 ? \"Candidato atende aos crit\u00e9rios de sele\u00e7\u00e3o\" : \"Candidato desclassificado\" ) << endl ; Pelo c\u00f3digo, percebemos que a sintaxe do comando \u00e9: express\u00e3o l\u00f3gica ? valor quando true : valor quando false . \u00c9 simples de usar, mas pode prejudicar a legibilidade do c\u00f3digo se aplicado para testes mais complexos. Vale o bom senso ;)","title":"Operador tern\u00e1rio"},{"location":"programacao/cpp/condicionais/#switch","text":"Finalizamos nosso estudo com o comando switch , uma estrutura de decis\u00e3o baseada em casos. Antes de conhecermos a sintaxe do comando, vamos propor um c\u00f3digo de exemplo: int nota ; cin >> nota ; switch ( nota ) { case 1 : case 2 : case 3 : case 4 : cout << \"Reprovado\" << endl ; break ; case 5 : case 6 : cout << \"Exame\" << endl ; break ; case 7 : case 8 : case 9 : case 10 : cout << \"Aprovado\" << endl ; break ; default : cout << \"Nota inv\u00e1lida\" << endl ; } Nosso exemplo tr\u00e1s importantes informa\u00e7\u00f5es acerca da sintaxe e uso do comando switch . O primeiro deles \u00e9 que devemos informar uma vari\u00e1vel (ou express\u00e3o) que possa ser avaliada como inteiro ou tipo enumer\u00e1vel. No c\u00f3digo, a vari\u00e1vel nota entre parenteses () serve a tal finalidade. Objetivamente estamos consultando o valor de nota e estabelecendo o que fazer para cada um dos valores de interesse. Estes valores de interesse est\u00e3o expressos nos casos ( case ). Ent\u00e3o, se a leitura da vari\u00e1vel nota indicar que seu valor \u00e9 4 , o programa vai executar as instru\u00e7\u00f5es cout << \"Exame\" << endl; e break . E se o valor for 1 , vai executar todas as instru\u00e7\u00f5es que seguem nos pr\u00f3ximos cases at\u00e9 encontrar o break . Opa, como assim executar os \"outros cases\"? Exatamente isso: o comando break indica a interrup\u00e7\u00e3o do processamento do switch . Se ele n\u00e3o estiver presente, a execu\u00e7\u00e3o ir\u00e1 iniciar pelo case pertinente ao valor da express\u00e3o, continuando at\u00e9 o final, passando pelas instru\u00e7\u00f5es de outros casos. Ent\u00e3o, se voc\u00ea quer finalizar a execu\u00e7\u00e3o naquele case espec\u00edfico, deve colocar o comando break . Ok, mas por que o c\u00f3digo anterior n\u00e3o tem break em v\u00e1rios cases ? Bem, porque notas entre 1 e 4 est\u00e3o associadas com a situa\u00e7\u00e3o Reprovado . Para n\u00e3o repetir a mesma instru\u00e7\u00e3o v\u00e1rias vezes, colocamos o break somente no case 4 . O mesmo vale para 5 e 6 e 7 a 10 . J\u00e1 o comando default \u00e9 especial, executado quando nenhum dos cases anteriores corresponde ao valor da express\u00e3o avaliada. A presen\u00e7a do default \u00e9 opcional no comando switch . Para mais informa\u00e7\u00f5es sobre desvios condicionais, recomendo a leitura do tutorial da W3C que trata deste assunto.","title":"Switch"},{"location":"programacao/cpp/funcoes/","text":"Um dos princ\u00edpios do paradigma da programa\u00e7\u00e3o estruturada \u00e9 o conceito de sub-rotina , tamb\u00e9m conhecidas como fun\u00e7\u00e3o e/ou procedimento (algumas linguagens de programa\u00e7\u00e3o diferenciam um do outro). Criar sub-rotinas \u00e9 essencial para administrar a complexidade do software. N\u00e3o \u00e9 incomum que softwares tenham milhares, ou mesmo milh\u00f5es de linhas de c\u00f3digo. Se todo esse c\u00f3digo n\u00e3o for organizado em partes administr\u00e1veis e compreens\u00edveis, os programadores ter\u00e3o s\u00e9rias dificuldades para dar sequ\u00eancia ao projeto. O processo de criar sub-rotinas compreende, portanto, a divis\u00e3o de um grande problema em partes menores, como se fossem blocos, por meio dos quais a solu\u00e7\u00e3o final ser\u00e1 constru\u00edda. A esse processo chamamos de modulariza\u00e7\u00e3o , um conceito-chave em projetos de software. Al\u00e9m de tornar a complexidade administr\u00e1vel por seres humanos, a modulariza\u00e7\u00e3o permite reutilizar c\u00f3digo. Jamais esque\u00e7a desta palavra - reutilizar - pois ela \u00e9 o Santo Graal da programa\u00e7\u00e3o. Reutilizar significa reaproveitar c\u00f3digo funcional, testado e validado, o que implica diretamente na redu\u00e7\u00e3o do tempo e custos de desenvolvimento do projeto. Falando especificamente da linguagem C++, podemos afirmar categoricamente que nenhum programa existe sem ter, ao menos, uma fun\u00e7\u00e3o. Se neste momento voc\u00ea pensou na fun\u00e7\u00e3o main , parab\u00e9ns \ud83d\ude01 Uma fun\u00e7\u00e3o \u00e9 um conjunto de instru\u00e7\u00f5es agrupadas, comumente identificada por um nome, que s\u00e3o executadas sempre que uma opera\u00e7\u00e3o de invoca\u00e7\u00e3o est\u00e1 presente no c\u00f3digo. \u00c9 o meio que temos para representar a\u00e7\u00f5es e computa\u00e7\u00f5es em um programa , de modo que sempre que queremos fazer algo no c\u00f3digo para o qual \u00e9 poss\u00edvel atribuir um nome, a\u00ed estaremos face a uma nova fun\u00e7\u00e3o 1 . Nota Invocar uma fun\u00e7\u00e3o significa cham\u00e1-la pelo nome ou por seu endere\u00e7o de mem\u00f3ria no c\u00f3digo. Para criarmos fun\u00e7\u00f5es \u00e9 preciso conhecer as regras de sintaxe que a linguagem de programa\u00e7\u00e3o aplica. Falando do C++, a sintaxe do comando envolve: Tipo de retorno : Especifica no cabe\u00e7alho da fun\u00e7\u00e3o (sua assinatura) que tipo de valor ela retorna ao chamador. Qualquer tipo dispon\u00edvel pode ser retornado e, para os casos onde o retorno deve ser desconsiderado, utilizamos o tipo especial void . Identificador : Assim como vari\u00e1veis t\u00eam nomes, as fun\u00e7\u00f5es tamb\u00e9m. As mesmas regras de nomenclatura se aplicam. Argumentos formais (par\u00e2metros) : S\u00e3o vari\u00e1veis definidas no cabe\u00e7alho da fun\u00e7\u00e3o por meio das quais podemos passar valores espec\u00edficos a cada chamada. Ter par\u00e2metros \u00e9 algo opcional em uma fun\u00e7\u00e3o. Instru\u00e7\u00f5es : \u00c9 o que a fun\u00e7\u00e3o executa. Compreende seu corpo, sua l\u00f3gica de opera\u00e7\u00e3o interna. Retorno : Comando que finaliza a execu\u00e7\u00e3o da fun\u00e7\u00e3o e devolve ao chamador o resultado do processamento. Em C++, o retorno \u00e9 feito atrav\u00e9s do comando return . Toda fun\u00e7\u00e3o que indicar retornar um tipo diferente de void deve obrigatoriamente faz\u00ea-lo para todos os caminhos poss\u00edveis de finaliza\u00e7\u00e3o (ou gerar um erro). A exce\u00e7\u00e3o fica com a fun\u00e7\u00e3o main , que ao executar com sucesso todos os comandos automaticamente ir\u00e1 retornar 0 . Vamos utilizar como estudo de caso a pr\u00f3pria fun\u00e7\u00e3o main . Observe que come\u00e7amos pela tipo int , indicando que seu retorno \u00e9 um n\u00famero inteiro. Na sequ\u00eancia, temos main , o nome da fun\u00e7\u00e3o. Os par\u00e2metros s\u00e3o declarados no espa\u00e7o contido entre os par\u00eanteses () . Cada declara\u00e7\u00e3o de par\u00e2metro compreende seu tipo e nome, tal qual fazemos ao declarar vari\u00e1veis. Se houver necessidade de mais de um par\u00e2metro, devemos separ\u00e1-los com v\u00edrgula. Por fim, as instru\u00e7\u00f5es ficam contidas entre as chaves {} . C++ int main ( int argc , char * argv []) { /*instru\u00e7\u00f5es*/ } Sabemos que a fun\u00e7\u00e3o main \u00e9 obrigat\u00f3ria em qualquer programa escrito em C++. Caber\u00e1 a n\u00f3s, programadores, criamos as demais fun\u00e7\u00f5es para nossos programas. Na sequ\u00eancia, apresento alguns exemplos de fun\u00e7\u00f5es e coment\u00e1rios pertinentes. Retornando Valores \u00b6 Tipicamente criamos fun\u00e7\u00f5es que retornam algum valor ao chamador ( caller ). Sabemos que o tipo de retorno acompanha a declara\u00e7\u00e3o da fun\u00e7\u00e3o e que, por meio deste tipo, o compilador poder\u00e1 aceitar a chamada da fun\u00e7\u00e3o em qualquer contexto que permita presen\u00e7a daquele tipo de dado. No programa abaixo estamos utilizando uma fun\u00e7\u00e3o chamada ler_idade() . Perceba que o cabe\u00e7alho (assinatura) aparece antes da fun\u00e7\u00e3o main , enquanto que a implementa\u00e7\u00e3o est\u00e1 posta ap\u00f3s. Isso se faz necess\u00e1rio para atender um princ\u00edpio b\u00e1sico de programa\u00e7\u00e3o, que \u00e9: somente podemos fazer uso, em uma instru\u00e7\u00e3o, de estruturas j\u00e1 dispon\u00edveis naquele momento . Ou seja, precisamos orientar o compilador da exist\u00eancia de uma fun\u00e7\u00e3o chamada ler_idade() , que retorna valor inteiro, pois estamos chamando ela antes de propriamente implement\u00e1-la. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; int ler_idade (); int main (){ int idade1 , idade2 ; idade1 = ler_idade (); idade2 = ler_idade (); } int ler_idade (){ int idade ; while ( true ){ cout << \"Informe a idade [13,59]: \" ; cin >> idade ; if ( idade < 13 || idade > 59 ) cout << endl << \"Valor inv\u00e1lido\" << endl ; else return idade ; } } Nas linhas 9 e 10 temos a chamada para a fun\u00e7\u00e3o ler_idade() . Perceba que opera\u00e7\u00e3o de invoca\u00e7\u00e3o compreende indicar o nome e os argumentos entre () , quando existirem. Assim que a execu\u00e7\u00e3o do c\u00f3digo alcan\u00e7ar essa instru\u00e7\u00e3o, o fluxo de execu\u00e7\u00e3o \u00e9 desviado para a primeira linha da fun\u00e7\u00e3o, executando seu c\u00f3digo interno at\u00e9 que ela finalize. O valor retornado via return ser\u00e1 \"substitu\u00eddo\" no espa\u00e7o em que ocorreu a chamada. Logo, as vari\u00e1veis idade1 e idade2 ir\u00e3o receber a idade informada pelo usu\u00e1rio, adequadamente compreendida no intervalo \\(\\left[13,59\\right]\\) . Mas afinal, qual \u00e9 a vantagem de se utilizar a fun\u00e7\u00e3o ler_idade() ? Abstra\u00e7\u00e3o : Abstrair significa reduzir complexidade a partir da elabora\u00e7\u00e3o de um conceito de alto n\u00edvel sobre algo. Em nosso c\u00f3digo, estamos deixando a carga da fun\u00e7\u00e3o estabelecer e executar todas as regras de valida\u00e7\u00e3o e coleta de um valor de idade. Na perspectiva da instru\u00e7\u00e3o que chama a fun\u00e7\u00e3o, n\u00e3o h\u00e1 informa\u00e7\u00e3o sobre como a fun\u00e7\u00e3o opera, apenas que ela ir\u00e1 retornar um valor inteiro que representa uma idade. \u00c9 uma rela\u00e7\u00e3o de confian\u00e7a, em que delegamos a responsabilidade para a fun\u00e7\u00e3o e ficamos aguardando seu retorno. Ao fazer isso, n\u00e3o precisamos nos preocupar com todos os pequenos detalhes do c\u00f3digo, permitindo ter uma vis\u00e3o de mais alto n\u00edvel durante a codifica\u00e7\u00e3o. Reuso : Todos os locais do c\u00f3digo que demandam a leitura de uma idade far\u00e3o chamada \u00e0 fun\u00e7\u00e3o. Logo, n\u00e3o precisaremos repetir todo o c\u00f3digo para cada situa\u00e7\u00e3o em que uma idade for demandada. \u00danico ponto de altera\u00e7\u00e3o : Mudou o crit\u00e9rio para determinar uma idade v\u00e1lida? Sem problemas, basta alterar o c\u00f3digo da fun\u00e7\u00e3o que todos os locais que fazem uso dela ir\u00e3o utilizar a vers\u00e3o atualizada. Escreva apenas uma vez, use em todo lugar! Passando Argumentos \u00b6 Muitas vezes precisamos passar valores espec\u00edficos no momento em que a fun\u00e7\u00e3o \u00e9 chamada. Estes valores recebem o nome de argumentos . Os argumentos s\u00e3o utilizados para alimentar os par\u00e2metros da fun\u00e7\u00e3o, que s\u00e3o vari\u00e1veis que permitem \u00e0 fun\u00e7\u00e3o receber dados do mundo externo e utiliz\u00e1-los em sua execu\u00e7\u00e3o. Podemos passar argumentos de dois modos diferentes: por valor e por refer\u00eancia . Quando utilizamos a estrat\u00e9gia de passagem por valor , o par\u00e2metro receber\u00e1 uma c\u00f3pia do valor informado. Lembre-se que um par\u00e2metro \u00e9 uma vari\u00e1vel local da fun\u00e7\u00e3o, inicializada a cada chamada realizada 1 . A passagem por valor de argumentos gera uma c\u00f3pia, de modo que eventuais altera\u00e7\u00f5es realizadas pela fun\u00e7\u00e3o no par\u00e2metro correspondente n\u00e3o ter\u00e3o impacto externo. Para ilustrar este comportamento iremos utilizar um programa muito simples, composto por duas fun\u00e7\u00f5es: main e substitui . C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; void substitui ( int a ) { a = 7 ; } int main () { int a = 3 ; cout << a << endl ; substitui ( a ); cout << a << endl ; } A fun\u00e7\u00e3o substitui define um par\u00e2metro, chamado de a , para receber um valor inteiro. Na linha \\(14\\) , ela \u00e9 chamada passando-se para o par\u00e2metro a o argumento a . Mas espera a\u00ed: n\u00e3o \u00e9 o mesmo a ent\u00e3o? N\u00e3o, s\u00e3o posi\u00e7\u00f5es de mem\u00f3ria diferentes. Todo par\u00e2metro representa uma vari\u00e1vel local \u00e0 fun\u00e7\u00e3o, cujo escopo de visibilidade \u00e9 o corpo desta fun\u00e7\u00e3o. O fato de estarmos enviando um argumento, que \u00e9 uma vari\u00e1vel, com o mesmo nome representa uma simples coincid\u00eancia. Ent\u00e3o, se estamos falando de posi\u00e7\u00f5es de mem\u00f3ria diferentes, a atribui\u00e7\u00e3o realizada pela fun\u00e7\u00e3o na linha \\(7\\) n\u00e3o vai alterar o valor da vari\u00e1vel a declarada na fun\u00e7\u00e3o main . Deste modo, ambos os comandos cout ir\u00e3o escrever o valor \\(3\\) . Chamamos isso de passagem de argumento por c\u00f3pia ( call by value ). Agora vamos modificar nossa fun\u00e7\u00e3o substitui adicionando o operador & antes do nome do par\u00e2metro. Nosso programa em sua vers\u00e3o alterada seria: C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; void substitui ( int & a ) { a = 7 ; } int main () { int a = 3 ; cout << a << endl ; substitui ( a ); cout << a << endl ; } Estranhamente, o resultado desta vers\u00e3o do programa ser\u00e1 \\(3\\) para o primeiro comando cout e \\(7\\) para o segundo. Por que isso ocorre? \u00c9 que neste programa estamos utilizando passagem de argumento por refer\u00eancia ( call by reference ), ou seja, a fun\u00e7\u00e3o recebe o endere\u00e7o de mem\u00f3ria do argumento. Deste modo, as altera\u00e7\u00f5es realizadas dentro da fun\u00e7\u00e3o no valor do par\u00e2metro ser\u00e3o diretamente aplicadas \u00e0 vari\u00e1vel informada como argumento. Mas isso n\u00e3o pode gerar efeitos colaterais indesejados? Que benef\u00edcios h\u00e1 em se utilizar refer\u00eancias? Bem, o programador dever\u00e1 utilizar o recurso com prud\u00eancia. Nem todo par\u00e2metro deve ser by reference . O grande benef\u00edcio est\u00e1 possibilidade de compartilhar \u00e1reas de mem\u00f3ria, uma opera\u00e7\u00e3o muito mais r\u00e1pida se comparada a uma c\u00f3pia de valores. Imagine se precis\u00e1ssemos informar um vetor de \\(1000\\) posi\u00e7\u00f5es para um fun\u00e7\u00e3o e todos estes valores precisassem ser copiados para o par\u00e2metro? Logo, nesta perspectiva, qualquer array definido como par\u00e2metro ir\u00e1 receber uma refer\u00eancia de mem\u00f3ria e n\u00e3o uma c\u00f3pia de valor. Podemos verificar isso no programa a seguir, constru\u00eddo para ler uma matriz \\(M_{2 \\times 2}\\) e apresentar a m\u00e9dia aritm\u00e9tica dos valores lidos. C++ #include <iostream> #include <iomanip> #define LINHAS 2 #define COLUNAS 2 using namespace std ; void ler_dados_matriz ( int m [][ COLUNAS ]){ for ( int l = 0 ; l < LINHAS ; l ++ ){ for ( int c = 0 ; c < COLUNAS ; c ++ ){ cout << \"M[\" << l << \",\" << c << \"]: \" ; cin >> m [ l ][ c ]; } } } void imprimir_matriz ( int m [][ COLUNAS ]){ cout << \"M: \" << endl ; for ( int l = 0 ; l < LINHAS ; l ++ ){ cout << \"| \" ; for ( int c = 0 ; c < COLUNAS ; c ++ ){ cout << m [ l ][ c ] << \" \" ; } cout << \"|\" << endl ; } cout << endl ; } double calcular_media_matriz ( int m [][ COLUNAS ]){ double somatorio = 0 ; for ( int l = 0 ; l < LINHAS ; l ++ ) for ( int c = 0 ; c < COLUNAS ; c ++ ) somatorio += m [ l ][ c ]; return somatorio / ( LINHAS * COLUNAS ); } int main (){ int dados [ LINHAS ][ COLUNAS ] = {{ 0 },{ 0 }}; imprimir_matriz ( dados ); ler_dados_matriz ( dados ); imprimir_matriz ( dados ); double media = calcular_media_matriz ( dados ); cout << \"MEDIA: \" << setprecision ( 3 ) << fixed << media << endl ; } Bjarne Stroustrup. Programming: Principles and Practice Using C++ . Always learning. Addison Wesley, 2\u00ba edition, 2014. ISBN 9780321992789. URL: https://books.google.com.br/books?id=hxOpAwAAQBAJ . \u21a9 \u21a9","title":"Fun\u00e7\u00f5es"},{"location":"programacao/cpp/funcoes/#retornando-valores","text":"Tipicamente criamos fun\u00e7\u00f5es que retornam algum valor ao chamador ( caller ). Sabemos que o tipo de retorno acompanha a declara\u00e7\u00e3o da fun\u00e7\u00e3o e que, por meio deste tipo, o compilador poder\u00e1 aceitar a chamada da fun\u00e7\u00e3o em qualquer contexto que permita presen\u00e7a daquele tipo de dado. No programa abaixo estamos utilizando uma fun\u00e7\u00e3o chamada ler_idade() . Perceba que o cabe\u00e7alho (assinatura) aparece antes da fun\u00e7\u00e3o main , enquanto que a implementa\u00e7\u00e3o est\u00e1 posta ap\u00f3s. Isso se faz necess\u00e1rio para atender um princ\u00edpio b\u00e1sico de programa\u00e7\u00e3o, que \u00e9: somente podemos fazer uso, em uma instru\u00e7\u00e3o, de estruturas j\u00e1 dispon\u00edveis naquele momento . Ou seja, precisamos orientar o compilador da exist\u00eancia de uma fun\u00e7\u00e3o chamada ler_idade() , que retorna valor inteiro, pois estamos chamando ela antes de propriamente implement\u00e1-la. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #include <iostream> using namespace std ; int ler_idade (); int main (){ int idade1 , idade2 ; idade1 = ler_idade (); idade2 = ler_idade (); } int ler_idade (){ int idade ; while ( true ){ cout << \"Informe a idade [13,59]: \" ; cin >> idade ; if ( idade < 13 || idade > 59 ) cout << endl << \"Valor inv\u00e1lido\" << endl ; else return idade ; } } Nas linhas 9 e 10 temos a chamada para a fun\u00e7\u00e3o ler_idade() . Perceba que opera\u00e7\u00e3o de invoca\u00e7\u00e3o compreende indicar o nome e os argumentos entre () , quando existirem. Assim que a execu\u00e7\u00e3o do c\u00f3digo alcan\u00e7ar essa instru\u00e7\u00e3o, o fluxo de execu\u00e7\u00e3o \u00e9 desviado para a primeira linha da fun\u00e7\u00e3o, executando seu c\u00f3digo interno at\u00e9 que ela finalize. O valor retornado via return ser\u00e1 \"substitu\u00eddo\" no espa\u00e7o em que ocorreu a chamada. Logo, as vari\u00e1veis idade1 e idade2 ir\u00e3o receber a idade informada pelo usu\u00e1rio, adequadamente compreendida no intervalo \\(\\left[13,59\\right]\\) . Mas afinal, qual \u00e9 a vantagem de se utilizar a fun\u00e7\u00e3o ler_idade() ? Abstra\u00e7\u00e3o : Abstrair significa reduzir complexidade a partir da elabora\u00e7\u00e3o de um conceito de alto n\u00edvel sobre algo. Em nosso c\u00f3digo, estamos deixando a carga da fun\u00e7\u00e3o estabelecer e executar todas as regras de valida\u00e7\u00e3o e coleta de um valor de idade. Na perspectiva da instru\u00e7\u00e3o que chama a fun\u00e7\u00e3o, n\u00e3o h\u00e1 informa\u00e7\u00e3o sobre como a fun\u00e7\u00e3o opera, apenas que ela ir\u00e1 retornar um valor inteiro que representa uma idade. \u00c9 uma rela\u00e7\u00e3o de confian\u00e7a, em que delegamos a responsabilidade para a fun\u00e7\u00e3o e ficamos aguardando seu retorno. Ao fazer isso, n\u00e3o precisamos nos preocupar com todos os pequenos detalhes do c\u00f3digo, permitindo ter uma vis\u00e3o de mais alto n\u00edvel durante a codifica\u00e7\u00e3o. Reuso : Todos os locais do c\u00f3digo que demandam a leitura de uma idade far\u00e3o chamada \u00e0 fun\u00e7\u00e3o. Logo, n\u00e3o precisaremos repetir todo o c\u00f3digo para cada situa\u00e7\u00e3o em que uma idade for demandada. \u00danico ponto de altera\u00e7\u00e3o : Mudou o crit\u00e9rio para determinar uma idade v\u00e1lida? Sem problemas, basta alterar o c\u00f3digo da fun\u00e7\u00e3o que todos os locais que fazem uso dela ir\u00e3o utilizar a vers\u00e3o atualizada. Escreva apenas uma vez, use em todo lugar!","title":"Retornando Valores"},{"location":"programacao/cpp/funcoes/#passando-argumentos","text":"Muitas vezes precisamos passar valores espec\u00edficos no momento em que a fun\u00e7\u00e3o \u00e9 chamada. Estes valores recebem o nome de argumentos . Os argumentos s\u00e3o utilizados para alimentar os par\u00e2metros da fun\u00e7\u00e3o, que s\u00e3o vari\u00e1veis que permitem \u00e0 fun\u00e7\u00e3o receber dados do mundo externo e utiliz\u00e1-los em sua execu\u00e7\u00e3o. Podemos passar argumentos de dois modos diferentes: por valor e por refer\u00eancia . Quando utilizamos a estrat\u00e9gia de passagem por valor , o par\u00e2metro receber\u00e1 uma c\u00f3pia do valor informado. Lembre-se que um par\u00e2metro \u00e9 uma vari\u00e1vel local da fun\u00e7\u00e3o, inicializada a cada chamada realizada 1 . A passagem por valor de argumentos gera uma c\u00f3pia, de modo que eventuais altera\u00e7\u00f5es realizadas pela fun\u00e7\u00e3o no par\u00e2metro correspondente n\u00e3o ter\u00e3o impacto externo. Para ilustrar este comportamento iremos utilizar um programa muito simples, composto por duas fun\u00e7\u00f5es: main e substitui . C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; void substitui ( int a ) { a = 7 ; } int main () { int a = 3 ; cout << a << endl ; substitui ( a ); cout << a << endl ; } A fun\u00e7\u00e3o substitui define um par\u00e2metro, chamado de a , para receber um valor inteiro. Na linha \\(14\\) , ela \u00e9 chamada passando-se para o par\u00e2metro a o argumento a . Mas espera a\u00ed: n\u00e3o \u00e9 o mesmo a ent\u00e3o? N\u00e3o, s\u00e3o posi\u00e7\u00f5es de mem\u00f3ria diferentes. Todo par\u00e2metro representa uma vari\u00e1vel local \u00e0 fun\u00e7\u00e3o, cujo escopo de visibilidade \u00e9 o corpo desta fun\u00e7\u00e3o. O fato de estarmos enviando um argumento, que \u00e9 uma vari\u00e1vel, com o mesmo nome representa uma simples coincid\u00eancia. Ent\u00e3o, se estamos falando de posi\u00e7\u00f5es de mem\u00f3ria diferentes, a atribui\u00e7\u00e3o realizada pela fun\u00e7\u00e3o na linha \\(7\\) n\u00e3o vai alterar o valor da vari\u00e1vel a declarada na fun\u00e7\u00e3o main . Deste modo, ambos os comandos cout ir\u00e3o escrever o valor \\(3\\) . Chamamos isso de passagem de argumento por c\u00f3pia ( call by value ). Agora vamos modificar nossa fun\u00e7\u00e3o substitui adicionando o operador & antes do nome do par\u00e2metro. Nosso programa em sua vers\u00e3o alterada seria: C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> using namespace std ; void substitui ( int & a ) { a = 7 ; } int main () { int a = 3 ; cout << a << endl ; substitui ( a ); cout << a << endl ; } Estranhamente, o resultado desta vers\u00e3o do programa ser\u00e1 \\(3\\) para o primeiro comando cout e \\(7\\) para o segundo. Por que isso ocorre? \u00c9 que neste programa estamos utilizando passagem de argumento por refer\u00eancia ( call by reference ), ou seja, a fun\u00e7\u00e3o recebe o endere\u00e7o de mem\u00f3ria do argumento. Deste modo, as altera\u00e7\u00f5es realizadas dentro da fun\u00e7\u00e3o no valor do par\u00e2metro ser\u00e3o diretamente aplicadas \u00e0 vari\u00e1vel informada como argumento. Mas isso n\u00e3o pode gerar efeitos colaterais indesejados? Que benef\u00edcios h\u00e1 em se utilizar refer\u00eancias? Bem, o programador dever\u00e1 utilizar o recurso com prud\u00eancia. Nem todo par\u00e2metro deve ser by reference . O grande benef\u00edcio est\u00e1 possibilidade de compartilhar \u00e1reas de mem\u00f3ria, uma opera\u00e7\u00e3o muito mais r\u00e1pida se comparada a uma c\u00f3pia de valores. Imagine se precis\u00e1ssemos informar um vetor de \\(1000\\) posi\u00e7\u00f5es para um fun\u00e7\u00e3o e todos estes valores precisassem ser copiados para o par\u00e2metro? Logo, nesta perspectiva, qualquer array definido como par\u00e2metro ir\u00e1 receber uma refer\u00eancia de mem\u00f3ria e n\u00e3o uma c\u00f3pia de valor. Podemos verificar isso no programa a seguir, constru\u00eddo para ler uma matriz \\(M_{2 \\times 2}\\) e apresentar a m\u00e9dia aritm\u00e9tica dos valores lidos. C++ #include <iostream> #include <iomanip> #define LINHAS 2 #define COLUNAS 2 using namespace std ; void ler_dados_matriz ( int m [][ COLUNAS ]){ for ( int l = 0 ; l < LINHAS ; l ++ ){ for ( int c = 0 ; c < COLUNAS ; c ++ ){ cout << \"M[\" << l << \",\" << c << \"]: \" ; cin >> m [ l ][ c ]; } } } void imprimir_matriz ( int m [][ COLUNAS ]){ cout << \"M: \" << endl ; for ( int l = 0 ; l < LINHAS ; l ++ ){ cout << \"| \" ; for ( int c = 0 ; c < COLUNAS ; c ++ ){ cout << m [ l ][ c ] << \" \" ; } cout << \"|\" << endl ; } cout << endl ; } double calcular_media_matriz ( int m [][ COLUNAS ]){ double somatorio = 0 ; for ( int l = 0 ; l < LINHAS ; l ++ ) for ( int c = 0 ; c < COLUNAS ; c ++ ) somatorio += m [ l ][ c ]; return somatorio / ( LINHAS * COLUNAS ); } int main (){ int dados [ LINHAS ][ COLUNAS ] = {{ 0 },{ 0 }}; imprimir_matriz ( dados ); ler_dados_matriz ( dados ); imprimir_matriz ( dados ); double media = calcular_media_matriz ( dados ); cout << \"MEDIA: \" << setprecision ( 3 ) << fixed << media << endl ; } Bjarne Stroustrup. Programming: Principles and Practice Using C++ . Always learning. Addison Wesley, 2\u00ba edition, 2014. ISBN 9780321992789. URL: https://books.google.com.br/books?id=hxOpAwAAQBAJ . \u21a9 \u21a9","title":"Passando Argumentos"},{"location":"programacao/cpp/identificadores/","text":"Codificar um software compreende, basicamente, modificar estados conforme sequ\u00eancia e regras previamente definidas. Neste processo, dar nomes \u00e0s estruturas e, por vezes, inicializ\u00e1-las com valores \u00e9 tarefa trivial. Por ser praticamente indissoci\u00e1vel da pr\u00e1tica de programa\u00e7\u00e3o, toda linguagem estabelece regras para nomenclatura de identificadores (nome que o programador atribui \u00e0s estruturas) e para defini\u00e7\u00e3o de literais (valores fixos). Na sequ\u00eancia vamos abordar como vari\u00e1veis e literais s\u00e3o definidos na linguagem C++. Vari\u00e1veis \u00b6 Um programa \u00e9 composto por instru\u00e7\u00f5es e dados , ambos armazenados na mem\u00f3ria RAM do computador. Enquanto que instru\u00e7\u00f5es, em sua maioria, representam que tipo de manipula\u00e7\u00e3o o processador deve executar com os dados (somas, subtra\u00e7\u00f5es, multiplica\u00e7\u00f5es, etc.), as vari\u00e1veis representam os espa\u00e7os de armazenamento de dados do programa. Os dados s\u00e3o armazenados em vari\u00e1veis , que nada mais s\u00e3o que espa\u00e7os de mem\u00f3ria RAM reservados para tal finalidade. Precisamos lembrar que vari\u00e1veis apresentam alguma propriedades importantes: Nome : O nome da vari\u00e1vel \u00e9 a identifica\u00e7\u00e3o que o programador atribui \u00e0 \u00e1rea de mem\u00f3ria. O nome deve ser suficientemente claro para indicar o significado dos dados nela armazenados. A nomenclatura de vari\u00e1veis deve respeitar as restri\u00e7\u00f5es impostas a identificadores da linguagem, bem como padr\u00f5es de legibilidade de c\u00f3digo que a boa pr\u00e1tica recomenda. Tamb\u00e9m h\u00e1 diferen\u00e7a entre caracteres mai\u00fasculos e min\u00fasculos. Tipo : Vari\u00e1veis, em linguagens fortemente tipadas, devem indicar qual \u00e9 a natureza dos dados que o programador poder\u00e1 nelas armazenar. O tipo representa uma restri\u00e7\u00e3o, limitando o conjunto de valores aceitos. A linguagem C++ define um conjunto de tipos b\u00e1sicos. Sugiro a leitura deste tutorial para maiores detalhes. No c\u00f3digo apresentado ao final deste tutorial, voc\u00ea ir\u00e1 observar diversas declara\u00e7\u00f5es de vari\u00e1veis. A t\u00edtulo de exemplo, observe o trecho de c\u00f3digo que segue. Nele s\u00e3o declaradas tr\u00eas vari\u00e1veis, a saber, contador , preco , lucro_liquido . Estes s\u00e3o os nomes das vari\u00e1veis. J\u00e1 int , float e double representam o tipo de dado. No caso da vari\u00e1vel contador , estamos fazendo a declara\u00e7\u00e3o e a inicializa\u00e7\u00e3o em uma \u00fanica instru\u00e7\u00e3o. Assim, t\u00e3o logo criada, a vari\u00e1vel receber\u00e1 o valor 0 . int contador = 0 ; float preco ; double lucro_liquido ; Literais \u00b6 Literal \u00e9 todo valor informado de forma fixa no c\u00f3digo. \u00c9 comum utilizar a express\u00e3o hard code para descrever a opera\u00e7\u00e3o. Normalmente os literais s\u00e3o utilizados para iniciar estruturas do programa, ou seja, definir seu valor inicial. Os literais podem representar n\u00fameros inteiros, n\u00fameros reais, valores booleanos, caracteres ou sequ\u00eancia de caracteres. Para cada caso existem particularidades, as quais iremos tratar a seguir. Literais para n\u00fameros inteiros \u00b6 N\u00fameros inteiros s\u00e3o n\u00fameros n\u00e3o fracionais, ou seja, n\u00e3o apresentam valores ap\u00f3s a v\u00edrgula. Sua representa\u00e7\u00e3o se d\u00e1, normalmente, em base decimal. Contudo, o C++ aceita tamb\u00e9m n\u00fameros representados em base octal , hexadecimal e bin\u00e1ria . Quando em decimal , um n\u00famero pode ser expresso utilizando somente caracteres de 0 a 9. A representa\u00e7\u00e3o decimal \u00e9 a mais confort\u00e1vel na perspectiva do programador porque \u00e9 o sistema de representa\u00e7\u00e3o num\u00e9rico do nosso dia-a-dia. Literais inteiros expressos em decimal podem utilizar aspa simples para demarcar milhares. Tal recurso conforme apenas maior legibilidade ao c\u00f3digo-fonte. Observe o trecho de c\u00f3digo a seguir: var_int = 24'000 ; //base decimal A presenta\u00e7\u00e3o octal , por sua vez, considera apenas caracteres de 0 a 7. Para informar literais octais em um programa C++, o programador deve prefixar o n\u00famero com 0. Observe o c\u00f3digo abaixo: var_octal = 071 ; //base octal Um m\u00e9todo simples para convers\u00e3o de octal para decimal \u00e9 utilizar uma tabela de pot\u00eancias de base 8 . Isso porque assim como decimal, o octal \u00e9 um sistema num\u00e9rico posicional. Observe: 8 3 8 2 8 1 8 0 7 1 Considerando a tabela de convers\u00e3o, o valor octal 71 equivale a 57 em decimal, resultante de 8*7 + 1 . No caso da representa\u00e7\u00e3o hexadecimal , os caracteres aceitos s\u00e3o de 0 a 9 e de A a F . Todo literal hexadecimal deve ser prefixado com 0X ou 0x . A base hexadecimal \u00e9 muito utilizada para expressar conte\u00fado de mem\u00f3ria do computador, pois al\u00e9m de reduz a quantidade de caracteres necess\u00e1rios, o processo de convers\u00e3o bin\u00e1rio-hexadecimal \u00e9 bastante simples. Observe o trecho de c\u00f3digo a seguir: var_hex = 0xF2 ; //base hexadecimal Os caracteres de A a F do sistema hexadecimal equivalem a 10 , 11 , 12 , 13 , 14 e 15 no sistema decimal, respectivamente. Desta forma, para converter de hexadecimal para decimal, podemos utilizar a tabela de pot\u00eancias, agora com base 16 . 16 3 16 2 16 1 16 0 F 2 Em nosso exemplo, F2 equivale ao valor 242 em decimal, visto que \u00e9 o resultado da express\u00e3o 15*16 + 2 . E finalmente chegamos a representa\u00e7\u00e3o bin\u00e1ria , natural da m\u00e1quina. Literais inteiros expressos em bin\u00e1rio s\u00e3o sequ\u00eancias de 0s e 1s prefixados com 0b ou 0B . Literais para n\u00fameros de ponto flutuante \u00b6 Ponto flutuante \u00e9 o nome dado para um n\u00famero real representado digitalmente no computador. Quando informamos um literal que expressa um n\u00famero real na programa\u00e7\u00e3o, devemos utilizar o caractere . para separar a parte decimal da inteira. Tamb\u00e9m \u00e9 poss\u00edvel utilizar aspas simples para separar os milhares. N\u00fameros de ponto flutuante podem ser armazenados com precis\u00e3o simples (identificados com o tipo float ) ou com precis\u00e3o dupla (tipo double ). N\u00fameros de precis\u00e3o simples utilizam 32 bits de espa\u00e7o de mem\u00f3ria, enquanto n\u00fameros de precis\u00e3o dupla utilizam 64 bits. Outra importante diferen\u00e7a refere-se a quantidade de casas decimais armazenadas: enquanto um tipo float armazena at\u00e9 7 casas decimais, um double armazena 15 casas. float var_float ; double var_double ; var_float = 1'234.34 ; var_double = 345 ; Literais booleanos \u00b6 \u00c1lgebra booleana \u00e9 um formalismo matem\u00e1tico utilizado na computa\u00e7\u00e3o para implementar testes l\u00f3gicos. Na \u00e1lgebra booleana temos dois estados poss\u00edveis para um proposi\u00e7\u00e3o l\u00f3gica: verdadeiro e falso . No C++, o estado verdadeiro \u00e9 representado pelo literal true (ou pelo literal inteiro 1 ). J\u00e1 o estado falso \u00e9 representado pelo literal false (ou pelo literal inteiro 0 ). Observe o exemplo: bool var_true , var_false ; var_true = true ; var_false = false ; var_true = 1 ; var_false = 0 ; Literais para caracteres \u00b6 Caracteres s\u00e3o os s\u00edmbolos do alfabeto, pontua\u00e7\u00e3o, entre outros. Nem todo caractere tem representa\u00e7\u00e3o gr\u00e1fica (quebra de linha e fim de arquivo, por exemplo). Para representar caracteres computacionalmente, pode-se utilizar 1 ou 2 bytes. O padr\u00e3o Unicode \u00e9 a norma atual para representa\u00e7\u00e3o de caracteres de forma universal, independentemente de plataforma, programa, linguagem ou mesmo idioma. O padr\u00e3o Unicode utiliza 2 bytes para representar o c\u00f3digo num\u00e9rico de cada um dos 137,929 caracteres existentes ( Vers\u00e3o 12 ) Em C++, os literais de caracteres s\u00e3o representados envolvidos por aspas simples. Observe o exemplo: char var_char ; var_char = 'c' ; var_char = 'B' ; Literais para strings \u00b6 Strings s\u00e3o sequ\u00eancias de caracteres, ou simplesmente, a forma de expressar texto na programa\u00e7\u00e3o. Literais s\u00e3o definidos no C++ por meio de aspas duplas, conforme demonstra o exemplo. string var_string ; var_string = \"Ol\u00e1, isso \u00e9 um texto\" ; Um pouco de c\u00f3digo \u00b6 Observe o c\u00f3digo-fonte do programa a seguir. Perceba que nele s\u00e3o declaradas vari\u00e1veis cuja inicializa\u00e7\u00e3o faz uso dos literais que estudamos anteriormente.","title":"Identificadores"},{"location":"programacao/cpp/identificadores/#variaveis","text":"Um programa \u00e9 composto por instru\u00e7\u00f5es e dados , ambos armazenados na mem\u00f3ria RAM do computador. Enquanto que instru\u00e7\u00f5es, em sua maioria, representam que tipo de manipula\u00e7\u00e3o o processador deve executar com os dados (somas, subtra\u00e7\u00f5es, multiplica\u00e7\u00f5es, etc.), as vari\u00e1veis representam os espa\u00e7os de armazenamento de dados do programa. Os dados s\u00e3o armazenados em vari\u00e1veis , que nada mais s\u00e3o que espa\u00e7os de mem\u00f3ria RAM reservados para tal finalidade. Precisamos lembrar que vari\u00e1veis apresentam alguma propriedades importantes: Nome : O nome da vari\u00e1vel \u00e9 a identifica\u00e7\u00e3o que o programador atribui \u00e0 \u00e1rea de mem\u00f3ria. O nome deve ser suficientemente claro para indicar o significado dos dados nela armazenados. A nomenclatura de vari\u00e1veis deve respeitar as restri\u00e7\u00f5es impostas a identificadores da linguagem, bem como padr\u00f5es de legibilidade de c\u00f3digo que a boa pr\u00e1tica recomenda. Tamb\u00e9m h\u00e1 diferen\u00e7a entre caracteres mai\u00fasculos e min\u00fasculos. Tipo : Vari\u00e1veis, em linguagens fortemente tipadas, devem indicar qual \u00e9 a natureza dos dados que o programador poder\u00e1 nelas armazenar. O tipo representa uma restri\u00e7\u00e3o, limitando o conjunto de valores aceitos. A linguagem C++ define um conjunto de tipos b\u00e1sicos. Sugiro a leitura deste tutorial para maiores detalhes. No c\u00f3digo apresentado ao final deste tutorial, voc\u00ea ir\u00e1 observar diversas declara\u00e7\u00f5es de vari\u00e1veis. A t\u00edtulo de exemplo, observe o trecho de c\u00f3digo que segue. Nele s\u00e3o declaradas tr\u00eas vari\u00e1veis, a saber, contador , preco , lucro_liquido . Estes s\u00e3o os nomes das vari\u00e1veis. J\u00e1 int , float e double representam o tipo de dado. No caso da vari\u00e1vel contador , estamos fazendo a declara\u00e7\u00e3o e a inicializa\u00e7\u00e3o em uma \u00fanica instru\u00e7\u00e3o. Assim, t\u00e3o logo criada, a vari\u00e1vel receber\u00e1 o valor 0 . int contador = 0 ; float preco ; double lucro_liquido ;","title":"Vari\u00e1veis"},{"location":"programacao/cpp/identificadores/#literais","text":"Literal \u00e9 todo valor informado de forma fixa no c\u00f3digo. \u00c9 comum utilizar a express\u00e3o hard code para descrever a opera\u00e7\u00e3o. Normalmente os literais s\u00e3o utilizados para iniciar estruturas do programa, ou seja, definir seu valor inicial. Os literais podem representar n\u00fameros inteiros, n\u00fameros reais, valores booleanos, caracteres ou sequ\u00eancia de caracteres. Para cada caso existem particularidades, as quais iremos tratar a seguir.","title":"Literais"},{"location":"programacao/cpp/identificadores/#literais-para-numeros-inteiros","text":"N\u00fameros inteiros s\u00e3o n\u00fameros n\u00e3o fracionais, ou seja, n\u00e3o apresentam valores ap\u00f3s a v\u00edrgula. Sua representa\u00e7\u00e3o se d\u00e1, normalmente, em base decimal. Contudo, o C++ aceita tamb\u00e9m n\u00fameros representados em base octal , hexadecimal e bin\u00e1ria . Quando em decimal , um n\u00famero pode ser expresso utilizando somente caracteres de 0 a 9. A representa\u00e7\u00e3o decimal \u00e9 a mais confort\u00e1vel na perspectiva do programador porque \u00e9 o sistema de representa\u00e7\u00e3o num\u00e9rico do nosso dia-a-dia. Literais inteiros expressos em decimal podem utilizar aspa simples para demarcar milhares. Tal recurso conforme apenas maior legibilidade ao c\u00f3digo-fonte. Observe o trecho de c\u00f3digo a seguir: var_int = 24'000 ; //base decimal A presenta\u00e7\u00e3o octal , por sua vez, considera apenas caracteres de 0 a 7. Para informar literais octais em um programa C++, o programador deve prefixar o n\u00famero com 0. Observe o c\u00f3digo abaixo: var_octal = 071 ; //base octal Um m\u00e9todo simples para convers\u00e3o de octal para decimal \u00e9 utilizar uma tabela de pot\u00eancias de base 8 . Isso porque assim como decimal, o octal \u00e9 um sistema num\u00e9rico posicional. Observe: 8 3 8 2 8 1 8 0 7 1 Considerando a tabela de convers\u00e3o, o valor octal 71 equivale a 57 em decimal, resultante de 8*7 + 1 . No caso da representa\u00e7\u00e3o hexadecimal , os caracteres aceitos s\u00e3o de 0 a 9 e de A a F . Todo literal hexadecimal deve ser prefixado com 0X ou 0x . A base hexadecimal \u00e9 muito utilizada para expressar conte\u00fado de mem\u00f3ria do computador, pois al\u00e9m de reduz a quantidade de caracteres necess\u00e1rios, o processo de convers\u00e3o bin\u00e1rio-hexadecimal \u00e9 bastante simples. Observe o trecho de c\u00f3digo a seguir: var_hex = 0xF2 ; //base hexadecimal Os caracteres de A a F do sistema hexadecimal equivalem a 10 , 11 , 12 , 13 , 14 e 15 no sistema decimal, respectivamente. Desta forma, para converter de hexadecimal para decimal, podemos utilizar a tabela de pot\u00eancias, agora com base 16 . 16 3 16 2 16 1 16 0 F 2 Em nosso exemplo, F2 equivale ao valor 242 em decimal, visto que \u00e9 o resultado da express\u00e3o 15*16 + 2 . E finalmente chegamos a representa\u00e7\u00e3o bin\u00e1ria , natural da m\u00e1quina. Literais inteiros expressos em bin\u00e1rio s\u00e3o sequ\u00eancias de 0s e 1s prefixados com 0b ou 0B .","title":"Literais para n\u00fameros inteiros"},{"location":"programacao/cpp/identificadores/#literais-para-numeros-de-ponto-flutuante","text":"Ponto flutuante \u00e9 o nome dado para um n\u00famero real representado digitalmente no computador. Quando informamos um literal que expressa um n\u00famero real na programa\u00e7\u00e3o, devemos utilizar o caractere . para separar a parte decimal da inteira. Tamb\u00e9m \u00e9 poss\u00edvel utilizar aspas simples para separar os milhares. N\u00fameros de ponto flutuante podem ser armazenados com precis\u00e3o simples (identificados com o tipo float ) ou com precis\u00e3o dupla (tipo double ). N\u00fameros de precis\u00e3o simples utilizam 32 bits de espa\u00e7o de mem\u00f3ria, enquanto n\u00fameros de precis\u00e3o dupla utilizam 64 bits. Outra importante diferen\u00e7a refere-se a quantidade de casas decimais armazenadas: enquanto um tipo float armazena at\u00e9 7 casas decimais, um double armazena 15 casas. float var_float ; double var_double ; var_float = 1'234.34 ; var_double = 345 ;","title":"Literais para n\u00fameros de ponto flutuante"},{"location":"programacao/cpp/identificadores/#literais-booleanos","text":"\u00c1lgebra booleana \u00e9 um formalismo matem\u00e1tico utilizado na computa\u00e7\u00e3o para implementar testes l\u00f3gicos. Na \u00e1lgebra booleana temos dois estados poss\u00edveis para um proposi\u00e7\u00e3o l\u00f3gica: verdadeiro e falso . No C++, o estado verdadeiro \u00e9 representado pelo literal true (ou pelo literal inteiro 1 ). J\u00e1 o estado falso \u00e9 representado pelo literal false (ou pelo literal inteiro 0 ). Observe o exemplo: bool var_true , var_false ; var_true = true ; var_false = false ; var_true = 1 ; var_false = 0 ;","title":"Literais booleanos"},{"location":"programacao/cpp/identificadores/#literais-para-caracteres","text":"Caracteres s\u00e3o os s\u00edmbolos do alfabeto, pontua\u00e7\u00e3o, entre outros. Nem todo caractere tem representa\u00e7\u00e3o gr\u00e1fica (quebra de linha e fim de arquivo, por exemplo). Para representar caracteres computacionalmente, pode-se utilizar 1 ou 2 bytes. O padr\u00e3o Unicode \u00e9 a norma atual para representa\u00e7\u00e3o de caracteres de forma universal, independentemente de plataforma, programa, linguagem ou mesmo idioma. O padr\u00e3o Unicode utiliza 2 bytes para representar o c\u00f3digo num\u00e9rico de cada um dos 137,929 caracteres existentes ( Vers\u00e3o 12 ) Em C++, os literais de caracteres s\u00e3o representados envolvidos por aspas simples. Observe o exemplo: char var_char ; var_char = 'c' ; var_char = 'B' ;","title":"Literais para caracteres"},{"location":"programacao/cpp/identificadores/#literais-para-strings","text":"Strings s\u00e3o sequ\u00eancias de caracteres, ou simplesmente, a forma de expressar texto na programa\u00e7\u00e3o. Literais s\u00e3o definidos no C++ por meio de aspas duplas, conforme demonstra o exemplo. string var_string ; var_string = \"Ol\u00e1, isso \u00e9 um texto\" ;","title":"Literais para strings"},{"location":"programacao/cpp/identificadores/#um-pouco-de-codigo","text":"Observe o c\u00f3digo-fonte do programa a seguir. Perceba que nele s\u00e3o declaradas vari\u00e1veis cuja inicializa\u00e7\u00e3o faz uso dos literais que estudamos anteriormente.","title":"Um pouco de c\u00f3digo"},{"location":"programacao/cpp/io/","text":"Programas de computador s\u00e3o criados basicamente para processar dados. Espera-se, portanto, que hajam meios do programa receber tais dados e devolver os resultados do processamento. Um destes meios s\u00e3o os consoles , ou seja, janelas do sistema operacional que permitem apenas comandos na forma de texto. Outra forma t\u00edpica de coletar e apresentar dados s\u00e3o por interfaces gr\u00e1ficas baseadas em janelas. De qualquer modo, em todos os casos, estamos falando de opera\u00e7\u00f5es de input/output (tamb\u00e9m conhecidas como i/o ). Neste artigo iremos explorar o processo de i/o em console do C++ por meio da bibliote\u00e7a iostream . Cin e cout \u00b6 Em C++ utilizamos o objeto cin para ler valores do teclado, enquanto que utilizamos cout para imprimir valores em tela. Vamos come\u00e7ar nosso estudo pela entrada de dados. Para lermos informa\u00e7\u00f5es do teclado precisamos informar ao objeto cin a vari\u00e1vel de destino. Deste modo, o valor informado ser\u00e1 transferido (registrado) na vari\u00e1vel para posteriormente ser utilizado. Neste processo, podemos informar uma ou mais vari\u00e1veis na mesma instru\u00e7\u00e3o, logo ap\u00f3s o opera\u00e7\u00e3o de extra\u00e7\u00e3o >> . Aten\u00e7\u00e3o Toda vari\u00e1vel no C++, para ser utilizada, deve obrigatoriamente ter sido declarada em instru\u00e7\u00f5es anteriores. Somente podemos utilizar aquilo que j\u00e1 foi \"criado\". Supondo que quis\u00e9ssemos ler o pre\u00e7o de determinado produto do supermercado para uma vari\u00e1vel de nosso programa, primeiro dever\u00edamos realizar a declara\u00e7\u00e3o da mesma e, ap\u00f3s, a leitura. Considerando que pre\u00e7o refere-se a um conceito num\u00e9rico com possibilidade de casas decimais, devemos utilizar, na declara\u00e7\u00e3o, tipos de dados de ponto flutuante, como float ou double . Logo, de forma bem resumida, ter\u00edamos no m\u00ednimo duas etapas em nosso programa relacionadas a este contexto: Declara\u00e7\u00e3o da vari\u00e1vel: float preco_produto; Leitura de valor de produto do console: cin >> preco_produto; Outro aspecto importante \u00e9 que as duas instru\u00e7\u00f5es acima n\u00e3o podem ser invertidas, ou seja, a declara\u00e7\u00e3o deve ocorrer obrigatoriamente em linhas anteriores ao uso da vari\u00e1vel. Mas voc\u00ea h\u00e1 de concordar comigo que simplesmente ficar aguardando o usu\u00e1rio informar um valor pelo teclado, sem inform\u00e1-lo do que o programa espera receber n\u00e3o parece ser adequado. O correto \u00e9 apresentar mensagens para, posteriormente, aguardar o valor. Para esta finalidade precisamos recorrer ao objeto cout . Voltando ao exemplo do pre\u00e7o do produto, seria mais conveniente realizar a seguinte sequ\u00eancia de instru\u00e7\u00f5es: Declara\u00e7\u00e3o da vari\u00e1vel: float preco_produto; Apresentar mensagem em tela: cout << \"Informe o valor do produto:\" Leitura de valor do produto do console: cin >> preco_produto; Aten\u00e7\u00e3o Percebeu que o operador que acompanha o cout \u00e9 oposto em sentido ao do cin ? Pois \u00e9, enquanto o operador de extra\u00e7\u00e3o >> \u00e9 utilizado no objeto cin , o do cout chama-se operador de inser\u00e7\u00e3o e se op\u00f5em em sentido, apontando para a esquerda << . Estudo de caso \u00b6 Observe nosso programa exemplo abaixo. Tenha especial aten\u00e7\u00e3o aos tipos de dado utilizados na declara\u00e7\u00e3o das vari\u00e1veis e aos usos dos objetos de entrada e sa\u00edda. Execute o c\u00f3digo com especial aten\u00e7\u00e3o \u00e0s mensagens exibidas em tela, buscando relacionar com a instru\u00e7\u00e3o que as gera. Exemplo #include <iostream> using namespace std ; int main () { int ano_nascimento ; float peso ; string nome ; cout << \"Informe seu nome: \" ; cin >> nome ; cout << \"Informe seu peso: \" ; cin >> peso ; cout << \"Informe seu ano de nascimento: \" ; cin >> ano_nascimento ; cout << endl << nome << \", nascido em \" << ano_nascimento << \" tem peso igual a \" << peso << endl ; } Formatando a sa\u00edda de dados \u00b6 A apresenta\u00e7\u00e3o das informa\u00e7\u00f5es ao usu\u00e1rio \u00e9 muito importante, afinal estamos falado de tornar a experi\u00eancia de uso do software o mais agrad\u00e1vel poss\u00edvel. Na intera\u00e7\u00e3o via console, podemos trabalhar a sa\u00edda com aux\u00edlio de recursos da biblioteca iomanip . O primeiro passo para utilizar a biblioteca \u00e9 inclu\u00ed-la no programa atrav\u00e9s da diretiva #include . Feito isso, temos acesso aos seguintes recursos: setfill : permite definir o caractere utilizado para preencher espa\u00e7os vazios. setw : especifica o n\u00famero de colunas reservadas para impress\u00e3o do valor que segue. left : alinhamento da sa\u00edda em tela \u00e0 esquerda. right : alinhamento da sa\u00edda em tela \u00e0 direita. setprecision : configura quantas casas decimais ser\u00e3o impressos na sa\u00edda de n\u00fameros de ponto flutuante. setiosflags : ativa flags do mecanismo de io, como o tipo de representa\u00e7\u00e3o num\u00e9rica utilizada na sa\u00edda, por exemplo. Vejamos o exemplo a seguir: Exemplo #include <iomanip> using namespace std ; int main () { float value = 0.635987 ; double phi = 1.61803398874989484820 ; string hello = \"hello\" ; /* fixed: expressa um n\u00famero de ponto flutuante com uma quantidade espec\u00edfica de d\u00edgitos ap\u00f3s ou antes da v\u00edrgula setprecision(): m\u00e9todo que especifica o n\u00famero de casas decimais ap\u00f3s a v\u00edrgula */ cout << fixed << setprecision ( 4 ); cout << hello << \" \" << value << endl ; /* setiosflags(ios::right): alinhamento do texto \u00e0 direita setw(50): reserva 50 caracteres de espa\u00e7o em tela para a sa\u00edda do pr\u00f3ximo valor em tela */ cout << setiosflags ( ios :: right ) << setw ( 50 ); cout << hello << \" h\" << value << endl ; cout << setw ( 30 ) << setprecision ( 12 ); cout << phi << endl ; return 0 ; }","title":"Entrada e Sa\u00edda"},{"location":"programacao/cpp/io/#cin-e-cout","text":"Em C++ utilizamos o objeto cin para ler valores do teclado, enquanto que utilizamos cout para imprimir valores em tela. Vamos come\u00e7ar nosso estudo pela entrada de dados. Para lermos informa\u00e7\u00f5es do teclado precisamos informar ao objeto cin a vari\u00e1vel de destino. Deste modo, o valor informado ser\u00e1 transferido (registrado) na vari\u00e1vel para posteriormente ser utilizado. Neste processo, podemos informar uma ou mais vari\u00e1veis na mesma instru\u00e7\u00e3o, logo ap\u00f3s o opera\u00e7\u00e3o de extra\u00e7\u00e3o >> . Aten\u00e7\u00e3o Toda vari\u00e1vel no C++, para ser utilizada, deve obrigatoriamente ter sido declarada em instru\u00e7\u00f5es anteriores. Somente podemos utilizar aquilo que j\u00e1 foi \"criado\". Supondo que quis\u00e9ssemos ler o pre\u00e7o de determinado produto do supermercado para uma vari\u00e1vel de nosso programa, primeiro dever\u00edamos realizar a declara\u00e7\u00e3o da mesma e, ap\u00f3s, a leitura. Considerando que pre\u00e7o refere-se a um conceito num\u00e9rico com possibilidade de casas decimais, devemos utilizar, na declara\u00e7\u00e3o, tipos de dados de ponto flutuante, como float ou double . Logo, de forma bem resumida, ter\u00edamos no m\u00ednimo duas etapas em nosso programa relacionadas a este contexto: Declara\u00e7\u00e3o da vari\u00e1vel: float preco_produto; Leitura de valor de produto do console: cin >> preco_produto; Outro aspecto importante \u00e9 que as duas instru\u00e7\u00f5es acima n\u00e3o podem ser invertidas, ou seja, a declara\u00e7\u00e3o deve ocorrer obrigatoriamente em linhas anteriores ao uso da vari\u00e1vel. Mas voc\u00ea h\u00e1 de concordar comigo que simplesmente ficar aguardando o usu\u00e1rio informar um valor pelo teclado, sem inform\u00e1-lo do que o programa espera receber n\u00e3o parece ser adequado. O correto \u00e9 apresentar mensagens para, posteriormente, aguardar o valor. Para esta finalidade precisamos recorrer ao objeto cout . Voltando ao exemplo do pre\u00e7o do produto, seria mais conveniente realizar a seguinte sequ\u00eancia de instru\u00e7\u00f5es: Declara\u00e7\u00e3o da vari\u00e1vel: float preco_produto; Apresentar mensagem em tela: cout << \"Informe o valor do produto:\" Leitura de valor do produto do console: cin >> preco_produto; Aten\u00e7\u00e3o Percebeu que o operador que acompanha o cout \u00e9 oposto em sentido ao do cin ? Pois \u00e9, enquanto o operador de extra\u00e7\u00e3o >> \u00e9 utilizado no objeto cin , o do cout chama-se operador de inser\u00e7\u00e3o e se op\u00f5em em sentido, apontando para a esquerda << .","title":"Cin e cout"},{"location":"programacao/cpp/io/#estudo-de-caso","text":"Observe nosso programa exemplo abaixo. Tenha especial aten\u00e7\u00e3o aos tipos de dado utilizados na declara\u00e7\u00e3o das vari\u00e1veis e aos usos dos objetos de entrada e sa\u00edda. Execute o c\u00f3digo com especial aten\u00e7\u00e3o \u00e0s mensagens exibidas em tela, buscando relacionar com a instru\u00e7\u00e3o que as gera. Exemplo #include <iostream> using namespace std ; int main () { int ano_nascimento ; float peso ; string nome ; cout << \"Informe seu nome: \" ; cin >> nome ; cout << \"Informe seu peso: \" ; cin >> peso ; cout << \"Informe seu ano de nascimento: \" ; cin >> ano_nascimento ; cout << endl << nome << \", nascido em \" << ano_nascimento << \" tem peso igual a \" << peso << endl ; }","title":"Estudo de caso"},{"location":"programacao/cpp/io/#formatando-a-saida-de-dados","text":"A apresenta\u00e7\u00e3o das informa\u00e7\u00f5es ao usu\u00e1rio \u00e9 muito importante, afinal estamos falado de tornar a experi\u00eancia de uso do software o mais agrad\u00e1vel poss\u00edvel. Na intera\u00e7\u00e3o via console, podemos trabalhar a sa\u00edda com aux\u00edlio de recursos da biblioteca iomanip . O primeiro passo para utilizar a biblioteca \u00e9 inclu\u00ed-la no programa atrav\u00e9s da diretiva #include . Feito isso, temos acesso aos seguintes recursos: setfill : permite definir o caractere utilizado para preencher espa\u00e7os vazios. setw : especifica o n\u00famero de colunas reservadas para impress\u00e3o do valor que segue. left : alinhamento da sa\u00edda em tela \u00e0 esquerda. right : alinhamento da sa\u00edda em tela \u00e0 direita. setprecision : configura quantas casas decimais ser\u00e3o impressos na sa\u00edda de n\u00fameros de ponto flutuante. setiosflags : ativa flags do mecanismo de io, como o tipo de representa\u00e7\u00e3o num\u00e9rica utilizada na sa\u00edda, por exemplo. Vejamos o exemplo a seguir: Exemplo #include <iomanip> using namespace std ; int main () { float value = 0.635987 ; double phi = 1.61803398874989484820 ; string hello = \"hello\" ; /* fixed: expressa um n\u00famero de ponto flutuante com uma quantidade espec\u00edfica de d\u00edgitos ap\u00f3s ou antes da v\u00edrgula setprecision(): m\u00e9todo que especifica o n\u00famero de casas decimais ap\u00f3s a v\u00edrgula */ cout << fixed << setprecision ( 4 ); cout << hello << \" \" << value << endl ; /* setiosflags(ios::right): alinhamento do texto \u00e0 direita setw(50): reserva 50 caracteres de espa\u00e7o em tela para a sa\u00edda do pr\u00f3ximo valor em tela */ cout << setiosflags ( ios :: right ) << setw ( 50 ); cout << hello << \" h\" << value << endl ; cout << setw ( 30 ) << setprecision ( 12 ); cout << phi << endl ; return 0 ; }","title":"Formatando a sa\u00edda de dados"},{"location":"programacao/cpp/iteracao/","text":"Os la\u00e7os de repeti\u00e7\u00e3o s\u00e3o comandos que permitem iterar (repetir) um conjunto de instru\u00e7\u00f5es sob determinadas condi\u00e7\u00f5es. Junto com os comandos de desvio condicional, integram os comandos de controle de fluxo e s\u00e3o imprescind\u00edveis na programa\u00e7\u00e3o estruturada (e em outros paradigmas tamb\u00e9m). Temos tr\u00eas la\u00e7os de repeti\u00e7\u00e3o na linguagem C++: for , while e do while . Todos eles servem ao mesmo prop\u00f3sito, apresentando sutis diferen\u00e7as entre si. For \u00b6 Come\u00e7aremos nossa an\u00e1lise pelo la\u00e7o for . Podemos dividir sua estrutura em um cabe\u00e7alho e um corpo . No cabe\u00e7alho temos tr\u00eas segmentos separados por ponto-e-v\u00edrgula. Vamos cham\u00e1-los de s1 , s2 e s3 , que ir\u00e3o compor o cabe\u00e7alho da seguinte forma: for(s1;s2;s3) . O segmento s1 representa o espa\u00e7o para inicializa\u00e7\u00e3o/declara\u00e7\u00e3o das vari\u00e1veis de controle. Executa somente uma vez, no in\u00edcio da execu\u00e7\u00e3o do la\u00e7o. Pode ser omitido, caso o programador assim deseje. O segmento s2 representa a condi\u00e7\u00e3o de parada do la\u00e7o, avaliada antes de cada itera\u00e7\u00e3o iniciar. Caso o retorno da express\u00e3o l\u00f3gica seja false , as instru\u00e7\u00f5es do corpo do la\u00e7o n\u00e3o ser\u00e3o executas e o controle de execu\u00e7\u00e3o avan\u00e7a para o comando imediatamente posterior o fechamento do la\u00e7o. O segmento pode ser omitido, indicando que o la\u00e7o ir\u00e1 repetir indefinidamente ( looping ). Se a condi\u00e7\u00e3o especificada for falsa na primeira avalia\u00e7\u00e3o, ent\u00e3o o la\u00e7o n\u00e3o ir\u00e1 executar nenhuma vez as instru\u00e7\u00f5es contidas no corpo. O terceiro segmento, s3 , corresponde ao espa\u00e7o para incremento/decremento das vari\u00e1veis de controle. A execu\u00e7\u00e3o das instru\u00e7\u00f5es nele contidas se d\u00e1 ao final de cada itera\u00e7\u00e3o. Assim como os demais, o segmento s3 pode ser omitido. O corpo do la\u00e7o \u00e9 composto por uma ou mais instru\u00e7\u00f5es delimitadas por { } . Assim como comandos de sele\u00e7\u00e3o, podemos aninhar um la\u00e7o dentro do corpo de outro la\u00e7o de repeti\u00e7\u00e3o. Logo, qualquer instru\u00e7\u00e3o \u00e9 aceita. Vejamos um programa exemplo que imprime no console n\u00fameros inteiros de 1 a 10, constru\u00eddo com aux\u00edlio do la\u00e7o for . No segmento s1 temos a instru\u00e7\u00e3o int i=1 , que corresponde \u00e0 declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de uma vari\u00e1vel chamada i com valor 1 . Esta vari\u00e1vel tem escopo restrito ao la\u00e7o, n\u00e3o sendo \"vis\u00edvel\" fora dele. A condi\u00e7\u00e3o i<=10 indica que o la\u00e7o ir\u00e1 repetir as instru\u00e7\u00f5es do corpo enquanto o valor da vari\u00e1vel i for inferior ou igual a 10 . J\u00e1 a instru\u00e7\u00e3o i++ indica que a vari\u00e1vel i aumentar\u00e1 em uma unidade a cada itera\u00e7\u00e3o. #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 10 ; i ++ ){ cout << i << endl ; } } Info O operador ++ \u00e9 chamado de incremento . Aplica-se a vari\u00e1veis inteiras, aumentando seu valor em 1. Pode ser utilizado pr\u00e9-fixado (antes da vari\u00e1vel) ou p\u00f3s-fixado (ap\u00f3s a vari\u00e1vel). link para diferen\u00e7a A instru\u00e7\u00e3o i++ \u00e9 equivalente a i=i+1 . Este mesmo programa, com poucas altera\u00e7\u00f5es, poderia contar de 10 a 1. Todas as adequa\u00e7\u00f5es seriam realizadas no cabe\u00e7alho, modificando as instru\u00e7\u00f5es dos tr\u00eas segmentos. Observe o resultado: #include <iostream> using namespace std ; int main () { for ( int i = 10 ; i >= 1 ; i -- ){ cout << i << endl ; } } Info O operador -- \u00e9 chamado de decremento . Aplica-se a vari\u00e1veis inteiras, diminuindo seu valor em 1. Pode ser utilizado pr\u00e9-fixado (antes da vari\u00e1vel) ou p\u00f3s-fixado (ap\u00f3s a vari\u00e1vel). link para diferen\u00e7a A instru\u00e7\u00e3o i-- \u00e9 equivalente a i=i-1 . O la\u00e7o for permite compor instru\u00e7\u00f5es de cabe\u00e7alho mais complexas. Podemos ter m\u00faltiplas inicializa\u00e7\u00f5es e m\u00faltiplos controles de incremento/decremento de vari\u00e1veis de controle. Ainda sobre a quest\u00e3o do \"pulo\" da vari\u00e1vel de controle, podemos utilizar qualquer quantidade; n\u00e3o estamos limitados a +1 ou -1 . #include <iostream> using namespace std ; int main () { int f = 0 ; for ( int i = 4 , j = -2 , l = 6 ; l > j && i < l ; i += 2 , l ++ , j -- ) f += i + j + l ; cout << f ; } While \u00b6 O la\u00e7o while difere do for por apresentar apenas a condi\u00e7\u00e3o de parada em seu cabe\u00e7alho. Neste aspecto, sua sintaxe \u00e9 mais simples. Contudo, os demais controles devem ser realizados pelo programador no corpo do la\u00e7o (ou fora dele), de modo evitar estados de looping n\u00e3o planejados. Para demonstrar seu funcionamento, reutilizaremos o programa que exibe n\u00fameros de 10 a 1 no console. Comparando com a vers\u00e3o utilizando for percebemos que a declara\u00e7\u00e3o da vari\u00e1vel de controle ocorreu antes da instru\u00e7\u00e3o while para garantir que a vari\u00e1vel exista na interpreta\u00e7\u00e3o da condi\u00e7\u00e3o l\u00f3gica i<=10 . J\u00e1 o decremento i-- precisou ser adicionado ap\u00f3s a \u00faltima instru\u00e7\u00e3o, para garantir que toda itera\u00e7\u00e3o ir\u00e1 reduzir o valor da vari\u00e1vel em 1 unidade. Assim como o la\u00e7o for , o while pode vir a n\u00e3o executar nenhuma vez caso a condi\u00e7\u00e3o seja falsa na primeira avalia\u00e7\u00e3o. #include <iostream> using namespace std ; int main () { int i = 10 ; while ( i >= 1 ){ cout << i << endl ; i -- ; } } Do While \u00b6 A constru\u00e7\u00e3o do do while difere do while unicamente pela avalia\u00e7\u00e3o da condi\u00e7\u00e3o de parada ser realizada ao final da itera\u00e7\u00e3o. Portanto, este la\u00e7o ir\u00e1 garantir, no m\u00ednimo, uma execu\u00e7\u00e3o das instru\u00e7\u00f5es em seu corpo . \u00c9 justamente esta peculiaridade que utilizamos como crit\u00e9rio para sua escolha no c\u00f3digo. Aplicaremos o la\u00e7o do while em nosso j\u00e1 conhecido programa para contar n\u00fameros entre 10 e 1. Fa\u00e7a a compara\u00e7\u00e3o com as vers\u00f5es utilizando while e for para fins de estudo. #include <iostream> using namespace std ; int main () { int i = 10 ; do { cout << i << endl ; i -- ; } while ( i >= 1 ); } Break \u00b6 O comando break \u00e9 utilizado para interromper a execu\u00e7\u00e3o de la\u00e7os de repeti\u00e7\u00e3o e o comando switch . Sempre que, em um destes comandos, houver um break , a execu\u00e7\u00e3o finaliza naquele ponto e a pr\u00f3xima instru\u00e7\u00e3o ser\u00e1 aquela imediatamente posterior ao final do bloco. Utilizamos break quando temos inten\u00e7\u00e3o de finalizar o la\u00e7o mesmo que a condi\u00e7\u00e3o especificada em sua constru\u00e7\u00e3o ainda permita novas itera\u00e7\u00f5es. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ if ( i > 14 ){ break ; } cout << i << endl ; } cout << \"FIM\" << endl ; } Continue \u00b6 O comando continue diferencia-se do break porque seu efeito \u00e9 ignorar as demais instru\u00e7\u00f5es que sucedem o comando no corpo do la\u00e7o. Sempre que executado, uma nova itera\u00e7\u00e3o inicia, como \u00e9 o caso do programa abaixo. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ if ( i % 2 == 0 ){ cout << i << \" PAR\" << endl ; continue ; } cout << i << \" \u00cdMPAR\" << endl ; } } Goto \u00b6 O comando goto permite realizar um desvio incondicional no fluxo de execu\u00e7\u00e3o das instru\u00e7\u00f5es. Seu uso deve restrito \u00e0quelas situa\u00e7\u00f5es em que nenhum outro comando pode ser utilizado, sendo, portanto, excepcional. Para utilizar o comando goto \u00e9 preciso marcar instru\u00e7\u00f5es com r\u00f3tulos ( labels ). Com isso \u00e9 poss\u00edvel \"saltar\" para qualquer linha rotulada. No programa abaixo definimos o r\u00f3tulo fim para a instru\u00e7\u00e3o cout <<\"FIM\" <<endl; , de modo que a linha goto fim; levar\u00e1 a execu\u00e7\u00e3o do programa imediatamente a este ponto. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ for ( int x = 0 ; x < 15 ; x ++ ){ for ( int y = 0 ; y < 100 ; y ++ ){ cout << i << \" - \" << x << \" - \" << y << endl ; if ( y == 10 ) goto fim ; } } cout << i << endl ; } fim : cout << \"FIM\" << endl ; }","title":"La\u00e7os de Repeti\u00e7\u00e3o"},{"location":"programacao/cpp/iteracao/#for","text":"Come\u00e7aremos nossa an\u00e1lise pelo la\u00e7o for . Podemos dividir sua estrutura em um cabe\u00e7alho e um corpo . No cabe\u00e7alho temos tr\u00eas segmentos separados por ponto-e-v\u00edrgula. Vamos cham\u00e1-los de s1 , s2 e s3 , que ir\u00e3o compor o cabe\u00e7alho da seguinte forma: for(s1;s2;s3) . O segmento s1 representa o espa\u00e7o para inicializa\u00e7\u00e3o/declara\u00e7\u00e3o das vari\u00e1veis de controle. Executa somente uma vez, no in\u00edcio da execu\u00e7\u00e3o do la\u00e7o. Pode ser omitido, caso o programador assim deseje. O segmento s2 representa a condi\u00e7\u00e3o de parada do la\u00e7o, avaliada antes de cada itera\u00e7\u00e3o iniciar. Caso o retorno da express\u00e3o l\u00f3gica seja false , as instru\u00e7\u00f5es do corpo do la\u00e7o n\u00e3o ser\u00e3o executas e o controle de execu\u00e7\u00e3o avan\u00e7a para o comando imediatamente posterior o fechamento do la\u00e7o. O segmento pode ser omitido, indicando que o la\u00e7o ir\u00e1 repetir indefinidamente ( looping ). Se a condi\u00e7\u00e3o especificada for falsa na primeira avalia\u00e7\u00e3o, ent\u00e3o o la\u00e7o n\u00e3o ir\u00e1 executar nenhuma vez as instru\u00e7\u00f5es contidas no corpo. O terceiro segmento, s3 , corresponde ao espa\u00e7o para incremento/decremento das vari\u00e1veis de controle. A execu\u00e7\u00e3o das instru\u00e7\u00f5es nele contidas se d\u00e1 ao final de cada itera\u00e7\u00e3o. Assim como os demais, o segmento s3 pode ser omitido. O corpo do la\u00e7o \u00e9 composto por uma ou mais instru\u00e7\u00f5es delimitadas por { } . Assim como comandos de sele\u00e7\u00e3o, podemos aninhar um la\u00e7o dentro do corpo de outro la\u00e7o de repeti\u00e7\u00e3o. Logo, qualquer instru\u00e7\u00e3o \u00e9 aceita. Vejamos um programa exemplo que imprime no console n\u00fameros inteiros de 1 a 10, constru\u00eddo com aux\u00edlio do la\u00e7o for . No segmento s1 temos a instru\u00e7\u00e3o int i=1 , que corresponde \u00e0 declara\u00e7\u00e3o e inicializa\u00e7\u00e3o de uma vari\u00e1vel chamada i com valor 1 . Esta vari\u00e1vel tem escopo restrito ao la\u00e7o, n\u00e3o sendo \"vis\u00edvel\" fora dele. A condi\u00e7\u00e3o i<=10 indica que o la\u00e7o ir\u00e1 repetir as instru\u00e7\u00f5es do corpo enquanto o valor da vari\u00e1vel i for inferior ou igual a 10 . J\u00e1 a instru\u00e7\u00e3o i++ indica que a vari\u00e1vel i aumentar\u00e1 em uma unidade a cada itera\u00e7\u00e3o. #include <iostream> using namespace std ; int main () { for ( int i = 1 ; i <= 10 ; i ++ ){ cout << i << endl ; } } Info O operador ++ \u00e9 chamado de incremento . Aplica-se a vari\u00e1veis inteiras, aumentando seu valor em 1. Pode ser utilizado pr\u00e9-fixado (antes da vari\u00e1vel) ou p\u00f3s-fixado (ap\u00f3s a vari\u00e1vel). link para diferen\u00e7a A instru\u00e7\u00e3o i++ \u00e9 equivalente a i=i+1 . Este mesmo programa, com poucas altera\u00e7\u00f5es, poderia contar de 10 a 1. Todas as adequa\u00e7\u00f5es seriam realizadas no cabe\u00e7alho, modificando as instru\u00e7\u00f5es dos tr\u00eas segmentos. Observe o resultado: #include <iostream> using namespace std ; int main () { for ( int i = 10 ; i >= 1 ; i -- ){ cout << i << endl ; } } Info O operador -- \u00e9 chamado de decremento . Aplica-se a vari\u00e1veis inteiras, diminuindo seu valor em 1. Pode ser utilizado pr\u00e9-fixado (antes da vari\u00e1vel) ou p\u00f3s-fixado (ap\u00f3s a vari\u00e1vel). link para diferen\u00e7a A instru\u00e7\u00e3o i-- \u00e9 equivalente a i=i-1 . O la\u00e7o for permite compor instru\u00e7\u00f5es de cabe\u00e7alho mais complexas. Podemos ter m\u00faltiplas inicializa\u00e7\u00f5es e m\u00faltiplos controles de incremento/decremento de vari\u00e1veis de controle. Ainda sobre a quest\u00e3o do \"pulo\" da vari\u00e1vel de controle, podemos utilizar qualquer quantidade; n\u00e3o estamos limitados a +1 ou -1 . #include <iostream> using namespace std ; int main () { int f = 0 ; for ( int i = 4 , j = -2 , l = 6 ; l > j && i < l ; i += 2 , l ++ , j -- ) f += i + j + l ; cout << f ; }","title":"For"},{"location":"programacao/cpp/iteracao/#while","text":"O la\u00e7o while difere do for por apresentar apenas a condi\u00e7\u00e3o de parada em seu cabe\u00e7alho. Neste aspecto, sua sintaxe \u00e9 mais simples. Contudo, os demais controles devem ser realizados pelo programador no corpo do la\u00e7o (ou fora dele), de modo evitar estados de looping n\u00e3o planejados. Para demonstrar seu funcionamento, reutilizaremos o programa que exibe n\u00fameros de 10 a 1 no console. Comparando com a vers\u00e3o utilizando for percebemos que a declara\u00e7\u00e3o da vari\u00e1vel de controle ocorreu antes da instru\u00e7\u00e3o while para garantir que a vari\u00e1vel exista na interpreta\u00e7\u00e3o da condi\u00e7\u00e3o l\u00f3gica i<=10 . J\u00e1 o decremento i-- precisou ser adicionado ap\u00f3s a \u00faltima instru\u00e7\u00e3o, para garantir que toda itera\u00e7\u00e3o ir\u00e1 reduzir o valor da vari\u00e1vel em 1 unidade. Assim como o la\u00e7o for , o while pode vir a n\u00e3o executar nenhuma vez caso a condi\u00e7\u00e3o seja falsa na primeira avalia\u00e7\u00e3o. #include <iostream> using namespace std ; int main () { int i = 10 ; while ( i >= 1 ){ cout << i << endl ; i -- ; } }","title":"While"},{"location":"programacao/cpp/iteracao/#do-while","text":"A constru\u00e7\u00e3o do do while difere do while unicamente pela avalia\u00e7\u00e3o da condi\u00e7\u00e3o de parada ser realizada ao final da itera\u00e7\u00e3o. Portanto, este la\u00e7o ir\u00e1 garantir, no m\u00ednimo, uma execu\u00e7\u00e3o das instru\u00e7\u00f5es em seu corpo . \u00c9 justamente esta peculiaridade que utilizamos como crit\u00e9rio para sua escolha no c\u00f3digo. Aplicaremos o la\u00e7o do while em nosso j\u00e1 conhecido programa para contar n\u00fameros entre 10 e 1. Fa\u00e7a a compara\u00e7\u00e3o com as vers\u00f5es utilizando while e for para fins de estudo. #include <iostream> using namespace std ; int main () { int i = 10 ; do { cout << i << endl ; i -- ; } while ( i >= 1 ); }","title":"Do While"},{"location":"programacao/cpp/iteracao/#break","text":"O comando break \u00e9 utilizado para interromper a execu\u00e7\u00e3o de la\u00e7os de repeti\u00e7\u00e3o e o comando switch . Sempre que, em um destes comandos, houver um break , a execu\u00e7\u00e3o finaliza naquele ponto e a pr\u00f3xima instru\u00e7\u00e3o ser\u00e1 aquela imediatamente posterior ao final do bloco. Utilizamos break quando temos inten\u00e7\u00e3o de finalizar o la\u00e7o mesmo que a condi\u00e7\u00e3o especificada em sua constru\u00e7\u00e3o ainda permita novas itera\u00e7\u00f5es. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ if ( i > 14 ){ break ; } cout << i << endl ; } cout << \"FIM\" << endl ; }","title":"Break"},{"location":"programacao/cpp/iteracao/#continue","text":"O comando continue diferencia-se do break porque seu efeito \u00e9 ignorar as demais instru\u00e7\u00f5es que sucedem o comando no corpo do la\u00e7o. Sempre que executado, uma nova itera\u00e7\u00e3o inicia, como \u00e9 o caso do programa abaixo. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ if ( i % 2 == 0 ){ cout << i << \" PAR\" << endl ; continue ; } cout << i << \" \u00cdMPAR\" << endl ; } }","title":"Continue"},{"location":"programacao/cpp/iteracao/#goto","text":"O comando goto permite realizar um desvio incondicional no fluxo de execu\u00e7\u00e3o das instru\u00e7\u00f5es. Seu uso deve restrito \u00e0quelas situa\u00e7\u00f5es em que nenhum outro comando pode ser utilizado, sendo, portanto, excepcional. Para utilizar o comando goto \u00e9 preciso marcar instru\u00e7\u00f5es com r\u00f3tulos ( labels ). Com isso \u00e9 poss\u00edvel \"saltar\" para qualquer linha rotulada. No programa abaixo definimos o r\u00f3tulo fim para a instru\u00e7\u00e3o cout <<\"FIM\" <<endl; , de modo que a linha goto fim; levar\u00e1 a execu\u00e7\u00e3o do programa imediatamente a este ponto. #include <iostream> using namespace std ; int main () { for ( int i = 0 ; i < 20 ; i ++ ){ for ( int x = 0 ; x < 15 ; x ++ ){ for ( int y = 0 ; y < 100 ; y ++ ){ cout << i << \" - \" << x << \" - \" << y << endl ; if ( y == 10 ) goto fim ; } } cout << i << endl ; } fim : cout << \"FIM\" << endl ; }","title":"Goto"},{"location":"programacao/cpp/ponteiros/","text":"","title":"Ponteiros"},{"location":"programacao/oop/classes/","text":"Classes \u00b6 Em um programa desenvolvido utilizando POO, o processamento se d\u00e1 pela troca de mensagens entre os objetos criados. E, para criar tais objetos, precisamos de um modelo de constru\u00e7\u00e3o, que chamamos de classe . A classe define, portanto, caracter\u00edsticas comuns (atributos e comportamentos) de um tipo de objeto. Quando estamos projetando um software utilizando POO, a primeira atividade que temos na parte de projeto \u00e9 especificar quais ser\u00e3o as classes que devemos construir, assim como seus relacionamentos. Essa fase de design \u00e9 essencial, pois impacta diretamente na arquitetura do software. Perceba ent\u00e3o que n\u00e3o falamos inicialmente de objetos, mas sim de classes, pois n\u00e3o h\u00e1 como cri\u00e1-los sem definir sua estrutura previamente. Classes As classes s\u00e3o Tipos Abstratos de Dados que o desenvolvedor define no c\u00f3digo. A partir destes tipos criam-se vari\u00e1veis que ir\u00e3o receber inst\u00e2ncias da classe , que conhecemos como objetos . Existem diversas t\u00e9cnicas e recomenda\u00e7\u00f5es voltadas ao projeto de classes. Neste momento isso n\u00e3o ser\u00e1 levado em considera\u00e7\u00e3o, pois nosso foco ser\u00e1 a codifica\u00e7\u00e3o, ou seja, a express\u00e3o destes conceitos em c\u00f3digo. Basta que entendamos por ora que as classes s\u00e3o obtidas a partir da an\u00e1lise do dom\u00ednio do problema, buscando identificar as categorias de objetos que ocorrem. Dica Voc\u00ea pode achar informa\u00e7\u00f5es introdut\u00f3rias sobre an\u00e1lise orientada a objetos neste endere\u00e7o ou no curso oferecido pela Funda\u00e7\u00e3o Bradesco . Imagine, por exemplo, que estamos trabalhando em sistema de gest\u00e3o acad\u00eamica para uma universidade. Atrav\u00e9s da an\u00e1lise do dom\u00ednio, elencamos que minimamente precisaremos considerar estudantes , professores , cursos , disciplinas e avalia\u00e7\u00f5es em nossa modelagem. Estas s\u00e3o nossas categorias, e, portanto, candidatas a se tornarem classes. Feito isso, precisamos identificar os atributos de interesse, comportamentos e as rela\u00e7\u00f5es entre as classes para termos os insumos necess\u00e1rios \u00e0 codifica\u00e7\u00e3o. Vamos come\u00e7ar pela categoria estudante . Quais atributos de dados os estudantes em nosso sistema dever\u00e3o ter? A resposta \u00e9: depender\u00e1 dos requisitos que identificamos junto ao nosso cliente . Como n\u00e3o temos em m\u00e3os tais requisitos, iremos pressupor que os atributos s\u00e3o: nome completo data de nascimento nome da m\u00e3e cpf n\u00famero de matr\u00edcula email Atributos Atributos s\u00e3o propriedades associadas \u00e0 objetos que desejamos registrar valor. Deste modo, a categoria (grupo) estudante ser\u00e1 representada por uma classe . E como podemos representar este entendimento para fins de modelagem? Bem, podemos utilizar o Diagrama de Classes da UML ! Veja como ficaria: classDiagram class Estudante{ - nomeCompleto - dataNascimento - nomeMae - cpf - numeroMatricula - email } Na primeira se\u00e7\u00e3o temos o nome da classe, que escolhemos ser Estudante . A segunda se\u00e7\u00e3o trata dos atributos que identificamos. Falta apenas elencarmos os comportamentos, ou seja, as a\u00e7\u00f5es que objetos de Estudante podem expor. De in\u00edcio, vamos imaginar a possibilidade do estudante expor a\u00e7\u00f5es que permitam ler e alterar seus atributos de dados. Em linguagem que expressam POO, utilizamos m\u00e9todos para implementar a\u00e7\u00f5es que um objeto pode realizar. Assim, conclu\u00edmos nossa representa\u00e7\u00e3o da classe Estudante incluindo alguns m\u00e9todos (que explicaremos mais a frente). classDiagram class Estudante{ - nomeCompleto - dataNascimento - nomeMae - cpf - numeroMatricula - email + Estudante(nomeComp, dataN, nomeMae, cpf, matricula) + getNomeCompleto() + getDataNascimento() + getNomeMae() + getCPF() + getNumeroMatricula() + getEmail() + setEmail () } M\u00e9todos S\u00e3o rotinas associadas ao objeto que manipulam seu estado (conjunto de valores de atributos) e que exp\u00f5em ao mundo exterior uma interface de comunica\u00e7\u00e3o. Representam a implementa\u00e7\u00e3o do conceito de comportamento em linguagens com suporte a POO. Na sequ\u00eancia apresentamos implementa\u00e7\u00f5es muito b\u00e1sicas para a classe Estudante utilizando tr\u00eas linguagens mainstream para que possamos discutir e analisar alguns elementos importantes. O primeiro deles \u00e9 a forma que utilizamos para definir a classe, que nas tr\u00eas linguagens se d\u00e1 pelo uso da palavra reservada class . Atributos s\u00e3o declarados como vari\u00e1veis de inst\u00e2ncia , ou seja, vari\u00e1veis ter\u00e3o valores espec\u00edficos para cada objeto criado (instanciado). J\u00e1 os comportamentos s\u00e3o implementados a partir de m\u00e9todos , cuja estrutura \u00e9 praticamente igual \u00e0 fun\u00e7\u00f5es/procedimentos. A grande diferen\u00e7a \u00e9 que tais fun\u00e7\u00f5es operam no escopo do objeto, especificamente manipulando suas vari\u00e1veis de inst\u00e2ncia. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <string> #include <ctime> using namespace std ; class Estudante { private : string nomeCompleto , nomeMae , email , cpf ; unsigned long numeroMatricula ; tm dataNascimento ; public : Estudante ( string nomeCompleto , string nomeMae , string email , string cpf , unsigned long numeroMatricula , tm dataNascimento ) { this -> cpf = cpf ; this -> nomeCompleto = nomeCompleto ; this -> nomeMae = nomeMae ; this -> email = email ; this -> numeroMatricula = numeroMatricula ; this -> dataNascimento = dataNascimento ; } string getNomeCompleto () { return this -> nomeCompleto ; } tm getDataNascimento () { return this -> dataNascimento ; } string getNomeMae () { return this -> nomeMae ; } string getCPF () { return this -> cpf ; } unsigned long getNumeroMatricula () { return this -> numeroMatricula ; } string getEmail () { return this -> email ; } void setEmail ( string email ) { this -> email = email ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 import java.time.LocalDate ; class Estudante { private String nomeCompleto , nomeMae , email , cpf ; private long numeroMatricula ; private LocalDate dataNascimento ; public Estudante ( String nomeCompleto , String nomeMae , String email , String cpf , long numeroMatricula , LocalDate dataNascimento ) { this . cpf = cpf ; this . dataNascimento = dataNascimento ; this . nomeCompleto = nomeCompleto ; this . nomeMae = nomeMae ; this . email = email ; this . numeroMatricula = numeroMatricula ; } String getNomeCompleto () { return this . nomeCompleto ; } LocalDate getDataNascimento () { return this . dataNascimento ; } String getNomeMae () { return this . nomeMae ; } String getCPF () { return this . cpf ; } long getNumeroMatricula (){ return this . numeroMatricula ; } String getEmail () { return this . email ; } void setEmail ( String email ) { this . email = email ; } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Estudante : def __init__ ( self , nome_completo , data_nascimento , nome_mae , cpf , matricula , email ): self . __nome_completo = nome_completo self . __data_nascimento = data_nascimento self . __nome_mae = nome_mae self . __cpf = cpf self . __email = email self . __numero_matricula = matricula def set_email ( self , email ): self . __email = email def get_email ( self ): return self . __email def get_numero_matricula ( self ): return self . __numero_matricula def get_cpf ( self ): return self . __cpf def get_nome_mae ( self ): return self . __nome_mae def get_data_nascimento ( self ): return self . __data_nascimento def get_nome_completo ( self ): return self . __nome_completo O primeiro ponto de aten\u00e7\u00e3o s\u00e3o o uso de this e self (por conven\u00e7\u00e3o) no c\u00f3digo. Embora a sintaxe mude de linguagem para linguagem, o objetivo de ambos \u00e9 o mesmo: referenciar uma vari\u00e1vel de inst\u00e2ncia ou m\u00e9todo de inst\u00e2ncia . Ainda confuso? Ent\u00e3o vamos explicar com mais detalhes. Quando o desenvolvedor codifica a classe, sua inten\u00e7\u00e3o \u00e9 operacionalizar as a\u00e7\u00f5es para cada poss\u00edvel objeto que venha a ser instanciado . Por instancia\u00e7\u00e3o devemos entender o processo de reserva de espa\u00e7o de mem\u00f3ria para o objeto residir, bem como sua inicializa\u00e7\u00e3o a partir do construtor . Nesta \u00e1rea de mem\u00f3ria em que o objeto reside h\u00e1 espa\u00e7o para armazenar os valores de seus atributos. Disso \u00e9 que surge o conceito de vari\u00e1veis de inst\u00e2ncia , ou seja, vari\u00e1veis cujo valor \u00e9 particular a cada inst\u00e2ncia (objeto) criada. J\u00e1 os m\u00e9todos n\u00e3o t\u00eam seu c\u00f3digo \"carregado\" junto a cada inst\u00e2ncia, pois eles n\u00e3o mudam sua implementa\u00e7\u00e3o a cada novo objeto. Desconsiderando casos excepcionais, todos os objetos compartilham da mesma implementa\u00e7\u00e3o definida na classe e \u00e9 neste ponto que o uso de this/self tornam-se especialmente \u00fatil. Eles representam a inst\u00e2ncia que recebeu a mensagem (objeto do contexto), o que permite codificar o comportamento para todo e qualquer objeto da classe a partir de um c\u00f3digo gen\u00e9rico. Analise o c\u00f3digo a seguir. Ele apresenta dois objetos, estudante01 e estudante02 , devidamente inicializados com os valores informados no construtor. Nos comandos de print , o valor apresentado para cpf ser\u00e1 \u00e0quele informado para o respectivo objeto. Isso \u00e9 poss\u00edvel porque, quando o objeto estudante01 recebe a mensagem get_cpf , ao rodar a implementa\u00e7\u00e3o do m\u00e9todo, o valor da refer\u00eancia self est\u00e1 apontando para estudante01 . O mesmo racioc\u00ednio vale para estudante02 e qualquer outro objeto que venha a ser instanciado. estudante01 = Estudante ( \"Fulano A. B.\" , \"12/05/2003\" , \"Ciclana A. B. \" , \"12365478963\" , \"1236584\" ) estudante02 = Estudante ( \"Beltrano F. G.\" , \"30/01/2002\" , \"Ciclana F. G. \" , \"85789632541\" , \"2365841\" ) print ( estudante01 . get_cpf ()) print ( estudante02 . get_cpf ()) Em nossa explica\u00e7\u00e3o anterior falamos de m\u00e9todo construtor mas n\u00e3o o descrevemos e para isso, vamos tomar como estudo de caso nossa implementa\u00e7\u00e3o em Python, linha \\(2\\) . Bem, sabemos que o estado de um objeto \u00e9 constitu\u00eddo pelo valor de seus atributos em um determinado instante. A quest\u00e3o \u00e9: qual ser\u00e1 o estado inicial do objeto, obtido assim que ele for instanciado? Quem determina isso \u00e9 o m\u00e9todo construtor . O nome do tipo de m\u00e9todo j\u00e1 deixa a dica: construtor , ou seja, aquele que constr\u00f3i o estado inicial. Trata-se, portanto, de um m\u00e9todo especial executado no ato da instancia\u00e7\u00e3o, cuja finalidade \u00e9 entregar o objeto em um estado v\u00e1lido, consistente. Seus par\u00e2metros constituem as depend\u00eancia que o objeto precisa receber do mundo exterior. Cada linguagem especifica como cri\u00e1-los: enquanto que Java e C++ expressam os construtores a partir de um m\u00e9todo de mesmo nome da classe e sem tipo de retorno, no Python ele obrigatoriamente deve se chamar __init__ . E, para ficar registrado, podemos ter v\u00e1rios construtores em uma mesma classe. Visibilidade \u00b6 A programa\u00e7\u00e3o orientada a objetos \u00e9 especialmente \u00fatil porque oferece um mecanismo de programa\u00e7\u00e3o que une atributos \u00e0 comportamentos em uma \u00fanica unidade. E, ao permitir tal recurso, possibilita tamb\u00e9m a prote\u00e7\u00e3o contra altera\u00e7\u00f5es indevidas, desde que o programador utilize os princ\u00edpios e boas pr\u00e1ticas na codifica\u00e7\u00e3o. A visibilidade de atributos \u00e9 um fator muito importante. Por visibilidade devemos entender quem ter\u00e1 acesso direto a um atributo do objeto e de antem\u00e3o devemos saber que \u00e9, no m\u00ednimo, indesejado permitir acesso direto . A t\u00e9cnica que utilizamos para esconder os atributos ( data members ) de um objeto chama-se data hiding . O objetivo \u00e9 impedir o acesso direto aos atributos e assim garantir a consist\u00eancia de estado por meio dos m\u00e9todos que o objeto exp\u00f5e ao mundo exterior 1 . Em nossa implementa\u00e7\u00e3o da classe Estudante aplicamos a t\u00e9cnica por meio dos modificadores de visibilidade do Java e C++, enquanto que no Python, utilizamos a conven\u00e7\u00e3o. O que declaramos como private (Java e C++) fica restrito ao escopo interno. Isso vale para atributos e para m\u00e9todos. Logo, acesso direto externo ao atributo email , por exemplo, n\u00e3o \u00e9 poss\u00edvel. Se for preciso ao mundo exterior ler o valor de email , ent\u00e3o criamos um m\u00e9todo accessor , cuja finalidade \u00e9 permitir a leitura de um atributo, jamais sua altera\u00e7\u00e3o. Por sua vez, se h\u00e1 necessidade de alterar o valor de um atributo, ent\u00e3o criamos um m\u00e9todo mutator para este fim. Este \u00e9 o caso dos m\u00e9todos get_email e set_email que implementamos. Encapsulamento \u00b6 Encapsulamento \u00e9 um dos pilares da POO. Quando associamos atributos \u00e0 m\u00e9todos que os manipulam dentre de uma unidade chamada objeto, e determinamos o que ser\u00e1 p\u00fablico e o que fica restrito, estamos falando de encapsulamento. Utilizando data hiding impedimos que objetos sofram altera\u00e7\u00f5es de estado sem controle. E, ao escondermos a implementa\u00e7\u00e3o dos m\u00e9todos ou mesmo restringirmos a exposi\u00e7\u00e3o de alguns m\u00e9todos, estamos garantindo o encapsulamento e gerando uma abstra\u00e7\u00e3o de dados que exp\u00f5e apenas o que necess\u00e1rio para o mundo exterior. Perceba que a abstra\u00e7\u00e3o nos acompanha em todas as etapas, pois ela \u00e9 o mecanismo que n\u00f3s, humanos, utilizamos para simplificar a realidade. Mantemos nossa aten\u00e7\u00e3o naquilo que nos importa sobre a realidade, desconsiderando os demais aspectos. Importante perceber tamb\u00e9m que cada indiv\u00edduo abstrai \u00e0quilo que lhe conv\u00e9m, a partir de seu ponto de vista da realidade. Contudo, essas diferen\u00e7as precisam ser minimizadas no projeto de software orientado a objetos atrav\u00e9s da observa\u00e7\u00e3o atenta das regras e caracter\u00edsticas do dom\u00ednio do problema, que ir\u00e3o se materializar nos objetos 2 . M\u00e9todos \u00b6 Os comportamentos de um objeto s\u00e3o codificados em m\u00e9todos . Em sua constru\u00e7\u00e3o, m\u00e9todos assemelham-se a rotinas, inclusive na sintaxe. A grande diferen\u00e7a est\u00e1 no papel desempenhado. Enquanto rotinas s\u00e3o executadas para transformar dados recebidos por par\u00e2metro ou dispon\u00edveis no escopo, sendo invocadas quando necess\u00e1rio, os m\u00e9todos s\u00e3o respons\u00e1veis por atender \u00e0 mensagens recebidas de outro objeto. Quando um m\u00e9todo executa, ele est\u00e1 respondendo a uma mensagem e sua execu\u00e7\u00e3o ir\u00e1 considerar o estado do objeto, seus demais comportamentos e os dados eventualmente recebidos como argumento. Os m\u00e9todos que o objeto torna dispon\u00edvel ao mundo externo comp\u00f5em sua interface de comunica\u00e7\u00e3o e somente por meio deles outros objetos podem interagir enviando mensagens. Neste sentido, o objeto reage ao est\u00edmulo, executando a a\u00e7\u00e3o associada \u00e0quela mensagem espec\u00edfica. \u00c9 a partir desta troca de mensagens entre objetos que se alcan\u00e7a as funcionalidades do sistema. No c\u00f3digo abaixo voc\u00ea ir\u00e1 perceber que o objeto e1 est\u00e1 recebendo uma mensagem para alterar o valor de e-mail armazenado. Como argumento est\u00e1 sendo enviado o novo endere\u00e7o. #... e1 = Estudante ( \"Fulano A. B.\" , \"12/05/2003\" , \"Ciclana A. B. \" , \"12365478963\" , \"1236584\" ) e1 . set_email ( \"estudante01@instituicao.edu\" ) #... Sobrecarga \u00b6 Sobrecarga \u00e9 o recurso que algumas linguagens de programa\u00e7\u00e3o oferecem para criarmos m\u00faltiplas implementa\u00e7\u00f5es de um mesmo m\u00e9todo, preservando seu nome mas variando tipos e/ou quantidades de par\u00e2metros formais em sua assinatura. \u00c9 um recurso t\u00edpico de linguagens estaticamente tipadas , ou seja, \u00e0quelas em que definimos a priori o tipo das vari\u00e1veis e isso \u00e9 utilizado como crit\u00e9rio de valida\u00e7\u00e3o sem\u00e2ntica no momento da compila\u00e7\u00e3o . Ao se deparar com o nome de um m\u00e9todo (ou fun\u00e7\u00e3o) sobrecarregado, o compilador ir\u00e1 utilizar o tipo/quantidade dos argumentos para encontrar a \"vers\u00e3o\" mais adequada ( best match ). No caso de linguagens din\u00e2micas, a sobrecarga n\u00e3o \u00e9 recurso nativo (nem necess\u00e1rio), ficando a cargo de bibliotecas externas habilitar tal possibilidade no c\u00f3digo. Na sequ\u00eancia apresentamos exemplos em tr\u00eas linguagens: C++, Java e Python. Duas delas passam por processo de compila\u00e7\u00e3o (C++ e Java), logo a sobrecarga \u00e9 recurso nativo. J\u00e1 para o Python, h\u00e1 a necessidade de importar um m\u00f3dulo espec\u00edfico, que, embora funcione corretamente no c\u00f3digo em quest\u00e3o, mostra ser pouco coerente, haja vista que podemos obter o mesmo resultado de forma mais simples (e correta). Logo, considere a implementa\u00e7\u00e3o em Python como uma representa\u00e7\u00e3o for\u00e7ada para demonstrar o recurso, mas n\u00e3o como pr\u00e1tica recomendada de codifica\u00e7\u00e3o nesta linguagem. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <ctime> #include <string> using namespace std ; enum class Conceito { A , B , C , D , E }; class Avaliacao { private : tm data ; string descricao ; int pesoInteiro ; Conceito pesoConceito ; public : Avaliacao ( tm data , string descricao ) { this -> data = data ; this -> descricao = descricao ; } void setPeso ( Conceito c ) { this -> pesoConceito = c ; } void setPeso ( int peso ) { this -> pesoInteiro = peso ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.time.LocalDate ; public enum Conceito { A , B , C , D , E ; } public class Avaliacao { private LocalDate data ; private String descricao ; private int pesoInteiro ; private Conceito pesoConceito ; public Avaliacao ( LocalDate data , String descricao ) { this . data = data ; this . descricao = descricao ; } public void setPeso ( Conceito c ) { this . pesoConceito = c ; } public void setPeso ( int peso ) { this . pesoInteiro = peso ; } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from multipledispatch import dispatch from enum import Enum class Conceito ( Enum ): A = 1 B = 2 C = 3 D = 4 E = 5 class Avaliacao (): def __init__ ( self , data , descricao ): self . data = data ; self . descricao = descricao ; self . peso_inteiro = 0 ; self . peso_conceito = None ; @dispatch ( Conceito ) def set_peso ( self , c ): self . peso_conceito = c @dispatch ( int ) def set_peso ( self , peso ): self . peso_inteiro = peso Sonoo Jaiswal. What is data hiding? 2021. URL: https://www.javatpoint.com/what-is-data-hiding . \u21a9 Carl Erickson. Object oriented programming. 2009. URL: file:///home/diego/%C3%81rea%20de%20Trabalho/ObjectOrientedProgramming.pdf . \u21a9","title":"Classes"},{"location":"programacao/oop/classes/#classes","text":"Em um programa desenvolvido utilizando POO, o processamento se d\u00e1 pela troca de mensagens entre os objetos criados. E, para criar tais objetos, precisamos de um modelo de constru\u00e7\u00e3o, que chamamos de classe . A classe define, portanto, caracter\u00edsticas comuns (atributos e comportamentos) de um tipo de objeto. Quando estamos projetando um software utilizando POO, a primeira atividade que temos na parte de projeto \u00e9 especificar quais ser\u00e3o as classes que devemos construir, assim como seus relacionamentos. Essa fase de design \u00e9 essencial, pois impacta diretamente na arquitetura do software. Perceba ent\u00e3o que n\u00e3o falamos inicialmente de objetos, mas sim de classes, pois n\u00e3o h\u00e1 como cri\u00e1-los sem definir sua estrutura previamente. Classes As classes s\u00e3o Tipos Abstratos de Dados que o desenvolvedor define no c\u00f3digo. A partir destes tipos criam-se vari\u00e1veis que ir\u00e3o receber inst\u00e2ncias da classe , que conhecemos como objetos . Existem diversas t\u00e9cnicas e recomenda\u00e7\u00f5es voltadas ao projeto de classes. Neste momento isso n\u00e3o ser\u00e1 levado em considera\u00e7\u00e3o, pois nosso foco ser\u00e1 a codifica\u00e7\u00e3o, ou seja, a express\u00e3o destes conceitos em c\u00f3digo. Basta que entendamos por ora que as classes s\u00e3o obtidas a partir da an\u00e1lise do dom\u00ednio do problema, buscando identificar as categorias de objetos que ocorrem. Dica Voc\u00ea pode achar informa\u00e7\u00f5es introdut\u00f3rias sobre an\u00e1lise orientada a objetos neste endere\u00e7o ou no curso oferecido pela Funda\u00e7\u00e3o Bradesco . Imagine, por exemplo, que estamos trabalhando em sistema de gest\u00e3o acad\u00eamica para uma universidade. Atrav\u00e9s da an\u00e1lise do dom\u00ednio, elencamos que minimamente precisaremos considerar estudantes , professores , cursos , disciplinas e avalia\u00e7\u00f5es em nossa modelagem. Estas s\u00e3o nossas categorias, e, portanto, candidatas a se tornarem classes. Feito isso, precisamos identificar os atributos de interesse, comportamentos e as rela\u00e7\u00f5es entre as classes para termos os insumos necess\u00e1rios \u00e0 codifica\u00e7\u00e3o. Vamos come\u00e7ar pela categoria estudante . Quais atributos de dados os estudantes em nosso sistema dever\u00e3o ter? A resposta \u00e9: depender\u00e1 dos requisitos que identificamos junto ao nosso cliente . Como n\u00e3o temos em m\u00e3os tais requisitos, iremos pressupor que os atributos s\u00e3o: nome completo data de nascimento nome da m\u00e3e cpf n\u00famero de matr\u00edcula email Atributos Atributos s\u00e3o propriedades associadas \u00e0 objetos que desejamos registrar valor. Deste modo, a categoria (grupo) estudante ser\u00e1 representada por uma classe . E como podemos representar este entendimento para fins de modelagem? Bem, podemos utilizar o Diagrama de Classes da UML ! Veja como ficaria: classDiagram class Estudante{ - nomeCompleto - dataNascimento - nomeMae - cpf - numeroMatricula - email } Na primeira se\u00e7\u00e3o temos o nome da classe, que escolhemos ser Estudante . A segunda se\u00e7\u00e3o trata dos atributos que identificamos. Falta apenas elencarmos os comportamentos, ou seja, as a\u00e7\u00f5es que objetos de Estudante podem expor. De in\u00edcio, vamos imaginar a possibilidade do estudante expor a\u00e7\u00f5es que permitam ler e alterar seus atributos de dados. Em linguagem que expressam POO, utilizamos m\u00e9todos para implementar a\u00e7\u00f5es que um objeto pode realizar. Assim, conclu\u00edmos nossa representa\u00e7\u00e3o da classe Estudante incluindo alguns m\u00e9todos (que explicaremos mais a frente). classDiagram class Estudante{ - nomeCompleto - dataNascimento - nomeMae - cpf - numeroMatricula - email + Estudante(nomeComp, dataN, nomeMae, cpf, matricula) + getNomeCompleto() + getDataNascimento() + getNomeMae() + getCPF() + getNumeroMatricula() + getEmail() + setEmail () } M\u00e9todos S\u00e3o rotinas associadas ao objeto que manipulam seu estado (conjunto de valores de atributos) e que exp\u00f5em ao mundo exterior uma interface de comunica\u00e7\u00e3o. Representam a implementa\u00e7\u00e3o do conceito de comportamento em linguagens com suporte a POO. Na sequ\u00eancia apresentamos implementa\u00e7\u00f5es muito b\u00e1sicas para a classe Estudante utilizando tr\u00eas linguagens mainstream para que possamos discutir e analisar alguns elementos importantes. O primeiro deles \u00e9 a forma que utilizamos para definir a classe, que nas tr\u00eas linguagens se d\u00e1 pelo uso da palavra reservada class . Atributos s\u00e3o declarados como vari\u00e1veis de inst\u00e2ncia , ou seja, vari\u00e1veis ter\u00e3o valores espec\u00edficos para cada objeto criado (instanciado). J\u00e1 os comportamentos s\u00e3o implementados a partir de m\u00e9todos , cuja estrutura \u00e9 praticamente igual \u00e0 fun\u00e7\u00f5es/procedimentos. A grande diferen\u00e7a \u00e9 que tais fun\u00e7\u00f5es operam no escopo do objeto, especificamente manipulando suas vari\u00e1veis de inst\u00e2ncia. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 #include <string> #include <ctime> using namespace std ; class Estudante { private : string nomeCompleto , nomeMae , email , cpf ; unsigned long numeroMatricula ; tm dataNascimento ; public : Estudante ( string nomeCompleto , string nomeMae , string email , string cpf , unsigned long numeroMatricula , tm dataNascimento ) { this -> cpf = cpf ; this -> nomeCompleto = nomeCompleto ; this -> nomeMae = nomeMae ; this -> email = email ; this -> numeroMatricula = numeroMatricula ; this -> dataNascimento = dataNascimento ; } string getNomeCompleto () { return this -> nomeCompleto ; } tm getDataNascimento () { return this -> dataNascimento ; } string getNomeMae () { return this -> nomeMae ; } string getCPF () { return this -> cpf ; } unsigned long getNumeroMatricula () { return this -> numeroMatricula ; } string getEmail () { return this -> email ; } void setEmail ( string email ) { this -> email = email ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 import java.time.LocalDate ; class Estudante { private String nomeCompleto , nomeMae , email , cpf ; private long numeroMatricula ; private LocalDate dataNascimento ; public Estudante ( String nomeCompleto , String nomeMae , String email , String cpf , long numeroMatricula , LocalDate dataNascimento ) { this . cpf = cpf ; this . dataNascimento = dataNascimento ; this . nomeCompleto = nomeCompleto ; this . nomeMae = nomeMae ; this . email = email ; this . numeroMatricula = numeroMatricula ; } String getNomeCompleto () { return this . nomeCompleto ; } LocalDate getDataNascimento () { return this . dataNascimento ; } String getNomeMae () { return this . nomeMae ; } String getCPF () { return this . cpf ; } long getNumeroMatricula (){ return this . numeroMatricula ; } String getEmail () { return this . email ; } void setEmail ( String email ) { this . email = email ; } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Estudante : def __init__ ( self , nome_completo , data_nascimento , nome_mae , cpf , matricula , email ): self . __nome_completo = nome_completo self . __data_nascimento = data_nascimento self . __nome_mae = nome_mae self . __cpf = cpf self . __email = email self . __numero_matricula = matricula def set_email ( self , email ): self . __email = email def get_email ( self ): return self . __email def get_numero_matricula ( self ): return self . __numero_matricula def get_cpf ( self ): return self . __cpf def get_nome_mae ( self ): return self . __nome_mae def get_data_nascimento ( self ): return self . __data_nascimento def get_nome_completo ( self ): return self . __nome_completo O primeiro ponto de aten\u00e7\u00e3o s\u00e3o o uso de this e self (por conven\u00e7\u00e3o) no c\u00f3digo. Embora a sintaxe mude de linguagem para linguagem, o objetivo de ambos \u00e9 o mesmo: referenciar uma vari\u00e1vel de inst\u00e2ncia ou m\u00e9todo de inst\u00e2ncia . Ainda confuso? Ent\u00e3o vamos explicar com mais detalhes. Quando o desenvolvedor codifica a classe, sua inten\u00e7\u00e3o \u00e9 operacionalizar as a\u00e7\u00f5es para cada poss\u00edvel objeto que venha a ser instanciado . Por instancia\u00e7\u00e3o devemos entender o processo de reserva de espa\u00e7o de mem\u00f3ria para o objeto residir, bem como sua inicializa\u00e7\u00e3o a partir do construtor . Nesta \u00e1rea de mem\u00f3ria em que o objeto reside h\u00e1 espa\u00e7o para armazenar os valores de seus atributos. Disso \u00e9 que surge o conceito de vari\u00e1veis de inst\u00e2ncia , ou seja, vari\u00e1veis cujo valor \u00e9 particular a cada inst\u00e2ncia (objeto) criada. J\u00e1 os m\u00e9todos n\u00e3o t\u00eam seu c\u00f3digo \"carregado\" junto a cada inst\u00e2ncia, pois eles n\u00e3o mudam sua implementa\u00e7\u00e3o a cada novo objeto. Desconsiderando casos excepcionais, todos os objetos compartilham da mesma implementa\u00e7\u00e3o definida na classe e \u00e9 neste ponto que o uso de this/self tornam-se especialmente \u00fatil. Eles representam a inst\u00e2ncia que recebeu a mensagem (objeto do contexto), o que permite codificar o comportamento para todo e qualquer objeto da classe a partir de um c\u00f3digo gen\u00e9rico. Analise o c\u00f3digo a seguir. Ele apresenta dois objetos, estudante01 e estudante02 , devidamente inicializados com os valores informados no construtor. Nos comandos de print , o valor apresentado para cpf ser\u00e1 \u00e0quele informado para o respectivo objeto. Isso \u00e9 poss\u00edvel porque, quando o objeto estudante01 recebe a mensagem get_cpf , ao rodar a implementa\u00e7\u00e3o do m\u00e9todo, o valor da refer\u00eancia self est\u00e1 apontando para estudante01 . O mesmo racioc\u00ednio vale para estudante02 e qualquer outro objeto que venha a ser instanciado. estudante01 = Estudante ( \"Fulano A. B.\" , \"12/05/2003\" , \"Ciclana A. B. \" , \"12365478963\" , \"1236584\" ) estudante02 = Estudante ( \"Beltrano F. G.\" , \"30/01/2002\" , \"Ciclana F. G. \" , \"85789632541\" , \"2365841\" ) print ( estudante01 . get_cpf ()) print ( estudante02 . get_cpf ()) Em nossa explica\u00e7\u00e3o anterior falamos de m\u00e9todo construtor mas n\u00e3o o descrevemos e para isso, vamos tomar como estudo de caso nossa implementa\u00e7\u00e3o em Python, linha \\(2\\) . Bem, sabemos que o estado de um objeto \u00e9 constitu\u00eddo pelo valor de seus atributos em um determinado instante. A quest\u00e3o \u00e9: qual ser\u00e1 o estado inicial do objeto, obtido assim que ele for instanciado? Quem determina isso \u00e9 o m\u00e9todo construtor . O nome do tipo de m\u00e9todo j\u00e1 deixa a dica: construtor , ou seja, aquele que constr\u00f3i o estado inicial. Trata-se, portanto, de um m\u00e9todo especial executado no ato da instancia\u00e7\u00e3o, cuja finalidade \u00e9 entregar o objeto em um estado v\u00e1lido, consistente. Seus par\u00e2metros constituem as depend\u00eancia que o objeto precisa receber do mundo exterior. Cada linguagem especifica como cri\u00e1-los: enquanto que Java e C++ expressam os construtores a partir de um m\u00e9todo de mesmo nome da classe e sem tipo de retorno, no Python ele obrigatoriamente deve se chamar __init__ . E, para ficar registrado, podemos ter v\u00e1rios construtores em uma mesma classe.","title":"Classes"},{"location":"programacao/oop/classes/#visibilidade","text":"A programa\u00e7\u00e3o orientada a objetos \u00e9 especialmente \u00fatil porque oferece um mecanismo de programa\u00e7\u00e3o que une atributos \u00e0 comportamentos em uma \u00fanica unidade. E, ao permitir tal recurso, possibilita tamb\u00e9m a prote\u00e7\u00e3o contra altera\u00e7\u00f5es indevidas, desde que o programador utilize os princ\u00edpios e boas pr\u00e1ticas na codifica\u00e7\u00e3o. A visibilidade de atributos \u00e9 um fator muito importante. Por visibilidade devemos entender quem ter\u00e1 acesso direto a um atributo do objeto e de antem\u00e3o devemos saber que \u00e9, no m\u00ednimo, indesejado permitir acesso direto . A t\u00e9cnica que utilizamos para esconder os atributos ( data members ) de um objeto chama-se data hiding . O objetivo \u00e9 impedir o acesso direto aos atributos e assim garantir a consist\u00eancia de estado por meio dos m\u00e9todos que o objeto exp\u00f5e ao mundo exterior 1 . Em nossa implementa\u00e7\u00e3o da classe Estudante aplicamos a t\u00e9cnica por meio dos modificadores de visibilidade do Java e C++, enquanto que no Python, utilizamos a conven\u00e7\u00e3o. O que declaramos como private (Java e C++) fica restrito ao escopo interno. Isso vale para atributos e para m\u00e9todos. Logo, acesso direto externo ao atributo email , por exemplo, n\u00e3o \u00e9 poss\u00edvel. Se for preciso ao mundo exterior ler o valor de email , ent\u00e3o criamos um m\u00e9todo accessor , cuja finalidade \u00e9 permitir a leitura de um atributo, jamais sua altera\u00e7\u00e3o. Por sua vez, se h\u00e1 necessidade de alterar o valor de um atributo, ent\u00e3o criamos um m\u00e9todo mutator para este fim. Este \u00e9 o caso dos m\u00e9todos get_email e set_email que implementamos.","title":"Visibilidade"},{"location":"programacao/oop/classes/#encapsulamento","text":"Encapsulamento \u00e9 um dos pilares da POO. Quando associamos atributos \u00e0 m\u00e9todos que os manipulam dentre de uma unidade chamada objeto, e determinamos o que ser\u00e1 p\u00fablico e o que fica restrito, estamos falando de encapsulamento. Utilizando data hiding impedimos que objetos sofram altera\u00e7\u00f5es de estado sem controle. E, ao escondermos a implementa\u00e7\u00e3o dos m\u00e9todos ou mesmo restringirmos a exposi\u00e7\u00e3o de alguns m\u00e9todos, estamos garantindo o encapsulamento e gerando uma abstra\u00e7\u00e3o de dados que exp\u00f5e apenas o que necess\u00e1rio para o mundo exterior. Perceba que a abstra\u00e7\u00e3o nos acompanha em todas as etapas, pois ela \u00e9 o mecanismo que n\u00f3s, humanos, utilizamos para simplificar a realidade. Mantemos nossa aten\u00e7\u00e3o naquilo que nos importa sobre a realidade, desconsiderando os demais aspectos. Importante perceber tamb\u00e9m que cada indiv\u00edduo abstrai \u00e0quilo que lhe conv\u00e9m, a partir de seu ponto de vista da realidade. Contudo, essas diferen\u00e7as precisam ser minimizadas no projeto de software orientado a objetos atrav\u00e9s da observa\u00e7\u00e3o atenta das regras e caracter\u00edsticas do dom\u00ednio do problema, que ir\u00e3o se materializar nos objetos 2 .","title":"Encapsulamento"},{"location":"programacao/oop/classes/#metodos","text":"Os comportamentos de um objeto s\u00e3o codificados em m\u00e9todos . Em sua constru\u00e7\u00e3o, m\u00e9todos assemelham-se a rotinas, inclusive na sintaxe. A grande diferen\u00e7a est\u00e1 no papel desempenhado. Enquanto rotinas s\u00e3o executadas para transformar dados recebidos por par\u00e2metro ou dispon\u00edveis no escopo, sendo invocadas quando necess\u00e1rio, os m\u00e9todos s\u00e3o respons\u00e1veis por atender \u00e0 mensagens recebidas de outro objeto. Quando um m\u00e9todo executa, ele est\u00e1 respondendo a uma mensagem e sua execu\u00e7\u00e3o ir\u00e1 considerar o estado do objeto, seus demais comportamentos e os dados eventualmente recebidos como argumento. Os m\u00e9todos que o objeto torna dispon\u00edvel ao mundo externo comp\u00f5em sua interface de comunica\u00e7\u00e3o e somente por meio deles outros objetos podem interagir enviando mensagens. Neste sentido, o objeto reage ao est\u00edmulo, executando a a\u00e7\u00e3o associada \u00e0quela mensagem espec\u00edfica. \u00c9 a partir desta troca de mensagens entre objetos que se alcan\u00e7a as funcionalidades do sistema. No c\u00f3digo abaixo voc\u00ea ir\u00e1 perceber que o objeto e1 est\u00e1 recebendo uma mensagem para alterar o valor de e-mail armazenado. Como argumento est\u00e1 sendo enviado o novo endere\u00e7o. #... e1 = Estudante ( \"Fulano A. B.\" , \"12/05/2003\" , \"Ciclana A. B. \" , \"12365478963\" , \"1236584\" ) e1 . set_email ( \"estudante01@instituicao.edu\" ) #...","title":"M\u00e9todos"},{"location":"programacao/oop/classes/#sobrecarga","text":"Sobrecarga \u00e9 o recurso que algumas linguagens de programa\u00e7\u00e3o oferecem para criarmos m\u00faltiplas implementa\u00e7\u00f5es de um mesmo m\u00e9todo, preservando seu nome mas variando tipos e/ou quantidades de par\u00e2metros formais em sua assinatura. \u00c9 um recurso t\u00edpico de linguagens estaticamente tipadas , ou seja, \u00e0quelas em que definimos a priori o tipo das vari\u00e1veis e isso \u00e9 utilizado como crit\u00e9rio de valida\u00e7\u00e3o sem\u00e2ntica no momento da compila\u00e7\u00e3o . Ao se deparar com o nome de um m\u00e9todo (ou fun\u00e7\u00e3o) sobrecarregado, o compilador ir\u00e1 utilizar o tipo/quantidade dos argumentos para encontrar a \"vers\u00e3o\" mais adequada ( best match ). No caso de linguagens din\u00e2micas, a sobrecarga n\u00e3o \u00e9 recurso nativo (nem necess\u00e1rio), ficando a cargo de bibliotecas externas habilitar tal possibilidade no c\u00f3digo. Na sequ\u00eancia apresentamos exemplos em tr\u00eas linguagens: C++, Java e Python. Duas delas passam por processo de compila\u00e7\u00e3o (C++ e Java), logo a sobrecarga \u00e9 recurso nativo. J\u00e1 para o Python, h\u00e1 a necessidade de importar um m\u00f3dulo espec\u00edfico, que, embora funcione corretamente no c\u00f3digo em quest\u00e3o, mostra ser pouco coerente, haja vista que podemos obter o mesmo resultado de forma mais simples (e correta). Logo, considere a implementa\u00e7\u00e3o em Python como uma representa\u00e7\u00e3o for\u00e7ada para demonstrar o recurso, mas n\u00e3o como pr\u00e1tica recomendada de codifica\u00e7\u00e3o nesta linguagem. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 #include <ctime> #include <string> using namespace std ; enum class Conceito { A , B , C , D , E }; class Avaliacao { private : tm data ; string descricao ; int pesoInteiro ; Conceito pesoConceito ; public : Avaliacao ( tm data , string descricao ) { this -> data = data ; this -> descricao = descricao ; } void setPeso ( Conceito c ) { this -> pesoConceito = c ; } void setPeso ( int peso ) { this -> pesoInteiro = peso ; } }; Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import java.time.LocalDate ; public enum Conceito { A , B , C , D , E ; } public class Avaliacao { private LocalDate data ; private String descricao ; private int pesoInteiro ; private Conceito pesoConceito ; public Avaliacao ( LocalDate data , String descricao ) { this . data = data ; this . descricao = descricao ; } public void setPeso ( Conceito c ) { this . pesoConceito = c ; } public void setPeso ( int peso ) { this . pesoInteiro = peso ; } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 from multipledispatch import dispatch from enum import Enum class Conceito ( Enum ): A = 1 B = 2 C = 3 D = 4 E = 5 class Avaliacao (): def __init__ ( self , data , descricao ): self . data = data ; self . descricao = descricao ; self . peso_inteiro = 0 ; self . peso_conceito = None ; @dispatch ( Conceito ) def set_peso ( self , c ): self . peso_conceito = c @dispatch ( int ) def set_peso ( self , peso ): self . peso_inteiro = peso Sonoo Jaiswal. What is data hiding? 2021. URL: https://www.javatpoint.com/what-is-data-hiding . \u21a9 Carl Erickson. Object oriented programming. 2009. URL: file:///home/diego/%C3%81rea%20de%20Trabalho/ObjectOrientedProgramming.pdf . \u21a9","title":"Sobrecarga"},{"location":"programacao/oop/excecoes/","text":"As exce\u00e7\u00f5es representam eventos que comprometem o fluxo normal de execu\u00e7\u00e3o dos programas. Embora consideradas uma situa\u00e7\u00e3o an\u00f4mala, as exce\u00e7\u00f5es s\u00e3o comuns e precisam ser consideradas no c\u00f3digo em tempo de implementa\u00e7\u00e3o. Nas linguagens orientadas a objetos, o evento de runtime lan\u00e7a um objeto que representa a exce\u00e7\u00e3o que ocorreu. A partir deste objeto podemos ent\u00e3o realizar o tratamento, representado por instru\u00e7\u00f5es que representam as a\u00e7\u00f5es de contorno. O recurso que boa parte das linguagens de programa\u00e7\u00e3o oferece \u00e9 envolver as instru\u00e7\u00f5es pass\u00edveis de erros em runtime com um bloco de tratamento. \u00c9 comum que este bloco utilize as palavras reservadas try e catch . Vamos analisar o funcionamento a partir de um exemplo escrito em Java. Nosso c\u00f3digo faz a leitura de um arquivo README.md , imprimindo na sa\u00edda padr\u00e3o cada linha de conte\u00fado. A leitura de arquivos \u00e9 suscet\u00edvel a diversos problemas: falta de permiss\u00e3o, arquivo inexistente, arquivo corrompido, entre outros. Sabendo disso, \u00e9 prudente (e mandat\u00f3rio no Java) construirmos o c\u00f3digo pensando na possibilidade do erro. O primeiro passo compreende envolver as instru\u00e7\u00f5es do fluxo normal de execu\u00e7\u00e3o com try . Ap\u00f3s, criamos um ou mais blocos catch para tratar a poss\u00edvel ocorr\u00eancia da exce\u00e7\u00e3o indicada pelo tipo ( FileNotFoundException e IOException ). Se, ao executar uma das instru\u00e7\u00f5es dentro do bloco try ocorrer algum erro, o fluxo \u00e9 desviado para o bloco de tratamento ( catch ) que melhor adere ao tipo de evento ocorrido. Tal mecanismo de match faz uso do relacionamento de heran\u00e7a para determinar o tipo mais espec\u00edfico compat\u00edvel com a exce\u00e7\u00e3o gerada. Java 1 2 3 4 5 6 7 8 9 10 try { File arq = new File ( \"README.md\" ); BufferedReader reader = new BufferedReader ( new FileReader ( arq )); reader . lines (). forEach ( System . out :: println ); reader . close (); } catch ( FileNotFoundException e ) { System . out . println ( \"Arquivo n\u00e3o encontrado. Informe o caminho correto\" ); } catch ( IOException e ) { System . out . println ( \"Problema geral de entrada e sa\u00edda\" ); } Observe como \u00e9 semelhante em Python. A constru\u00e7\u00e3o e opera\u00e7\u00e3o s\u00e3o equivalentes, mudando apenas a palavra reservada de catch para except . Python 1 2 3 4 5 6 7 try : arquivo = open ( 'READMEs.md' ) [ print ( line ) for line in arquivo . readlines ()] except FileNotFoundError : print ( 'Arquivo n\u00e3o encontrado' ) except Exception : print ( 'Erro gen\u00e9rico' ) As linguagem de programa\u00e7\u00e3o apresentam taxionomias de exce\u00e7\u00f5es no core de suas APIs. Elas normalmente representam situa\u00e7\u00f5es de erro gen\u00e9ricos e podem ser utilizadas para mapear as exce\u00e7\u00f5es mais frequentes que um programa incorre 1 2 . Outras exce\u00e7\u00f5es espec\u00edficas podem ser criadas pelo desenvolvedor a partir da deriva\u00e7\u00e3o das gen\u00e9ricas, a fim de representar erros de mais alto n\u00edvel (como notificar um CPF inv\u00e1lido). Veja na sequ\u00eancia a hierarquia de exce\u00e7\u00f5es nativas da linguagem Java. Fonte: https://rollbar.com/blog/java-exceptions-hierarchy-explained/ H\u00e1 uma terceira se\u00e7\u00e3o, opcional, que podemos agregar ao tratamento de exce\u00e7\u00f5es chamada finally . \u00c9 aplicada para comandos que devem ser executadas em qualquer circunst\u00e2ncia, tanto no fluxo normal quanto na eventual ocorr\u00eancia de exce\u00e7\u00f5es. Python 1 2 3 4 5 6 7 8 9 try : arquivo = open ( 'README.md' ) [ print ( line ) for line in arquivo . readlines ()] except FileNotFoundError : print ( 'Arquivo n\u00e3o encontrado' ) except Exception : print ( 'Erro gen\u00e9rico' ) finally : print ( 'Processamento conclu\u00eddo' ) Java 1 2 3 4 5 6 7 8 9 10 11 12 try { File arq = new File ( \"README.md\" ); BufferedReader reader = new BufferedReader ( new FileReader ( arq )); reader . lines (). forEach ( System . out :: println ); reader . close (); } catch ( FileNotFoundException e ) { System . out . println ( \"Arquivo n\u00e3o encontrado. Informe o caminho correto\" ); } catch ( IOException e ) { System . out . println ( \"Problema geral de entrada e sa\u00edda\" ); } finally { monitor . notificarProcessamento ( \"README.md\" ); } Unchecked exceptions e checked exceptions \u00b6 \u00c9 uma subdivis\u00e3o das exce\u00e7\u00f5es utilizada na linguagem Java. Checked exception \u00e9 toda aquela exce\u00e7\u00e3o verificada em tempo de compila\u00e7\u00e3o. Para estas, \u00e9 exigido que seja feito tratamento via try-catch ou que o m\u00e9todo seja declarado com a cl\u00e1usula throws . Checked exception s\u00e3o classes derivadas de Exception . Unchecked exceptions , por sua vez, n\u00e3o s\u00e3o verificadas em tempo de compila\u00e7\u00e3o. Podem ocorrer durante a execu\u00e7\u00e3o do programa, pois dependem de situa\u00e7\u00f5es do ambiente e do pr\u00f3prio estado de execu\u00e7\u00e3o. Acesso a \u00edndices inexistentes em arrays, divis\u00e3o por zero, chamada de m\u00e9todo em refer\u00eancias nulas s\u00e3o exemplos deste tipo de exce\u00e7\u00e3o. Unchecked exception s\u00e3o classes derivadas de RuntimeException . Exce\u00e7\u00f5es customizadas \u00b6 Quando precisamos notificar os usu\u00e1rios de nossos m\u00e9todos acerca de uma situa\u00e7\u00e3o considerada inv\u00e1lida, \u00e9 boa pr\u00e1tica criarmos uma exce\u00e7\u00e3o customizada para tal finalidade. A nova exce\u00e7\u00e3o deve ser derivada de outra existente, normalmente uma das nativas conforme determina a boa pr\u00e1tica. No c\u00f3digo que segue est\u00e1 sendo definida a classe SaldoInsuficienteException , que ir\u00e1 representar um novo tipo de exce\u00e7\u00e3o no programa. Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class SaldoInsuficienteException extends Exception { private static final long serialVersionUID = 1L ; public SaldoInsuficienteException ( String mensagem ) { super ( mensagem ); } } public class Conta { //...atributos e m\u00e9todos anteriores... public void sacar ( double valor ) throws SaldoInsuficienteException { if (( this . saldo + this . limite ) >= valor ) this . saldo -= valor ; else throw new SaldoInsuficienteException ( String . format ( \"N\u00e3o \u00e9 poss\u00edvel retirar %f da conta %s\" , valor , this )); } } Python Software Foundation. Built-in exceptions. 2021. URL: https://docs.python.org/3/library/exceptions.html . \u21a9 TutorialsPoint. Java - exceptions. 2021. URL: https://www.tutorialspoint.com/java/java_exceptions.htm . \u21a9","title":"Exce\u00e7\u00f5es"},{"location":"programacao/oop/excecoes/#unchecked-exceptions-e-checked-exceptions","text":"\u00c9 uma subdivis\u00e3o das exce\u00e7\u00f5es utilizada na linguagem Java. Checked exception \u00e9 toda aquela exce\u00e7\u00e3o verificada em tempo de compila\u00e7\u00e3o. Para estas, \u00e9 exigido que seja feito tratamento via try-catch ou que o m\u00e9todo seja declarado com a cl\u00e1usula throws . Checked exception s\u00e3o classes derivadas de Exception . Unchecked exceptions , por sua vez, n\u00e3o s\u00e3o verificadas em tempo de compila\u00e7\u00e3o. Podem ocorrer durante a execu\u00e7\u00e3o do programa, pois dependem de situa\u00e7\u00f5es do ambiente e do pr\u00f3prio estado de execu\u00e7\u00e3o. Acesso a \u00edndices inexistentes em arrays, divis\u00e3o por zero, chamada de m\u00e9todo em refer\u00eancias nulas s\u00e3o exemplos deste tipo de exce\u00e7\u00e3o. Unchecked exception s\u00e3o classes derivadas de RuntimeException .","title":"Unchecked exceptions e checked exceptions"},{"location":"programacao/oop/excecoes/#excecoes-customizadas","text":"Quando precisamos notificar os usu\u00e1rios de nossos m\u00e9todos acerca de uma situa\u00e7\u00e3o considerada inv\u00e1lida, \u00e9 boa pr\u00e1tica criarmos uma exce\u00e7\u00e3o customizada para tal finalidade. A nova exce\u00e7\u00e3o deve ser derivada de outra existente, normalmente uma das nativas conforme determina a boa pr\u00e1tica. No c\u00f3digo que segue est\u00e1 sendo definida a classe SaldoInsuficienteException , que ir\u00e1 representar um novo tipo de exce\u00e7\u00e3o no programa. Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public class SaldoInsuficienteException extends Exception { private static final long serialVersionUID = 1L ; public SaldoInsuficienteException ( String mensagem ) { super ( mensagem ); } } public class Conta { //...atributos e m\u00e9todos anteriores... public void sacar ( double valor ) throws SaldoInsuficienteException { if (( this . saldo + this . limite ) >= valor ) this . saldo -= valor ; else throw new SaldoInsuficienteException ( String . format ( \"N\u00e3o \u00e9 poss\u00edvel retirar %f da conta %s\" , valor , this )); } } Python Software Foundation. Built-in exceptions. 2021. URL: https://docs.python.org/3/library/exceptions.html . \u21a9 TutorialsPoint. Java - exceptions. 2021. URL: https://www.tutorialspoint.com/java/java_exceptions.htm . \u21a9","title":"Exce\u00e7\u00f5es customizadas"},{"location":"programacao/oop/introducao/","text":"O paradigma da programa\u00e7\u00e3o orientada a objetos (POO) \u00e9 relativamente antigo, remontando \u00e0 d\u00e9cada de 1960. Contudo, se tornou popular tempos ap\u00f3s, por meio de linguagens de programa\u00e7\u00e3o populares no mercado de software da \u00e9poca 1 . Basicamente podemos resumir a programa\u00e7\u00e3o orientada a objetos como qualquer estilo de programa\u00e7\u00e3o que se baseia no conceito de objeto , que \u00e9 uma estrutura que agrega atributos e comportamentos de forma encapsulada. Veja, este \u00e9 o grande trunfo do paradigma: relacionar dados e comportamentos em uma \u00fanica estrutura . Se analisarmos a evolu\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o, iremos perceber um esfor\u00e7o comum em distanciar a forma de expressar algoritmos da linguagem bin\u00e1ria. O objetivo foi e ainda \u00e9 elevar o n\u00edvel de abstra\u00e7\u00e3o das linguagens de programa\u00e7\u00e3o para a forma que n\u00f3s, humanos, observamos, interpretamos e entendemos o mundo. Certamente um passo importante neste contexto foi a possibilidade de se utilizar procedimentos (rotinas) na codifica\u00e7\u00e3o. Tal recurso trouxe aos desenvolvedores maior capacidade de reutilizar c\u00f3digo, segmentar e reduzir complexidade, tornando a codifica\u00e7\u00e3o uma atividade mais eficiente e, em termos gerais, menos propensa a bugs (com muitas ressalvas). Atrav\u00e9s do uso de rotinas, um software \u00e9 segmentado em diversas pequenas unidades de prop\u00f3sito espec\u00edfico, que, ao serem executadas na ordem correta, geram ao final as funcionalidades esperadas. J\u00e1 os dados necess\u00e1rios ao programa s\u00e3o processados atrav\u00e9s de vari\u00e1veis locais ou globais, comumente sendo enviados de procedimento em procedimento como um pipeline de opera\u00e7\u00f5es. N\u00e3o h\u00e1 rela\u00e7\u00e3o formal entre as rotinas e os dados por elas processados, pois s\u00e3o estruturas dissociadas na codifica\u00e7\u00e3o. O resultado \u00e9 algo semelhante ao diagrama abaixo. stateDiagram-v2 [*] --> main main --> funcao_02 funcao_02 --> funcao_03 funcao_02 --> funcao_01 funcao_03 --> funcao_04 funcao_03 --> funcao_01 funcao_04 --> funcao_01 funcao_01 --> [*] note right of funcao_02: Dados locais e globais note left of funcao_03: Dados locais e globais note right of funcao_04: Dados locais e globais note right of funcao_01: Dados locais e globais Embora tenha sido um ineg\u00e1vel avan\u00e7o, a reutiliza\u00e7\u00e3o de c\u00f3digo via procedimentos ainda era limitado e o caminho de execu\u00e7\u00e3o do programa por vezes se tornava t\u00e3o confuso como um prato de espaguete, tornando a manuten\u00e7\u00e3o dif\u00edcil. Mas, o maior dos problemas origina-se da separa\u00e7\u00e3o entre dados e procedimentos. Isso porque todo procedimento precisa conhecer detalhadamente a estrutura dos dados que est\u00e1 manipulando e, quando esta estrutura muda, torna-se necess\u00e1rio realizar altera\u00e7\u00f5es em diversos pontos do c\u00f3digo, o que \u00e9 p\u00e9ssimo em termos de engenharia 1 . Vamos tentar ilustrar essa separa\u00e7\u00e3o entre procedimentos e dados por meio de um c\u00f3digo escrito em C++. O programa define duas estruturas, ITEM_VENDA e VENDA , as quais representam os dados que o programa deve manipular. J\u00e1 as fun\u00e7\u00f5es registrarVenda , venderItem e calcularImpostos s\u00e3o respons\u00e1veis por a\u00e7\u00f5es espec\u00edficas sobre os dados e por tal necessidade, devem ter conhecimento sobre a estrutura dos mesmos. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 #include <iostream> #include <ctime> using namespace std ; struct ITEM_VENDA { float valorVendaProduto = 0 ; float quantidadeVenda = 0 ; float desconto = 0 ; }; struct VENDA { string cliente ; time_t dataHora ; ITEM_VENDA itens [ 10 ]; }; VENDA registrarVenda (){ //realiza a abertura da venda } ITEM_VENDA venderItem (){ //realiza o registro de um item vendido } float calcularImpostos ( VENDA v ){ //calcula os impostos da venda recebida como argumento } int main (){ VENDA v1 = registrarVenda (); v1 . itens [ 0 ] = venderItem (); v1 . itens [ 1 ] = venderItem (); v1 . itens [ 2 ] = venderItem (); v1 . itens [ 3 ] = venderItem (); float tributos = calcularImpostos ( v1 ); } Perceba que a fun\u00e7\u00e3o main de nosso programa realiza chamada \u00e0s demais fun\u00e7\u00f5es em uma sequ\u00eancia espec\u00edfica, passando a vari\u00e1vel que cont\u00e9m os dados de uma para a outra. Logo, gradativamente, a estrutura de dados em mem\u00f3ria representada pela vari\u00e1vel ser\u00e1 transformada/alimentada at\u00e9 obtermos o resultado esperado. Os problemas dessa abordagem concentram-se em dois pontos. O primeiro deles \u00e9 a exposi\u00e7\u00e3o direta da estrutura de dados \u00e0s fun\u00e7\u00f5es, o que permite altera\u00e7\u00f5es sem qualquer controle. Por exemplo, nada impede que a quantidade vendida de um produto esteja negativa, o que \u00e9 incorreto. O segundo ponto \u00e9 a depend\u00eancia da implementa\u00e7\u00e3o das fun\u00e7\u00f5es para com a estrutura de dados, que gera alto acoplamento entre os componentes. O efeito direto do alto acoplamento \u00e9 a propaga\u00e7\u00e3o de pontos de manuten\u00e7\u00e3o a m\u00ednima mudan\u00e7a que ocorrer na estrutura de dados, por exemplo. Todos estes problemas seriam melhor endere\u00e7ados se pudessemos encapsular dados e comportamentos em um \u00fanico componente. Uma solu\u00e7\u00e3o parcial ao problema da falta de encapsulamento veio com as linguagens de programa\u00e7\u00e3o que permitiam implementar o conceito de m\u00f3dulo, um componente que cont\u00e9m dados e procedimentos que os manipulam, cujo acesso externo se d\u00e1 por meio de uma interface. Embora isso resolva a quest\u00e3o da altera\u00e7\u00e3o do estado, temos a impossibilidade de derivar um m\u00f3dulo a partir de outro, o que limita o reuso de c\u00f3digo 1 . Estado Estado refere-se \u00e0 \"fotografia\" do conjunto de valores mantidos pelo componente em um determinado instante. Chegamos ent\u00e3o \u00e0 POO, uma estrat\u00e9gia de programa\u00e7\u00e3o que modela o problema a partir de objetos e os faz interagir entre si para obter os resultados. Deixamos de lado a chamada de in\u00fameros procedimentos para orientar o fluxo do programa e passamos a ter objetos trocando mensagens, tal qual uma simula\u00e7\u00e3o viva da solu\u00e7\u00e3o almejada. Al\u00e9m de uma forma diferente de codificar, a POO imp\u00f5e uma mudan\u00e7a significativa na maneira de elaborar o algoritmo. Observe o exemplo: graph TD A((obj1)) -->|sacar| B((obj2)) B((obj2)) --> |sacar| C((obj3)) B((obj2)) --> |sacar| D((obj4)) D((obj4)) --> |notificarSaque| D C((obj3)) --> |notificarSaque| C C((obj3))--> |reduzirSaldo| E((obj5)) D((obj4))--> |reduzirSaldo| E((obj5)) Mas antes de pensarmos nos detalhes de implementa\u00e7\u00e3o, precisamos conhecer os quatro pilares do paradigma da orienta\u00e7\u00e3o a objetos, pois s\u00e3o eles que orientam a concep\u00e7\u00e3o e implementa\u00e7\u00e3o de softwares por meio desta estrat\u00e9gia. Vamos a eles ent\u00e3o. Abstra\u00e7\u00e3o \u00b6 A abstra\u00e7\u00e3o \u00e9 um processo que permite identificar de um contexto somente o que \u00e9 de interesse, ignorando os demais detalhes. Logo, na POO, a abstra\u00e7\u00e3o nos permite pensar objetos que contenham apenas atributos e comportamentos necess\u00e1rios \u00e0 resolu\u00e7\u00e3o do problema 2 3 . O processo de abstra\u00e7\u00e3o pode ser entendido, portanto, como uma estrat\u00e9gia em que mantemos o foco em ideias, qualidades e propriedades de um assunto, deixando as minuciais de lado. \u00c9 olhar para o grande cen\u00e1rio, mas ver apenas elementos de interesse. Podemos entender tamb\u00e9m a abstra\u00e7\u00e3o como a estrat\u00e9gia de esconder detalhes de implementa\u00e7\u00e3o dos usu\u00e1rios. Isso significa que a manipula\u00e7\u00e3o dos objetos n\u00e3o requer e nem deve precisar do conhecimento de opera\u00e7\u00e3o interno. Somente a funcionalidade \u00e9 exposta ( o que o objeto faz), nunca a sua implementa\u00e7\u00e3o ( como faz ) 2 3 . Encapsulamento \u00b6 A POO permite associar em um \u00fanico componente dados e comportamentos que manipulam estes dados, de sorte a oferecer meios de evitar a altera\u00e7\u00e3o indevida de estado a partir de agentes externos. Tal recurso chama-se encapsulamento , uma \"membrana\" que isola os detalhes internos do objeto do mundo exterior. Podemos entender, portanto, que encapsular, na perspectiva da POO, compreende proteger um objeto do acesso direto \u00e0s suas propriedades, sem passar por um m\u00e9todo . Comumente as vari\u00e1veis de inst\u00e2ncia t\u00eam sua manipula\u00e7\u00e3o restrita aos m\u00e9todos, de sorte que qualquer mudan\u00e7a de estado do objeto s\u00f3 ocorre por meio deles. Heran\u00e7a \u00b6 Muitos elementos do mundo real podem ser organizados em uma taxionomia. Isso porque diferentes indiv\u00edduos (objetos), mesmo sendo diferentes, compartilham de caracter\u00edsticas comuns em alguns contextos. Vamos imaginar um site de delivery que oferece fast food , culin\u00e1ria oriental, culin\u00e1ria tropical e itens de supermercado. Ent\u00e3o, pelo app , voc\u00ea pode comprar sab\u00e3o e um hot dog da mesma forma. J\u00e1 no mundo real, s\u00e3o coisas completamente diferentes. O que pode haver de comum entre eles? A resposta \u00e9 que ambos s\u00e3o produtos, e, na perspectiva de produto, compartilham de atributos como valor de venda , quantidade em estoque , descri\u00e7\u00e3o , imagens , entre outros. Al\u00e9m disso, ambos podem ser vendidos, o que representa uma a\u00e7\u00e3o. E, de forma espec\u00edfica, cada item pode conter atributos e m\u00e9todos espec\u00edficos. A rela\u00e7\u00e3o de heran\u00e7a \u00e9 o recurso da POO que permite a objetos herdar atributos e comportamentos de outro de natureza mais gen\u00e9rica. Em nosso exemplo, podemos pensar em tr\u00eas classes: Produto , Culinario e Supermercado . A classe Produto \u00e9 a gen\u00e9rica e serve de superclasse \u00e0 Culinario e Supermercado . classDiagram Produto < |-- Culinario Produto < |-- Supermercado class Produto{ -float valorVenda -float quantidadeEstoque -String descricao +vender() } class Culinario{ -int calorias } class Supermercado{ -String marca -String codigoBarras } Polimorfismo \u00b6 Polimorfismo versa sobre a possibilidade de uma mesma a\u00e7\u00e3o ser realizada de formas diferentes em objetos que compartilham de uma mesma interface. Tal recurso reduz significativamente a necessidade de escrita de c\u00f3digo e favorece a cria\u00e7\u00e3o de componentes com baixo acoplamento. \u00c9 como se envi\u00e1ssemos a mensagem correr para um velocista e um ciclista. Cada qual executaria a a\u00e7\u00e3o associada a mensagem de forma diferente, mas ambos tem capacidade de compreender e execu\u00e7\u00e3o a mesma a\u00e7\u00e3o de alto n\u00edvel. Anthony Sintes. Aprenda Programa\u00e7\u00e3o Orientada a Objetos em 21 dias . Pearson, 2002. \u21a9 \u21a9 \u21a9 Geeks For Geeks. Abstraction in java. 2021. URL: https://www.geeksforgeeks.org/abstraction-in-java-2/ . \u21a9 \u21a9 Hamza Ahmed. Four pillars of object oriented programming \\(oop\\) . 2021. URL: https://medium.com/@hamzzza.ahmed95/four-pillars-of-object-oriented-programming-oop-e8d7822aa219 . \u21a9 \u21a9","title":"Introdu\u00e7\u00e3o"},{"location":"programacao/oop/introducao/#abstracao","text":"A abstra\u00e7\u00e3o \u00e9 um processo que permite identificar de um contexto somente o que \u00e9 de interesse, ignorando os demais detalhes. Logo, na POO, a abstra\u00e7\u00e3o nos permite pensar objetos que contenham apenas atributos e comportamentos necess\u00e1rios \u00e0 resolu\u00e7\u00e3o do problema 2 3 . O processo de abstra\u00e7\u00e3o pode ser entendido, portanto, como uma estrat\u00e9gia em que mantemos o foco em ideias, qualidades e propriedades de um assunto, deixando as minuciais de lado. \u00c9 olhar para o grande cen\u00e1rio, mas ver apenas elementos de interesse. Podemos entender tamb\u00e9m a abstra\u00e7\u00e3o como a estrat\u00e9gia de esconder detalhes de implementa\u00e7\u00e3o dos usu\u00e1rios. Isso significa que a manipula\u00e7\u00e3o dos objetos n\u00e3o requer e nem deve precisar do conhecimento de opera\u00e7\u00e3o interno. Somente a funcionalidade \u00e9 exposta ( o que o objeto faz), nunca a sua implementa\u00e7\u00e3o ( como faz ) 2 3 .","title":"Abstra\u00e7\u00e3o"},{"location":"programacao/oop/introducao/#encapsulamento","text":"A POO permite associar em um \u00fanico componente dados e comportamentos que manipulam estes dados, de sorte a oferecer meios de evitar a altera\u00e7\u00e3o indevida de estado a partir de agentes externos. Tal recurso chama-se encapsulamento , uma \"membrana\" que isola os detalhes internos do objeto do mundo exterior. Podemos entender, portanto, que encapsular, na perspectiva da POO, compreende proteger um objeto do acesso direto \u00e0s suas propriedades, sem passar por um m\u00e9todo . Comumente as vari\u00e1veis de inst\u00e2ncia t\u00eam sua manipula\u00e7\u00e3o restrita aos m\u00e9todos, de sorte que qualquer mudan\u00e7a de estado do objeto s\u00f3 ocorre por meio deles.","title":"Encapsulamento"},{"location":"programacao/oop/introducao/#heranca","text":"Muitos elementos do mundo real podem ser organizados em uma taxionomia. Isso porque diferentes indiv\u00edduos (objetos), mesmo sendo diferentes, compartilham de caracter\u00edsticas comuns em alguns contextos. Vamos imaginar um site de delivery que oferece fast food , culin\u00e1ria oriental, culin\u00e1ria tropical e itens de supermercado. Ent\u00e3o, pelo app , voc\u00ea pode comprar sab\u00e3o e um hot dog da mesma forma. J\u00e1 no mundo real, s\u00e3o coisas completamente diferentes. O que pode haver de comum entre eles? A resposta \u00e9 que ambos s\u00e3o produtos, e, na perspectiva de produto, compartilham de atributos como valor de venda , quantidade em estoque , descri\u00e7\u00e3o , imagens , entre outros. Al\u00e9m disso, ambos podem ser vendidos, o que representa uma a\u00e7\u00e3o. E, de forma espec\u00edfica, cada item pode conter atributos e m\u00e9todos espec\u00edficos. A rela\u00e7\u00e3o de heran\u00e7a \u00e9 o recurso da POO que permite a objetos herdar atributos e comportamentos de outro de natureza mais gen\u00e9rica. Em nosso exemplo, podemos pensar em tr\u00eas classes: Produto , Culinario e Supermercado . A classe Produto \u00e9 a gen\u00e9rica e serve de superclasse \u00e0 Culinario e Supermercado . classDiagram Produto < |-- Culinario Produto < |-- Supermercado class Produto{ -float valorVenda -float quantidadeEstoque -String descricao +vender() } class Culinario{ -int calorias } class Supermercado{ -String marca -String codigoBarras }","title":"Heran\u00e7a"},{"location":"programacao/oop/introducao/#polimorfismo","text":"Polimorfismo versa sobre a possibilidade de uma mesma a\u00e7\u00e3o ser realizada de formas diferentes em objetos que compartilham de uma mesma interface. Tal recurso reduz significativamente a necessidade de escrita de c\u00f3digo e favorece a cria\u00e7\u00e3o de componentes com baixo acoplamento. \u00c9 como se envi\u00e1ssemos a mensagem correr para um velocista e um ciclista. Cada qual executaria a a\u00e7\u00e3o associada a mensagem de forma diferente, mas ambos tem capacidade de compreender e execu\u00e7\u00e3o a mesma a\u00e7\u00e3o de alto n\u00edvel. Anthony Sintes. Aprenda Programa\u00e7\u00e3o Orientada a Objetos em 21 dias . Pearson, 2002. \u21a9 \u21a9 \u21a9 Geeks For Geeks. Abstraction in java. 2021. URL: https://www.geeksforgeeks.org/abstraction-in-java-2/ . \u21a9 \u21a9 Hamza Ahmed. Four pillars of object oriented programming \\(oop\\) . 2021. URL: https://medium.com/@hamzzza.ahmed95/four-pillars-of-object-oriented-programming-oop-e8d7822aa219 . \u21a9 \u21a9","title":"Polimorfismo"},{"location":"programacao/oop/polimorfismo/","text":"","title":"Polimorfismo"},{"location":"programacao/oop/relacoes/","text":"Um dos principais benef\u00edcios oriundos da abstra\u00e7\u00e3o provida pela orienta\u00e7\u00e3o a objetos foi ampliar a possibilidade de reutilizar c\u00f3digo. Isso n\u00e3o \u00e9 importante somente pela redu\u00e7\u00e3o do tempo de codifica\u00e7\u00e3o do software, mas tamb\u00e9m \u00e9 pelo melhor controle das responsabilidades (cada componente \u00e9 respons\u00e1vel por uma \u00fanica tarefa), amplia\u00e7\u00e3o da cobertura de teste e redu\u00e7\u00e3o da incid\u00eancia de bugs no c\u00f3digo. Na defini\u00e7\u00e3o de uma classe, \u00e9 comum precisarmos estabelecer relacionamentos com outras classes. Logo, a estrutura de componentes de um software constru\u00eddo na perspectiva da orienta\u00e7\u00e3o a objetos contempla componentes e rela\u00e7\u00f5es entre componentes. A estas rela\u00e7\u00f5es chamamos genericamente de depend\u00eancias . Depend\u00eancia \u00b6 A depend\u00eancia entre duas classes ocorre quando uma classe \\(A\\) utiliza recursos da classe \\(B\\) , de modo que altera\u00e7\u00f5es na classe \\(B\\) podem afetar a classe \\(A\\) . classDiagram direction LR ClassA ..> ClassB Depend\u00eancias s\u00e3o extremamente comuns e se estabelecem quando utilizamos na classe \\(A\\) a classe \\(B\\) para definir tipo de atributos, tipo de retorno de m\u00e9todo, tipo de par\u00e2metros, tipo de vari\u00e1veis ou simplesmente fazemos uso de um m\u00e9todo est\u00e1tico de provido por \\(B\\) . Pela grande ocorr\u00eancia de depend\u00eancias entre classes, precisamos ser mais seletivos quando a observamos, mantendo aten\u00e7\u00e3o \u00e0quelas em que existem restri\u00e7\u00f5es/especificidades maiores que o trivial uso. Neste caso, pensamos em termos de associa\u00e7\u00f5es e especializa\u00e7\u00f5es/generaliza\u00e7\u00f5es. Associa\u00e7\u00e3o \u00b6 A associa\u00e7\u00e3o \u00e9 um relacionamento de depend\u00eancia que indica a exist\u00eancia de comunica\u00e7\u00e3o entre duas classes. Pode ser unidirecional ou bidirecional e tamb\u00e9m comporta informa\u00e7\u00e3o de multiplicidade. A associa\u00e7\u00e3o implica no uso de um tipo em outro. A dire\u00e7\u00e3o da associa\u00e7\u00e3o d\u00e1 o caminho poss\u00edvel para navega\u00e7\u00e3o. Em nosso exemplo, temos a classe Venda fazendo uso de um objeto de Cliente . Toda venda ter\u00e1 \\(1\\) cliente e, na perspectiva do cliente, poder\u00e1 haver diversas vendas associadas a ele. Contudo, podemos navegar apenas de Venda para Cliente , ou seja, \u00e9 unidirecional . classDiagram Venda \"0..*\" --> \"1..1\" Cliente Se quis\u00e9ssemos uma associa\u00e7\u00e3o bidirecional , expressar\u00edamos a rela\u00e7\u00e3o da seguinte forma: classDiagram Venda \"0..*\" < --> \"1..1\" Cliente Agrega\u00e7\u00e3o \u00b6 Na agrega\u00e7\u00e3o, duas classes relacionam-se por meio de um v\u00ednculo do tipo todo-parte ou tem um . Neste tipo de associa\u00e7\u00e3o , temos um classe que est\u00e1 contida ou \u00e9 uma parte de de outra classe. A agrega\u00e7\u00e3o ocorre quando o objeto todo requer objetos parte para complement\u00e1-lo, para ter sentido completo. \u00c9 uma rela\u00e7\u00e3o fraca entre os componentes, de modo que se o objeto todo for destru\u00eddo, os objetos parte podem permanecer existindo. \u00c9 o que ocorre com o conceito de turma para determinada disciplina. A turma ter\u00e1 v\u00e1rios estudantes, \\(1\\) professor e \\(1\\) disciplina vinculada. A turma depende destes componentes para ser completa. Contudo, ao removermos a turma, os demais objetos que s\u00e3o parte continuam existindo. Observe que a representa\u00e7\u00e3o da agrega\u00e7\u00e3o se d\u00e1 por meio de um losango ao lado do objeto todo . classDiagram Turma \"1..*\" o--> \"1..*\" Estudante Turma \"1..*\" o--> \"1..1\" Professor Turma \"1..*\" o--> \"1..1\" Disciplina Composi\u00e7\u00e3o \u00b6 A composi\u00e7\u00e3o, por sua vez, \u00e9 uma associa\u00e7\u00e3o forte entre classes, tamb\u00e9m caracterizada pelo conceito todo-parte . Mas, diferente da agrega\u00e7\u00e3o, o ciclo de vida dos objetos parte \u00e9 gerenciado pelo objeto todo , pois a exist\u00eancia da parte sem o todo n\u00e3o faz sentido. Perceba que o losango est\u00e1 preenchido no diagrama, diferentemente do que ocorre na agrega\u00e7\u00e3o. classDiagram Funcionario \"1..1\" *-- \"0..*\" Dependente Heran\u00e7a \u00b6 A heran\u00e7a , um dos pilares da POO, est\u00e1 intimamente associada com o reuso de software. Se podemos pensar componentes do software como sendo dispostos em uma taxionomia, em que ir\u00e3o existir componentes mais gen\u00e9ricos e outros mais espec\u00edficos que deles derivam, ent\u00e3o estamos pensando em uma rela\u00e7\u00e3o de heran\u00e7a. Heran\u00e7a \u00e9 um relacionamento forte entre classes, que implica em alto acoplamento e que permite a uma classe herdar membros de outra. Dizemos, portanto, que \u00e9 um relacionamento do tipo \u00e9 um em que a superclasse mant\u00e9m sua integridade e a especializa\u00e7\u00e3o \u00e9 feita na classe dela derivada. Importante ressaltar que, mesmo sendo um dos pilares da POO, optar por heran\u00e7a \u00e9 uma decis\u00e3o que requer reflex\u00e3o, pois o acoplamento entre os componentes se intensifica, o que geralmente \u00e9 ruim em termos de arquitetura de software. Dica Membro de classe \u00e9 a designa\u00e7\u00e3o gen\u00e9rica que utilizamos para m\u00e9todo ou atributo. Vamos entender melhor como o relacionamento de heran\u00e7a se estabelece e quais s\u00e3o as implica\u00e7\u00f5es t\u00e9cnicas do seu uso. Nosso exemplo ir\u00e1 apresentar uma situa\u00e7\u00e3o simples de um modelo de neg\u00f3cio envolvendo professores e estudantes. Nele vamos ter a superclasse Pessoa e duas classes derivadas: Estudante e Professor . classDiagram Pessoa < |-- Estudante Pessoa < |-- Professor class Pessoa{ -String nomeCompleto -Date dataNascimento -String numeroCPF -String endereco +getCPF() +getEndereco() +getNomeCompleto() +getDataNascimento() +setEndereco(String endereco) } class Estudante{ -int numeroMatricula -Pessoa responsavelLegal -String enderecoEmail +getNumeroMatricula() +getResponsavelLegal() +getEnderecoEmail } class Professor{ - numeroNIT - especialidade - regimeTrabalho + getNumeroNIT() + getEspecialidade() + getRegimeTrabalho() } Dica Classe derivada ou subclasse \u00e9 toda aquela que especializa uma ou mais superclasses ou classes base . Em nosso exemplo, Pessoa \u00e9 a superclasse, representando o tipo mais gen\u00e9rico da taxionomia. J\u00e1 Professor e Estudante s\u00e3o subclasses, ou seja, tipos mais espec\u00edficos que aprimoram Pessoa novos membros. Precisamos considerar tamb\u00e9m que uma classe pode ter superclasses e/ou subclasses indiretas , no caso em que a taxionomia possui diversos n\u00edveis. A rela\u00e7\u00e3o entre as nossas classes de exemplo permite afirmar que Professor \u00e9 uma Pessoa e que Estudante \u00e9 uma pessoa. J\u00e1 o inverso n\u00e3o \u00e9 poss\u00edvel: Pessoa n\u00e3o \u00e9 Professor , nem Estudante . Ainda, podemos observar que a heran\u00e7a \u00e9 simples , haja vista que as classes derivadas herdam de apenas uma \u00fanica superclasse. Agora vamos propor um caso de heran\u00e7a m\u00faltipla . Em nosso diagrama temos as classes Colaborador , LiderSindical e Engenheiro Civil , sendo esta \u00faltima derivada das anteriores. Para simplificar o diagrama, omitimos boa parte dos atributos e m\u00e9todos. classDiagram Colaborador < |-- Engenheiro Civil LiderSindical < |-- Engenheiro Civil class LiderSindical{ -String categoria } class Engenheiro Civil{ -String registroCREA } class Colaborador{ -String cpf } Embora a heran\u00e7a m\u00faltipla seja poss\u00edvel, nem todas as linguagens oferecem suporte. No Java, por exemplo, temos somente heran\u00e7a simples , enquanto que C++ e Python temos a possibilidade de herdar de m\u00faltiplas classes. De qualquer forma, seja simples ou m\u00faltipla, o relacionamento de heran\u00e7a permite \u00e0s classes derivadas acesso a membros da superclasse. Contudo, algumas linguagens definem modificadores de visibilidade ou estrat\u00e9gias que impedem acesso direto \u00e0 membros em classes derivadas. No caso da linguagem Java, membros definidos como private ficam inacess\u00edveis nas classes derivadas, o que \u00e9 especialmente conveniente para se preservar o encapsulamento e a integridade da superclasse. J\u00e1 os construtores n\u00e3o s\u00e3o automaticamente herdados pelas classes derivadas. Toda classe precisa definir os seus e, quando h\u00e1 heran\u00e7a envolvida, construtores das classes derivadas devem chamar obrigatoriamente algum dos construtores dispon\u00edveis na superclasse (e se for heran\u00e7a m\u00faltipla, precisamos considerar cada uma das superclasses). Logo, as chamadas se propagam at\u00e9 a classe mais gen\u00e9rica da hierarquia, sendo seu construtor o primeiro a executar. \u00c9 o que demonstramos na ilustra\u00e7\u00e3o a seguir, de forma simplificada, considerando as classes de nosso exemplo anterior. A cadeia de chamada aos construtores \u00e9 necess\u00e1ria para que o objeto seja inicializado de forma consistente, segundo as regras implementadas em cada classe. Cada construtor ir\u00e1 tratar, portanto, de uma parte do objeto da subclasse, partindo do tipo mais gen\u00e9rico at\u00e9 o mais especializado. Implementando Heran\u00e7a \u00b6 Cada linguagem de programa\u00e7\u00e3o estabelece a sintaxe e palavras reservadas utilizadas na constru\u00e7\u00e3o do relacionamento heran\u00e7a. Em nossos exemplos, apresentaremos c\u00f3digos escritos em C++, Python e Java. Na linguagem Java, a heran\u00e7a ocorre por meio de extens\u00e3o. A classe derivada, em sua declara\u00e7\u00e3o utiliza a palavra reservada extends para indicar a superclasse. J\u00e1 no Python, as superclasses s\u00e3o informadas entre parenteses na declara\u00e7\u00e3o da subclasse. No c\u00f3digo a seguir evidenciamos linhas em que h\u00e1 declara\u00e7\u00e3o de construtores e/ou chamada a construtores da superclasse. Perceba que a palavra reservada super est\u00e1 sendo utilizada para fazer refer\u00eancia \u00e0 membros da superclasse, inclusive construtores. Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 import java.time.LocalDate ; class Pessoa { private String nomeCompleto , endereco , cpf , email ; private LocalDate dataNascimento ; public Pessoa ( String cpf , LocalDate dataNascimento , String nomeCompleto , String endereco ) throws Exception { this ( cpf , dataNascimento ); this . nomeCompleto = nomeCompleto ; this . endereco = endereco ; } public Pessoa ( String cpf , LocalDate dataNascimento ) throws Exception { this . setCPF ( cpf ); this . dataNascimento = dataNascimento ; } private void setCPF ( String cpf ) throws Exception { if ( cpf . length () != 11 ) throw new Exception ( \"CPF deve ter 11 caracteres\" ); else this . cpf = cpf ; } public void setNomeCompleto ( String nome ) { this . nomeCompleto = nome ; } public LocalDate getDataNascimento () { return this . dataNascimento ; } public String getCpf () { return this . cpf ; } public String getNomeCompleto () { return this . nomeCompleto . toUpperCase (); } public void setEndereco ( String endereco ) { this . endereco = endereco ; } public String getEndereco () { return this . endereco ; } public void setEmail ( String email ) { this . email = email ; } public String getEmail () { return this . email ; } @Override public String toString () { return String . format ( \"Pessoa: %s %s %s\" , this . cpf , this . nomeCompleto , this . dataNascimento ); } } class Estudante extends Pessoa { private String numeroMatricula ; public Estudante ( String numeroMatricula , String cpf , LocalDate dataNascimento ) throws Exception { super ( cpf , dataNascimento ); this . numeroMatricula = numeroMatricula ; } public String getMatricula (){ return this . numeroMatricula ; } @Override public String toString () { return String . format ( \"Estudante: %s %s %s %s\" , this . numeroMatricula , this . getCpf (), this . getNomeCompleto (), this . getDataNascimento ()); } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Pessoa : def __init__ ( self , cpf , data_nascimento ): self . __cpf = cpf self . __data_nascimento = data_nascimento self . __nome_completo = \"\" self . __endereco = \"\" self . __email = \"\" @property def email ( self ): return self . __email @email . setter def email ( self , email ): self . __email = email @property def endereco ( self ): return self . __endereco @endereco . setter def endereco ( self , endereco ): self . __endereco = endereco @property def data_nascimento ( self ): return self . __data_nascimento @property def cpf ( self ): return self . __cpf @property def nome_completo ( self ): return self . __nome_completo @nome_completo . setter def nome_completo ( self , nome_completo ): self . __nome_completo = nome_completo def __str__ ( self ) -> str : return f 'Pessoa { self . cpf } - { self . nome_completo } ' class Estudante ( Pessoa ): def __init__ ( self , cpf , data_nascimento , nr_matricula ): super . __init_ ( self , cpf , data_nascimento ) self . __numero_matricula = nr_matricula @property def matricula ( self ): return self . __numero_matricula def __str__ ( self ) -> str : return f 'Estudante { self . matricula } - { self . nome_completo } ' C++ 1 /* em breve */ Sobrescrita \u00b6 Por vezes, a classe derivada precisa redefinir um m\u00e9todo recebido de uma superclasse direta ou indireta. Isso ocorre porque a implementa\u00e7\u00e3o recebida n\u00e3o atende o comportamento necess\u00e1rio na subclasse. Neste caso, sobrescrevemos o m\u00e9todo. Sobrescrever significa preservar a assinatura do m\u00e9todo tal qual est\u00e1 na superclasse, mas alterar seu corpo (implementa\u00e7\u00e3o). Com isso, preservamos a interface de comunica\u00e7\u00e3o com os objetos, mas teremos comportamentos distintos a depender do tipo de objeto que estamos considerando (se da superclasse ou da subclasse). \u00c9 o caso do m\u00e9todo toString() presente na implementa\u00e7\u00e3o das classes Pessoa e Estudante em Java. Em ambas as classes temos sobrescrita do mesmo, visto que ele \u00e9 definido na classe Object , a superclasse direta ou indireta de qualquer classe na linguagem Java. Dado que sua implementa\u00e7\u00e3o original n\u00e3o nos serve, atribu\u00edmos nova codifica\u00e7\u00e3o, sem fazer qualquer altera\u00e7\u00e3o na implementa\u00e7\u00e3o original do m\u00e9todo de Object (preserva\u00e7\u00e3o da integridade da classe). O mesmo ocorre com o m\u00e9todo especial str ( dundle str ) da implementa\u00e7\u00e3o em Python. Ao redefinir o m\u00e9todo, precisamos tomar cuidado para n\u00e3o alterar sua assinatura, pois se isso ocorrer estaremos realizando uma sobrecarga . No Java, a anota\u00e7\u00e3o @Override nos d\u00e1 esta seguran\u00e7a, delegando ao compilador a responsabilidade por validar a exist\u00eancia de um m\u00e9todo de superclasse com a assinatura informada. N\u00e3o havendo tal m\u00e9todo, um erro de compila\u00e7\u00e3o \u00e9 lan\u00e7ado.","title":"Rela\u00e7\u00f5es entre Classes"},{"location":"programacao/oop/relacoes/#dependencia","text":"A depend\u00eancia entre duas classes ocorre quando uma classe \\(A\\) utiliza recursos da classe \\(B\\) , de modo que altera\u00e7\u00f5es na classe \\(B\\) podem afetar a classe \\(A\\) . classDiagram direction LR ClassA ..> ClassB Depend\u00eancias s\u00e3o extremamente comuns e se estabelecem quando utilizamos na classe \\(A\\) a classe \\(B\\) para definir tipo de atributos, tipo de retorno de m\u00e9todo, tipo de par\u00e2metros, tipo de vari\u00e1veis ou simplesmente fazemos uso de um m\u00e9todo est\u00e1tico de provido por \\(B\\) . Pela grande ocorr\u00eancia de depend\u00eancias entre classes, precisamos ser mais seletivos quando a observamos, mantendo aten\u00e7\u00e3o \u00e0quelas em que existem restri\u00e7\u00f5es/especificidades maiores que o trivial uso. Neste caso, pensamos em termos de associa\u00e7\u00f5es e especializa\u00e7\u00f5es/generaliza\u00e7\u00f5es.","title":"Depend\u00eancia"},{"location":"programacao/oop/relacoes/#associacao","text":"A associa\u00e7\u00e3o \u00e9 um relacionamento de depend\u00eancia que indica a exist\u00eancia de comunica\u00e7\u00e3o entre duas classes. Pode ser unidirecional ou bidirecional e tamb\u00e9m comporta informa\u00e7\u00e3o de multiplicidade. A associa\u00e7\u00e3o implica no uso de um tipo em outro. A dire\u00e7\u00e3o da associa\u00e7\u00e3o d\u00e1 o caminho poss\u00edvel para navega\u00e7\u00e3o. Em nosso exemplo, temos a classe Venda fazendo uso de um objeto de Cliente . Toda venda ter\u00e1 \\(1\\) cliente e, na perspectiva do cliente, poder\u00e1 haver diversas vendas associadas a ele. Contudo, podemos navegar apenas de Venda para Cliente , ou seja, \u00e9 unidirecional . classDiagram Venda \"0..*\" --> \"1..1\" Cliente Se quis\u00e9ssemos uma associa\u00e7\u00e3o bidirecional , expressar\u00edamos a rela\u00e7\u00e3o da seguinte forma: classDiagram Venda \"0..*\" < --> \"1..1\" Cliente","title":"Associa\u00e7\u00e3o"},{"location":"programacao/oop/relacoes/#agregacao","text":"Na agrega\u00e7\u00e3o, duas classes relacionam-se por meio de um v\u00ednculo do tipo todo-parte ou tem um . Neste tipo de associa\u00e7\u00e3o , temos um classe que est\u00e1 contida ou \u00e9 uma parte de de outra classe. A agrega\u00e7\u00e3o ocorre quando o objeto todo requer objetos parte para complement\u00e1-lo, para ter sentido completo. \u00c9 uma rela\u00e7\u00e3o fraca entre os componentes, de modo que se o objeto todo for destru\u00eddo, os objetos parte podem permanecer existindo. \u00c9 o que ocorre com o conceito de turma para determinada disciplina. A turma ter\u00e1 v\u00e1rios estudantes, \\(1\\) professor e \\(1\\) disciplina vinculada. A turma depende destes componentes para ser completa. Contudo, ao removermos a turma, os demais objetos que s\u00e3o parte continuam existindo. Observe que a representa\u00e7\u00e3o da agrega\u00e7\u00e3o se d\u00e1 por meio de um losango ao lado do objeto todo . classDiagram Turma \"1..*\" o--> \"1..*\" Estudante Turma \"1..*\" o--> \"1..1\" Professor Turma \"1..*\" o--> \"1..1\" Disciplina","title":"Agrega\u00e7\u00e3o"},{"location":"programacao/oop/relacoes/#composicao","text":"A composi\u00e7\u00e3o, por sua vez, \u00e9 uma associa\u00e7\u00e3o forte entre classes, tamb\u00e9m caracterizada pelo conceito todo-parte . Mas, diferente da agrega\u00e7\u00e3o, o ciclo de vida dos objetos parte \u00e9 gerenciado pelo objeto todo , pois a exist\u00eancia da parte sem o todo n\u00e3o faz sentido. Perceba que o losango est\u00e1 preenchido no diagrama, diferentemente do que ocorre na agrega\u00e7\u00e3o. classDiagram Funcionario \"1..1\" *-- \"0..*\" Dependente","title":"Composi\u00e7\u00e3o"},{"location":"programacao/oop/relacoes/#heranca","text":"A heran\u00e7a , um dos pilares da POO, est\u00e1 intimamente associada com o reuso de software. Se podemos pensar componentes do software como sendo dispostos em uma taxionomia, em que ir\u00e3o existir componentes mais gen\u00e9ricos e outros mais espec\u00edficos que deles derivam, ent\u00e3o estamos pensando em uma rela\u00e7\u00e3o de heran\u00e7a. Heran\u00e7a \u00e9 um relacionamento forte entre classes, que implica em alto acoplamento e que permite a uma classe herdar membros de outra. Dizemos, portanto, que \u00e9 um relacionamento do tipo \u00e9 um em que a superclasse mant\u00e9m sua integridade e a especializa\u00e7\u00e3o \u00e9 feita na classe dela derivada. Importante ressaltar que, mesmo sendo um dos pilares da POO, optar por heran\u00e7a \u00e9 uma decis\u00e3o que requer reflex\u00e3o, pois o acoplamento entre os componentes se intensifica, o que geralmente \u00e9 ruim em termos de arquitetura de software. Dica Membro de classe \u00e9 a designa\u00e7\u00e3o gen\u00e9rica que utilizamos para m\u00e9todo ou atributo. Vamos entender melhor como o relacionamento de heran\u00e7a se estabelece e quais s\u00e3o as implica\u00e7\u00f5es t\u00e9cnicas do seu uso. Nosso exemplo ir\u00e1 apresentar uma situa\u00e7\u00e3o simples de um modelo de neg\u00f3cio envolvendo professores e estudantes. Nele vamos ter a superclasse Pessoa e duas classes derivadas: Estudante e Professor . classDiagram Pessoa < |-- Estudante Pessoa < |-- Professor class Pessoa{ -String nomeCompleto -Date dataNascimento -String numeroCPF -String endereco +getCPF() +getEndereco() +getNomeCompleto() +getDataNascimento() +setEndereco(String endereco) } class Estudante{ -int numeroMatricula -Pessoa responsavelLegal -String enderecoEmail +getNumeroMatricula() +getResponsavelLegal() +getEnderecoEmail } class Professor{ - numeroNIT - especialidade - regimeTrabalho + getNumeroNIT() + getEspecialidade() + getRegimeTrabalho() } Dica Classe derivada ou subclasse \u00e9 toda aquela que especializa uma ou mais superclasses ou classes base . Em nosso exemplo, Pessoa \u00e9 a superclasse, representando o tipo mais gen\u00e9rico da taxionomia. J\u00e1 Professor e Estudante s\u00e3o subclasses, ou seja, tipos mais espec\u00edficos que aprimoram Pessoa novos membros. Precisamos considerar tamb\u00e9m que uma classe pode ter superclasses e/ou subclasses indiretas , no caso em que a taxionomia possui diversos n\u00edveis. A rela\u00e7\u00e3o entre as nossas classes de exemplo permite afirmar que Professor \u00e9 uma Pessoa e que Estudante \u00e9 uma pessoa. J\u00e1 o inverso n\u00e3o \u00e9 poss\u00edvel: Pessoa n\u00e3o \u00e9 Professor , nem Estudante . Ainda, podemos observar que a heran\u00e7a \u00e9 simples , haja vista que as classes derivadas herdam de apenas uma \u00fanica superclasse. Agora vamos propor um caso de heran\u00e7a m\u00faltipla . Em nosso diagrama temos as classes Colaborador , LiderSindical e Engenheiro Civil , sendo esta \u00faltima derivada das anteriores. Para simplificar o diagrama, omitimos boa parte dos atributos e m\u00e9todos. classDiagram Colaborador < |-- Engenheiro Civil LiderSindical < |-- Engenheiro Civil class LiderSindical{ -String categoria } class Engenheiro Civil{ -String registroCREA } class Colaborador{ -String cpf } Embora a heran\u00e7a m\u00faltipla seja poss\u00edvel, nem todas as linguagens oferecem suporte. No Java, por exemplo, temos somente heran\u00e7a simples , enquanto que C++ e Python temos a possibilidade de herdar de m\u00faltiplas classes. De qualquer forma, seja simples ou m\u00faltipla, o relacionamento de heran\u00e7a permite \u00e0s classes derivadas acesso a membros da superclasse. Contudo, algumas linguagens definem modificadores de visibilidade ou estrat\u00e9gias que impedem acesso direto \u00e0 membros em classes derivadas. No caso da linguagem Java, membros definidos como private ficam inacess\u00edveis nas classes derivadas, o que \u00e9 especialmente conveniente para se preservar o encapsulamento e a integridade da superclasse. J\u00e1 os construtores n\u00e3o s\u00e3o automaticamente herdados pelas classes derivadas. Toda classe precisa definir os seus e, quando h\u00e1 heran\u00e7a envolvida, construtores das classes derivadas devem chamar obrigatoriamente algum dos construtores dispon\u00edveis na superclasse (e se for heran\u00e7a m\u00faltipla, precisamos considerar cada uma das superclasses). Logo, as chamadas se propagam at\u00e9 a classe mais gen\u00e9rica da hierarquia, sendo seu construtor o primeiro a executar. \u00c9 o que demonstramos na ilustra\u00e7\u00e3o a seguir, de forma simplificada, considerando as classes de nosso exemplo anterior. A cadeia de chamada aos construtores \u00e9 necess\u00e1ria para que o objeto seja inicializado de forma consistente, segundo as regras implementadas em cada classe. Cada construtor ir\u00e1 tratar, portanto, de uma parte do objeto da subclasse, partindo do tipo mais gen\u00e9rico at\u00e9 o mais especializado.","title":"Heran\u00e7a"},{"location":"programacao/oop/relacoes/#implementando-heranca","text":"Cada linguagem de programa\u00e7\u00e3o estabelece a sintaxe e palavras reservadas utilizadas na constru\u00e7\u00e3o do relacionamento heran\u00e7a. Em nossos exemplos, apresentaremos c\u00f3digos escritos em C++, Python e Java. Na linguagem Java, a heran\u00e7a ocorre por meio de extens\u00e3o. A classe derivada, em sua declara\u00e7\u00e3o utiliza a palavra reservada extends para indicar a superclasse. J\u00e1 no Python, as superclasses s\u00e3o informadas entre parenteses na declara\u00e7\u00e3o da subclasse. No c\u00f3digo a seguir evidenciamos linhas em que h\u00e1 declara\u00e7\u00e3o de construtores e/ou chamada a construtores da superclasse. Perceba que a palavra reservada super est\u00e1 sendo utilizada para fazer refer\u00eancia \u00e0 membros da superclasse, inclusive construtores. Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 import java.time.LocalDate ; class Pessoa { private String nomeCompleto , endereco , cpf , email ; private LocalDate dataNascimento ; public Pessoa ( String cpf , LocalDate dataNascimento , String nomeCompleto , String endereco ) throws Exception { this ( cpf , dataNascimento ); this . nomeCompleto = nomeCompleto ; this . endereco = endereco ; } public Pessoa ( String cpf , LocalDate dataNascimento ) throws Exception { this . setCPF ( cpf ); this . dataNascimento = dataNascimento ; } private void setCPF ( String cpf ) throws Exception { if ( cpf . length () != 11 ) throw new Exception ( \"CPF deve ter 11 caracteres\" ); else this . cpf = cpf ; } public void setNomeCompleto ( String nome ) { this . nomeCompleto = nome ; } public LocalDate getDataNascimento () { return this . dataNascimento ; } public String getCpf () { return this . cpf ; } public String getNomeCompleto () { return this . nomeCompleto . toUpperCase (); } public void setEndereco ( String endereco ) { this . endereco = endereco ; } public String getEndereco () { return this . endereco ; } public void setEmail ( String email ) { this . email = email ; } public String getEmail () { return this . email ; } @Override public String toString () { return String . format ( \"Pessoa: %s %s %s\" , this . cpf , this . nomeCompleto , this . dataNascimento ); } } class Estudante extends Pessoa { private String numeroMatricula ; public Estudante ( String numeroMatricula , String cpf , LocalDate dataNascimento ) throws Exception { super ( cpf , dataNascimento ); this . numeroMatricula = numeroMatricula ; } public String getMatricula (){ return this . numeroMatricula ; } @Override public String toString () { return String . format ( \"Estudante: %s %s %s %s\" , this . numeroMatricula , this . getCpf (), this . getNomeCompleto (), this . getDataNascimento ()); } } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class Pessoa : def __init__ ( self , cpf , data_nascimento ): self . __cpf = cpf self . __data_nascimento = data_nascimento self . __nome_completo = \"\" self . __endereco = \"\" self . __email = \"\" @property def email ( self ): return self . __email @email . setter def email ( self , email ): self . __email = email @property def endereco ( self ): return self . __endereco @endereco . setter def endereco ( self , endereco ): self . __endereco = endereco @property def data_nascimento ( self ): return self . __data_nascimento @property def cpf ( self ): return self . __cpf @property def nome_completo ( self ): return self . __nome_completo @nome_completo . setter def nome_completo ( self , nome_completo ): self . __nome_completo = nome_completo def __str__ ( self ) -> str : return f 'Pessoa { self . cpf } - { self . nome_completo } ' class Estudante ( Pessoa ): def __init__ ( self , cpf , data_nascimento , nr_matricula ): super . __init_ ( self , cpf , data_nascimento ) self . __numero_matricula = nr_matricula @property def matricula ( self ): return self . __numero_matricula def __str__ ( self ) -> str : return f 'Estudante { self . matricula } - { self . nome_completo } ' C++ 1 /* em breve */","title":"Implementando Heran\u00e7a"},{"location":"programacao/oop/relacoes/#sobrescrita","text":"Por vezes, a classe derivada precisa redefinir um m\u00e9todo recebido de uma superclasse direta ou indireta. Isso ocorre porque a implementa\u00e7\u00e3o recebida n\u00e3o atende o comportamento necess\u00e1rio na subclasse. Neste caso, sobrescrevemos o m\u00e9todo. Sobrescrever significa preservar a assinatura do m\u00e9todo tal qual est\u00e1 na superclasse, mas alterar seu corpo (implementa\u00e7\u00e3o). Com isso, preservamos a interface de comunica\u00e7\u00e3o com os objetos, mas teremos comportamentos distintos a depender do tipo de objeto que estamos considerando (se da superclasse ou da subclasse). \u00c9 o caso do m\u00e9todo toString() presente na implementa\u00e7\u00e3o das classes Pessoa e Estudante em Java. Em ambas as classes temos sobrescrita do mesmo, visto que ele \u00e9 definido na classe Object , a superclasse direta ou indireta de qualquer classe na linguagem Java. Dado que sua implementa\u00e7\u00e3o original n\u00e3o nos serve, atribu\u00edmos nova codifica\u00e7\u00e3o, sem fazer qualquer altera\u00e7\u00e3o na implementa\u00e7\u00e3o original do m\u00e9todo de Object (preserva\u00e7\u00e3o da integridade da classe). O mesmo ocorre com o m\u00e9todo especial str ( dundle str ) da implementa\u00e7\u00e3o em Python. Ao redefinir o m\u00e9todo, precisamos tomar cuidado para n\u00e3o alterar sua assinatura, pois se isso ocorrer estaremos realizando uma sobrecarga . No Java, a anota\u00e7\u00e3o @Override nos d\u00e1 esta seguran\u00e7a, delegando ao compilador a responsabilidade por validar a exist\u00eancia de um m\u00e9todo de superclasse com a assinatura informada. N\u00e3o havendo tal m\u00e9todo, um erro de compila\u00e7\u00e3o \u00e9 lan\u00e7ado.","title":"Sobrescrita"},{"location":"programacao/oop/solid/","text":"","title":"Solid"},{"location":"web/historia/","text":"A Web \u00e9 um dos servi\u00e7os mais importantes da Internet. Nela est\u00e3o boa parte dos servi\u00e7os que utilizamos em nosso dia-a-dia, como portais de not\u00edcia, servi\u00e7os de streaming, jogos, sistemas banc\u00e1rios, educa\u00e7\u00e3o, entre outros. A hist\u00f3ria da Web inicia em 1989, com Sir. Tim Berners-Lee , um cientista da computa\u00e7\u00e3o nascido em Londres. Ap\u00f3s concluir a gradua\u00e7\u00e3o na universidade de Oxford, Tim foi trabalhar no CERN como engenheiro de software 1 . O CERN \u00e9 um dos mais importantes centros de pesquisa do mundo, motivo pelo qual cientistas de diversos pa\u00edses frequentavam (e ainda frequentam) as instala\u00e7\u00f5es. Naquela \u00e9poca, Tim observou a dificuldade dos pesquisadores em compartilhar informa\u00e7\u00f5es. Os dados estavam em um computador espec\u00edfico e era preciso saber qual exatamente para ter acesso. A ideia de Tim foi permitir o compartilhamento de informa\u00e7\u00f5es com uma tecnologia emergente da \u00e9poca, o hipertexto 1 . A ideia n\u00e3o foi implementada de imediado pelo CERN, mas garantiu a Tim a possibilidade de dedicar tempo ao projeto 1 . Com isso, no final de 1990, ele havia escrito tr\u00eas tecnologias que s\u00e3o pilares para a Web at\u00e9 os dias atuais: Linguagem HTML ( HyperText Markup Language ) : linguagem utilizada para atribuir estrutura e sem\u00e2ntica aos documentos da Web. URI ( Uniform Resource Identifier ) : endere\u00e7o \u00fanico que cada recurso recebe na Web. Protocolo HTTP ( Hypertext Transfer Protocol ) : protocolo que permite a recupera\u00e7\u00e3o de recursos vinculados na Web. Com estes recursos e uma primeira implementa\u00e7\u00e3o de web browser e web server escritas por Tim, a primeira p\u00e1gina tornou-se dispon\u00edvel na Internet no final de 1990. Em 1993, Tim e outros envolvidos lutaram para assegurar que o c\u00f3digo-fonte fosse disponibilizado de forma aberta, sem qualquer cobran\u00e7a de royalties por parte do CERN. Esse, certamente, representa o marco que tornou a Web o ambiente que conhecemos nos dias atuais 1 . Dica Web Browser \u00e9 a designa\u00e7\u00e3o utilizada para softwares utilizados no lado cliente (usu\u00e1rio) para navegar pela Web. J\u00e1 Web Servers s\u00e3o os softwares instalados em servidores que fornecem aos clientes o conte\u00fado solicitado por meio das requisi\u00e7\u00f5es. Em 1994, Tim foi para o MIT ( Massachusetts Institute of Technology ) com a finalidade de criar o World Wide Web Consortium (W3C), uma comunidade internacional voltada a defini\u00e7\u00e3o de padr\u00f5es (abertos) para a Web 1 . O uso de padr\u00f5es abertos permitiu que muitas empresas desenvolvessem produtos para este ecossistema. Os diferentes web browsers , popularmente conhecidos com navegadores, s\u00e3o resultado deste processo, por exemplo. Atualmente temos uma grande gama de op\u00e7\u00f5es, como Google Chrome , Microsoft Edge , Mozilla Firefox , Opera , Safari , entre outros. Lembre-se que s\u00e3o os navegadores que n\u00f3s, clientes, utilizamos para navegar pela web . World Wide Web Foundationt. History of the web. 2021. URL: https://webfoundation.org/about/vision/history-of-the-web/ . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Como surgiu a Web?"},{"location":"web/css3/box-model/","text":"title: \"CSS3 - Box Model\" tags: - Programa\u00e7\u00e3o - Linguagens de Programa\u00e7\u00e3o - Web date: 2021-10-13 08:00:00","title":"Box model"},{"location":"web/css3/cores/","text":"Cores s\u00e3o um dos recursos mais importantes da linguagem CSS. V\u00e1rias propriedades de estilo as utilizam, como \u00e0quelas que modificam bordas, preenchimento de fundo, texto e sombras, por exemplo. Temos a disposi\u00e7\u00e3o grande variedade de cores (mais de \\(16\\) milh\u00f5es) e podemos especific\u00e1-las de v\u00e1rias formas. A mais simples \u00e9 atrav\u00e9s do nome da cor, se a mesma constar no rol de cores suportadas pelo navegador e/ou predefinidas na especifica\u00e7\u00e3o do CSS3. Embora simples, esta n\u00e3o costuma ser a forma mais adequada para definir valor de cor. As outras op\u00e7\u00f5es que temos s\u00e3o c\u00f3digo hexadecimal e as fun\u00e7\u00f5es rgb , rgba , hsl e hlsa . Dentre todos, o c\u00f3digo hexadecimal \u00e9 a op\u00e7\u00e3o mais comum, correspondendo a um conjunto de \\(6\\) caracteres iniciado com o s\u00edmbolo # . Estes caracteres representam a quantidade de vermelho, verde e azul que ir\u00e1 compor a cor final. Observe o esquema a seguir: Cada canal de cor pode receber valores entre 00 (sem cor) a ff (cor cheia). Logo, o c\u00f3digo #000000 \u00e9 branco, enquanto que #ffffff indica a cor preta. J\u00e1 para as fun\u00e7\u00f5es rgb e rgba , a quantidade de cor de cada canal \u00e9 definida no intervalo \\(0\\) a \\(255\\) e, no caso da rgba , um \u00faltimo valor entre \\(0.0\\) a \\(1.0\\) indicando a transpar\u00eancia aplicada [^1]. Observe: body { background-color : #000010 ; } . artigo { background-color : rgb ( 200 , 240 , 255 ); } . secao { background-color : rgba ( 100 , 55 , 36 , 0.5 ); } O outro modelo de cores suportado chama-se HSL ( Hue-Saturation-Lightness ), especificado por meio das fun\u00e7\u00f5es hsl e hlsa . Novamente a fun\u00e7\u00e3o terminada com a permite especificar o canal alpha para transpar\u00eancia. . artigo { background-color : hsl ( 167 , 15 , 35 ); } . secao { background-color : rgba ( 167 , 40 , 35 , 0.5 ); } Escolher cores e criar as combina\u00e7\u00f5es mais adequadas n\u00e3o \u00e9 simples. Requer conhecimentos e uma boa percep\u00e7\u00e3o visual para que o resultado final seja agrad\u00e1vel ao usu\u00e1rio. Contudo, especialistas ou n\u00e3o em cores, boas ferramentas de composi\u00e7\u00e3o auxiliam muito no processo. \u00c9 o caso dos sites colordesigner.io e material.io .","title":"Cores"},{"location":"web/css3/efeitos-transformacoes/","text":"title: \"CSS3 - Efeitos e Transforma\u00e7\u00f5es\" tags: - Programa\u00e7\u00e3o - Linguagens de Programa\u00e7\u00e3o - Web date: 2021-10-13 08:00:00","title":"Efeitos transformacoes"},{"location":"web/css3/fontes/","text":"A escolha de uma fonte \u00e9 crucial para o sucesso de uma interface web, visto que est\u00e1 diretamente ligada \u00e0 experi\u00eancia de leitura do usu\u00e1rio (que deve ser agrad\u00e1vel, naturalmente). As propriedades de estilo que o CSS3 nos fornece para manipularmos fontes s\u00e3o font-family , font-style , font-weight , font-size , e font-variant . Na sequ\u00eancia iremos abordar cada uma delas: font-family \u00b6 Especifica a fam\u00edlia de fontes que o navegador deve utilizar para renderizar o texto. A propriedade aceita v\u00e1rios valores separados por v\u00edrgula, indicando op\u00e7\u00f5es de fontes quando n\u00e3o for poss\u00edvel utilizar a anterior. Normalmente finalizamos especificando uma das cinco fam\u00edlias gen\u00e9rias de fonte dispon\u00edveis: serif , sans-serif , monospace , coursive e fantasy 1 2 3 . A fam\u00edlia gen\u00e9rica deve ser utilizada para contornar a possibilidade do usu\u00e1rio n\u00e3o ter dispon\u00edvel em seu navegador as outras fam\u00edlias listadas. Logo, nestes casos, o navegador conseguir\u00e1 preservar o padr\u00e3o tipogr\u00e1fico com outra fonte semelhante dispon\u00edvel 1 2 3 . Cada fam\u00edlia de fontes gen\u00e9rica tem caracter\u00edsticas tipogr\u00e1ficas particulares. Vejamos quais s\u00e3o elas. serif : Cada glifo (s\u00edmbolo) de caractere apresenta tra\u00e7os, termina\u00e7\u00f5es, de acabamento. Exemplo de texto utilizando fonte serifada. sans-serif : Os glifos n\u00e3o apresentam tra\u00e7os de acabamento. Exemplo de texto utilizando fonte sem serifas. monospaced : Cada glifo ocupa o mesmo espa\u00e7o (mesmo tamanho). Assemelha-se com a forma de escrita das antigas m\u00e1quinas de escrever. Exemplo de texto utilizando fonte monoespa\u00e7ada. cursive : Os glifos assemelham-se a escrita manual. Exemplo de texto utilizando fonte cursiva. fantasy : S\u00e3o fontes art\u00edsticas. Exemplo de texto utilizando fonte art\u00edstica. font-style \u00b6 Propriedade que permite especificar a apresenta\u00e7\u00e3o da face dos glifos, se normais, em it\u00e1lico ou obl\u00edquos 2 3 . Os poss\u00edveis valores s\u00e3o: normal Normal (padr\u00e3o). italic Em it\u00e1lico. oblique Obl\u00edquo (quase igual ao it\u00e1lico). font-size \u00b6 Permite especificar o tamanho da fonte, a partir de medidas relativas, como percentual, em , rem , etc ou medidas absolutas como pixels . Para saber mais sobre unidades de medida, acesse nosso conte\u00fado sobre o tema 2 3 . 16px - 2rem - 2em font-weight \u00b6 Define o peso (intensidade de negrito) da fonte. Os valores podem ser normal , bold , bolder , lighter , 100 , 200 , 300 , 400 , 500 , 600 , 700 , 800 , 900 e inherit . Os valores num\u00e9ricos indicam uma gradua\u00e7\u00e3o de negrito. O valor 400 equivale a normal enquanto que o valor 700 \u00e9 equivalente a bold . Os valores bolder e lighter aplicam-se em rela\u00e7\u00e3o ao peso herdado do ancestral, enquanto que normal e bold aplicam-se em absoluto ao texto (sem rela\u00e7\u00e3o com o valor do ancestral) 2 3 . Valor 200 - Valor 400 - Valor 600 - Valor 900 font-variant \u00b6 Indica se o texto deve ser exibido ou n\u00e3o considerando apenas caracteres mai\u00fasculos. Os valores poss\u00edveis s\u00e3o small-caps e normal (padr\u00e3o) 2 3 . Escrita normal - Escrita em small caps MDN Web Docs. Font-family - css. 2021. URL: https://developer.mozilla.org/pt-BR/docs/Web/CSS/font-family . \u21a9 \u21a9 W3Schools. Css reference. 2021. URL: https://www.w3schools.com/csSref/default.asp . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Tutorial Republic. Css tutorial. 2021. URL: https://www.tutorialrepublic.com/css-tutorial . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"Fontes"},{"location":"web/css3/fontes/#font-family","text":"Especifica a fam\u00edlia de fontes que o navegador deve utilizar para renderizar o texto. A propriedade aceita v\u00e1rios valores separados por v\u00edrgula, indicando op\u00e7\u00f5es de fontes quando n\u00e3o for poss\u00edvel utilizar a anterior. Normalmente finalizamos especificando uma das cinco fam\u00edlias gen\u00e9rias de fonte dispon\u00edveis: serif , sans-serif , monospace , coursive e fantasy 1 2 3 . A fam\u00edlia gen\u00e9rica deve ser utilizada para contornar a possibilidade do usu\u00e1rio n\u00e3o ter dispon\u00edvel em seu navegador as outras fam\u00edlias listadas. Logo, nestes casos, o navegador conseguir\u00e1 preservar o padr\u00e3o tipogr\u00e1fico com outra fonte semelhante dispon\u00edvel 1 2 3 . Cada fam\u00edlia de fontes gen\u00e9rica tem caracter\u00edsticas tipogr\u00e1ficas particulares. Vejamos quais s\u00e3o elas. serif : Cada glifo (s\u00edmbolo) de caractere apresenta tra\u00e7os, termina\u00e7\u00f5es, de acabamento. Exemplo de texto utilizando fonte serifada. sans-serif : Os glifos n\u00e3o apresentam tra\u00e7os de acabamento. Exemplo de texto utilizando fonte sem serifas. monospaced : Cada glifo ocupa o mesmo espa\u00e7o (mesmo tamanho). Assemelha-se com a forma de escrita das antigas m\u00e1quinas de escrever. Exemplo de texto utilizando fonte monoespa\u00e7ada. cursive : Os glifos assemelham-se a escrita manual. Exemplo de texto utilizando fonte cursiva. fantasy : S\u00e3o fontes art\u00edsticas. Exemplo de texto utilizando fonte art\u00edstica.","title":"font-family"},{"location":"web/css3/fontes/#font-style","text":"Propriedade que permite especificar a apresenta\u00e7\u00e3o da face dos glifos, se normais, em it\u00e1lico ou obl\u00edquos 2 3 . Os poss\u00edveis valores s\u00e3o: normal Normal (padr\u00e3o). italic Em it\u00e1lico. oblique Obl\u00edquo (quase igual ao it\u00e1lico).","title":"font-style"},{"location":"web/css3/fontes/#font-size","text":"Permite especificar o tamanho da fonte, a partir de medidas relativas, como percentual, em , rem , etc ou medidas absolutas como pixels . Para saber mais sobre unidades de medida, acesse nosso conte\u00fado sobre o tema 2 3 . 16px - 2rem - 2em","title":"font-size"},{"location":"web/css3/fontes/#font-weight","text":"Define o peso (intensidade de negrito) da fonte. Os valores podem ser normal , bold , bolder , lighter , 100 , 200 , 300 , 400 , 500 , 600 , 700 , 800 , 900 e inherit . Os valores num\u00e9ricos indicam uma gradua\u00e7\u00e3o de negrito. O valor 400 equivale a normal enquanto que o valor 700 \u00e9 equivalente a bold . Os valores bolder e lighter aplicam-se em rela\u00e7\u00e3o ao peso herdado do ancestral, enquanto que normal e bold aplicam-se em absoluto ao texto (sem rela\u00e7\u00e3o com o valor do ancestral) 2 3 . Valor 200 - Valor 400 - Valor 600 - Valor 900","title":"font-weight"},{"location":"web/css3/fontes/#font-variant","text":"Indica se o texto deve ser exibido ou n\u00e3o considerando apenas caracteres mai\u00fasculos. Os valores poss\u00edveis s\u00e3o small-caps e normal (padr\u00e3o) 2 3 . Escrita normal - Escrita em small caps MDN Web Docs. Font-family - css. 2021. URL: https://developer.mozilla.org/pt-BR/docs/Web/CSS/font-family . \u21a9 \u21a9 W3Schools. Css reference. 2021. URL: https://www.w3schools.com/csSref/default.asp . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Tutorial Republic. Css tutorial. 2021. URL: https://www.tutorialrepublic.com/css-tutorial . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9","title":"font-variant"},{"location":"web/css3/fundamentos/","text":"Sabemos que utilizamos HTML5 para estruturar e atribuir sem\u00e2ntica ao conte\u00fado de documentos na Web, mas \u00e9 fato que o resultado final \u00e9 pouco atrativo ao usu\u00e1rio, pois carece de cores, posicionamento e outros elementos est\u00e9ticos. Neste sentido, iniciamos nosso estudo da linguagem CSS3 ( Cascading Style Sheets ), que, ao ser incorporada a documentos HTML, permite alterar a representa\u00e7\u00e3o gr\u00e1fica dos componentes. Embora a vers\u00e3o \\(3\\) seja recente, o CSS \u00e9 uma linguagem que foi apresentada em 1994. Ao longo do tempo foi sendo aperfei\u00e7oada, gerando as major versions \\(1\\) , \\(2\\) e \\(3\\) . A vers\u00e3o \\(3\\) da linguagem CSS \u00e9 uma evolu\u00e7\u00e3o da vers\u00e3o \\(2\\) . Podemos classificar os recursos da linguagem em diferentes m\u00f3dulos, cada qual com finalidade espec\u00edfica. Estes m\u00f3dulos s\u00e3o 1 : Selectors Box Model Backgrounds Image Values and Replaced Content Text Effects 2D Transformations 3D Transformations Animations Multiple Column Layout User Interface Em nosso estudo, iremos abordar os t\u00f3picos mais b\u00e1sicos da linguagem, buscando explorar um pouco de cada m\u00f3dulo. Come\u00e7aremos analisando os seletores, fundamentais dentro do escopo de uso da linguagem. Contudo, antes \u00e9 necess\u00e1rio que conhe\u00e7amos como incorporar c\u00f3digo CSS \u00e0 nossos documentos, certo? Sintaxe \u00b6 A linguagem CSS3 fornece, basicamente, um vasto conjunto de propriedades de estilo, fun\u00e7\u00f5es e outras constru\u00e7\u00f5es que podemos utilizar para modificar algum aspecto da aparencia dos elementos HTML5. Uma propriedade de estilo \u00e9 definida por um nome e um valor. Por exemplo, se desejamos justificar determinado texto, podemos escrever o seguinte trecho de c\u00f3digo: text-align : justify ; A propriedade chama-se text-align e seu valor foi configurado para justify , o qual indica que o texto deve ser justificado. Ao final, \u00e9 necess\u00e1rio colocar ; . Um mesmo elemento pode receber diversas configura\u00e7\u00f5es de estilo atrav\u00e9s do uso de diferentes propriedades. Podemos encontrar informa\u00e7\u00f5es sobre cada propriedade do CSS3 no site da W3Schools . Incorpora\u00e7\u00e3o \u00b6 A incorpora\u00e7\u00e3o de c\u00f3digo CSS3 a documentos HTML5 pode ser realizada de tr\u00eas formas distintas: arquivo externo, elemento <style> ou atributo style ( inline ). Vejamos como configuramos cada op\u00e7\u00e3o. Estilos inline s\u00e3o aqueles que acompanham o elemento, sendo definidos no atributo style . Devem ser utilizados com cautela, pois s\u00e3o dif\u00edceis de alterar quando aparecem em grande quantidade no documento. \u00c9 o caso do elemento h1 do documento apresentado na sequ\u00eancia. Perceba que o estilo se aplica somente ao elemento. <!DOCTYPE html> < html > < body > < h1 style = \"color:blue;margin-left:30px;text-align:center;\" > Titulo </ h1 > </ body > </ html > Quando utilizamos o elemento <style> temos maior flexibilidade na aplica\u00e7\u00e3o dos estilos pois, diferentemente do modo inline , podemos aplicar o mesmo estilo a v\u00e1rios elementos do documento por meio de regras . Iremos conhecer o conceito de regra de estilo mais a frente, por ora basta pensar nelas como um crit\u00e9rio para estabelecer quem (elementos) ir\u00e1 receber as propriedades de estilo. Observe que o elemento <style> deve ser adicionado dentro de <head> e todas as regras de estilo devem ser escritas como conte\u00fado do elemento. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <!DOCTYPE html> < html > < head > < meta charset = \"utf8\" /> < title > Minha primeira p\u00e1gina Web </ title > < style > body { background-color : rgb ( 159 , 169 , 170 ); } p { text-align : center ; text-decoration : underline ; font-weight : bolder ; font-style : italic ; color : yellow ; font-family : \"Brush Script MT\" , cursive ; font-size : 40 px ; } h1 , h2 , h3 , h4 , h5 , h6 { color : black ; text-transform : uppercase ; font-family : \"Noto Sans\" , sans-serif ; } </ style > </ head > < body > < h1 > Introdu\u00e7\u00e3o ao CSS3 </ h1 > < p > Vamos falar de CSS! </ p > < h2 > Conceitos b\u00e1sicos </ h2 > < p > O conceito... </ p > < p > Outro conceito... </ p > </ body > </ html > A terceira forma, em que utilizamos a vincula\u00e7\u00e3o de um arquivo com regras de estilo ao documento \u00e9 a mais utilizada. Isso porque, quando pensamos em um site, devemos considerar a exist\u00eancia de muitos documentos e, todos eles compartilhamento da mesma apresenta\u00e7\u00e3o. Logo, ao deixarmos as regras de estilo em um \u00fanico local, podemos facilmente compartilh\u00e1-las em todos os documentos sem a necessidade de repetir c\u00f3digo. Para realizar a vincula\u00e7\u00e3o de um arquivo CSS ao documento devemos utilizar a tag <link> , que tamb\u00e9m deve estar no <head> . Observe o exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html > < head > < meta charset = \"utf8\" /> < title > Minha primeira p\u00e1gina Web </ title > < link href = \"estilos.css\" rel = \"stylesheet\" /> </ head > < body > < h1 > Introdu\u00e7\u00e3o ao CSS3 </ h1 > < p > Vamos falar de CSS! </ p > < h2 > Conceitos b\u00e1sicos </ h2 > < p > O conceito... </ p > < p > Outro conceito... </ p > </ body > </ html > Em um documento HTML, n\u00f3s podemos ter simultaneamente as tr\u00eas formas de incorpora\u00e7\u00e3o de CSS. Neste caso, o navegador utiliza uma escala de prioridade, afinal \u00e9 poss\u00edvel que haja sobreposi\u00e7\u00e3o de estilos. Nesta escala, a maior prioridade fica com as propriedades inline , seguidas daquelas definidas para o documento na tag <style> e, por \u00faltimo, as regras oriundas dos arquivos incorporados via <link> 2 . TutorialPoint. Css3 - tutorial. 2021. URL: https://www.tutorialspoint.com/css/css3_tutorial.htm . \u21a9 Tutorial Republic. Css tutorial. 2021. URL: https://www.tutorialrepublic.com/css-tutorial . \u21a9","title":"Fundamentos"},{"location":"web/css3/fundamentos/#sintaxe","text":"A linguagem CSS3 fornece, basicamente, um vasto conjunto de propriedades de estilo, fun\u00e7\u00f5es e outras constru\u00e7\u00f5es que podemos utilizar para modificar algum aspecto da aparencia dos elementos HTML5. Uma propriedade de estilo \u00e9 definida por um nome e um valor. Por exemplo, se desejamos justificar determinado texto, podemos escrever o seguinte trecho de c\u00f3digo: text-align : justify ; A propriedade chama-se text-align e seu valor foi configurado para justify , o qual indica que o texto deve ser justificado. Ao final, \u00e9 necess\u00e1rio colocar ; . Um mesmo elemento pode receber diversas configura\u00e7\u00f5es de estilo atrav\u00e9s do uso de diferentes propriedades. Podemos encontrar informa\u00e7\u00f5es sobre cada propriedade do CSS3 no site da W3Schools .","title":"Sintaxe"},{"location":"web/css3/fundamentos/#incorporacao","text":"A incorpora\u00e7\u00e3o de c\u00f3digo CSS3 a documentos HTML5 pode ser realizada de tr\u00eas formas distintas: arquivo externo, elemento <style> ou atributo style ( inline ). Vejamos como configuramos cada op\u00e7\u00e3o. Estilos inline s\u00e3o aqueles que acompanham o elemento, sendo definidos no atributo style . Devem ser utilizados com cautela, pois s\u00e3o dif\u00edceis de alterar quando aparecem em grande quantidade no documento. \u00c9 o caso do elemento h1 do documento apresentado na sequ\u00eancia. Perceba que o estilo se aplica somente ao elemento. <!DOCTYPE html> < html > < body > < h1 style = \"color:blue;margin-left:30px;text-align:center;\" > Titulo </ h1 > </ body > </ html > Quando utilizamos o elemento <style> temos maior flexibilidade na aplica\u00e7\u00e3o dos estilos pois, diferentemente do modo inline , podemos aplicar o mesmo estilo a v\u00e1rios elementos do documento por meio de regras . Iremos conhecer o conceito de regra de estilo mais a frente, por ora basta pensar nelas como um crit\u00e9rio para estabelecer quem (elementos) ir\u00e1 receber as propriedades de estilo. Observe que o elemento <style> deve ser adicionado dentro de <head> e todas as regras de estilo devem ser escritas como conte\u00fado do elemento. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 <!DOCTYPE html> < html > < head > < meta charset = \"utf8\" /> < title > Minha primeira p\u00e1gina Web </ title > < style > body { background-color : rgb ( 159 , 169 , 170 ); } p { text-align : center ; text-decoration : underline ; font-weight : bolder ; font-style : italic ; color : yellow ; font-family : \"Brush Script MT\" , cursive ; font-size : 40 px ; } h1 , h2 , h3 , h4 , h5 , h6 { color : black ; text-transform : uppercase ; font-family : \"Noto Sans\" , sans-serif ; } </ style > </ head > < body > < h1 > Introdu\u00e7\u00e3o ao CSS3 </ h1 > < p > Vamos falar de CSS! </ p > < h2 > Conceitos b\u00e1sicos </ h2 > < p > O conceito... </ p > < p > Outro conceito... </ p > </ body > </ html > A terceira forma, em que utilizamos a vincula\u00e7\u00e3o de um arquivo com regras de estilo ao documento \u00e9 a mais utilizada. Isso porque, quando pensamos em um site, devemos considerar a exist\u00eancia de muitos documentos e, todos eles compartilhamento da mesma apresenta\u00e7\u00e3o. Logo, ao deixarmos as regras de estilo em um \u00fanico local, podemos facilmente compartilh\u00e1-las em todos os documentos sem a necessidade de repetir c\u00f3digo. Para realizar a vincula\u00e7\u00e3o de um arquivo CSS ao documento devemos utilizar a tag <link> , que tamb\u00e9m deve estar no <head> . Observe o exemplo: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html > < head > < meta charset = \"utf8\" /> < title > Minha primeira p\u00e1gina Web </ title > < link href = \"estilos.css\" rel = \"stylesheet\" /> </ head > < body > < h1 > Introdu\u00e7\u00e3o ao CSS3 </ h1 > < p > Vamos falar de CSS! </ p > < h2 > Conceitos b\u00e1sicos </ h2 > < p > O conceito... </ p > < p > Outro conceito... </ p > </ body > </ html > Em um documento HTML, n\u00f3s podemos ter simultaneamente as tr\u00eas formas de incorpora\u00e7\u00e3o de CSS. Neste caso, o navegador utiliza uma escala de prioridade, afinal \u00e9 poss\u00edvel que haja sobreposi\u00e7\u00e3o de estilos. Nesta escala, a maior prioridade fica com as propriedades inline , seguidas daquelas definidas para o documento na tag <style> e, por \u00faltimo, as regras oriundas dos arquivos incorporados via <link> 2 . TutorialPoint. Css3 - tutorial. 2021. URL: https://www.tutorialspoint.com/css/css3_tutorial.htm . \u21a9 Tutorial Republic. Css tutorial. 2021. URL: https://www.tutorialrepublic.com/css-tutorial . \u21a9","title":"Incorpora\u00e7\u00e3o"},{"location":"web/css3/posicionamento/","text":"title: \"CSS3 - Posicionamento\" tags: - Programa\u00e7\u00e3o - Linguagens de Programa\u00e7\u00e3o - Web date: 2021-10-13 08:00:00","title":"Posicionamento"},{"location":"web/css3/seletores/","text":"Seletores s\u00e3o parte de uma regra de estilo. Sua fun\u00e7\u00e3o \u00e9 orientar o navegador, por meio de um padr\u00e3o de pesquisa, a encontrar os elementos que devem receber o estilo no documento 1 . Normalmente escrevemos diversas regras para obter o resultado final desejado. Vamos iniciar com uma simples para observarmos sua sintaxe. p { text-align : center ; color : yellow ; font-family : \"Brush Script MT\" , cursive ; font-size : 40 px ; } A regra acima tem como seletor p , indicando que todos os elementos do tipo par\u00e1grafo do documento devem receber as propriedades de estilo definidas. Cada par de propriedade:valor corresponde a uma declara\u00e7\u00e3o. Perceba que toda declara\u00e7\u00e3o finaliza com um ponto-e-v\u00edrgula ; e que as declara\u00e7\u00f5es ficam envolvidas entre chaves {} . Que tal conhecermos alguns tipos de seletores dispon\u00edveis \ud83d\ude09? 1 Universal Todo elemento da p\u00e1gina ir\u00e1 receber o estilo. Utilizamos * como seletor. * { margin : 0 px ; } Elemento Especificamos o nome dos elementos HTML que devem receber o estilo no seletor. p { color : black ; } Id Todo elemento HTML possui um atributo chamado id . Este atributo \u00e9 utilizado para identificar de forma \u00fanica um elemento no documento. Isso significa que dois elementos n\u00e3o podem compartilhar o mesmo valor em id . No CSS, podemos especificar um seletor para valores de id utilizando o caractere # acompanhado do valor de id correspondente. # cabecalho { background-color : black ; } Classe Outro atributo global de elementos do HTML5 chama-se class . Diferentemente de id , diferentes elementos podem compartilhar do mesmo valor em class e, al\u00e9m disso, v\u00e1rios valores s\u00e3o aceitos, deixando-se um espa\u00e7o entre eles. Seletores baseados em classe s\u00e3o amplamente utilizados. Sua constru\u00e7\u00e3o requer o uso do caractere ponto . acompanhado do nome da classe. Podemos deixar o seletor mais espec\u00edfico, associando com um seletor de elemento, como em p.importante . A interpreta\u00e7\u00e3o, neste caso, \u00e9 todo par\u00e1grafo que cont\u00e9m a classe importante . . artigo { text-align : justify ; } p . importante { color : red } Descendentes Utilizamos este tipo de seletor para aplicar estilos a elementos com base em seus elementos \"pai\". Podemos selecionar, por exemplo, todos os par\u00e1grafos ( <p> ) que s\u00e3o descendentes de artigos ( <article> ), desconsiderando todos os demais. Nosso seletor seria escrito da seguinte forma: article p { font-family : 'Roboto' , sans-serif ; } Observe que este seletor considera descendentes diretos e indiretos. Para ser mais restritivo e considerar somente elementos que s\u00e3o \"filhos\" diretos, devemos utilizar o s\u00edmbolo > , conforme o exemplo a seguir: article > p { font-family : 'Roboto' , sans-serif ; } Elementos adjacentes S\u00e3o seletores que consideram elementos de mesmo n\u00edvel (\"irm\u00e3os\", pois s\u00e3o filhos do mesmo \"pai\"). Se quisessemos aplicar um estilo espec\u00edfico para o primeiro par\u00e1grafo ( <p> ) que segue um t\u00edtulo de segundo n\u00edvel ( <h2> ), poder\u00edamos utilizar: h2 + p { font-family : 'Roboto' , sans-serif ; } Tutorial Republic. Css tutorial. 2021. URL: https://www.tutorialrepublic.com/css-tutorial . \u21a9 \u21a9","title":"Seletores"},{"location":"web/html5/estrutura-basica/","text":"Hypertext Markup Language , ou simplesmente HTML, \u00e9 uma linguagem de marca\u00e7\u00e3o utilizada para representar informa\u00e7\u00e3o na Web. Nasceu junto com o conceito da Web e hoje, conjuntamente \u00e0s linguagens JavaScript e CSS , comp\u00f5e as bases para o desenvolvimento de solu\u00e7\u00f5es frontend neste ecossistema. Desde seu desenvolvimento, em 1989, a linguagem HTML foi passando por diversas revis\u00f5es, que culminaram com o lan\u00e7amento de novas vers\u00f5es da linguagem. Atualmente est\u00e1 em uso a vers\u00e3o 5, motivo pelo qual \u00e9 comum encontrar cita\u00e7\u00f5es \u00e0 linguagem como HTML5. Caso tenha interesse na integra da linha do tempo das vers\u00f5es da linguagem, podes come\u00e7ar pela Wikip\u00e9dia . Antes de propriamente iniciarmos nosso estudo na linguagem HTML5, precisamos entender os atores principais da Web e como eles se comunicam. Obviamente faremos uma simplifica\u00e7\u00e3o da arquitetura, enfatizando o papel do web browser e do web server . Observe o diagrama a seguir. Nele representamos um cliente estabelecendo comunica\u00e7\u00e3o com um servidor . O cliente envia uma requisi\u00e7\u00e3o - uma solicita\u00e7\u00e3o de recurso - que \u00e9 recepcionada pelo servidor e devolvida ao cliente por meio de uma resposta. Esse modelo de arquitetura distribu\u00edda \u00e9 chamada client/server e define em alto n\u00edvel como ocorre a comunica\u00e7\u00e3o entre web browsers (clientes) e web servers (servidores). flowchart LR Cliente-- Requisi\u00e7\u00e3o -->Servidor-- Resposta -->Cliente Nesta troca de mensagens est\u00e1 sendo utilizado o protocolo HTTP (Hypertext Transfer Protocol), que por sua vez transporta documentos HTML quando recursos s\u00e3o retornados ao cliente. Logo, grande parte da informa\u00e7\u00e3o que trafega na Web \u00e9 representada em HTML. flowchart LR Cliente-- HTTP Request -->Servidor-- HTTP Response -->Cliente O HTML \u00e9 um dos pilares da Web, junto ao protocolo HTTP e o conceito de URI. Define-se como uma linguagem de marca\u00e7\u00e3o, ou seja, uma representa\u00e7\u00e3o de documento em que adicionamos marcas de significado(sem\u00e2ntica) e de estrutura \u00e0 informa\u00e7\u00e3o. O conceito de hipertexto \u00e9 essencial \u00e0 compreens\u00e3o do HTML. De forma simples, entendemos como hipertexto um conjunto de n\u00f3s (palavras, imagens, v\u00eddeos, \u00e1udios, documentos) que possuem liga\u00e7\u00f5es entre si. flowchart TB site1 --hiperlink--> site2; site2 --hiperlink--> site2; site2 --hiperlink--> site1; A linguagem HTML tornou-se um padr\u00e3o de refer\u00eancia a partir de 1997, gra\u00e7as ao trabalho da W3C. Isso garantiu \u00e0 tecnologia interoperabilidade em diferentes plataformas e meios de acesso. A especifica\u00e7\u00e3o corrente da linguagem est\u00e1 dispon\u00edvel no portal da W3C de forma p\u00fablica.","title":"O que \u00e9 HTML?"},{"location":"web/html5/formularios/","text":"","title":"Formularios"},{"location":"web/html5/hiperlinks/","text":"A capacidade da linguagem HTML de expressar relacionamentos entre documentos certamente \u00e9 um dos fatores-chave para o sucesso da web . Os hiperlinks , como chamamos estas liga\u00e7\u00f5es, constituem vias que ligam um documento a outro, contido no mesmo site ou em sites diferentes, atrav\u00e9s de palavras, imagens, v\u00eddeos e outras coisas. Esse emaranhado de vias levou ao termo web , ou seja, uma grande teia de informa\u00e7\u00e3o, cujo caminho a ser seguido depende unicamente das escolhas do usu\u00e1rio. Em nossos documentos HTML5 podemos criar hiperlinks atrav\u00e9s da tag <a> . Para fins did\u00e1ticos, iremos apresentar como criamos \u00e2ncoras posicionais para elementos do documento, links locais e links externos. Para que a tag <a> seja considerada um hiperlink, o atributo href deve estar presente com o endere\u00e7o do recurso. Quando o usu\u00e1rio clicar sobre o objeto que representa o hiperlink (texto, imagem, etc), o navegador ir\u00e1 transportar o usu\u00e1rio at\u00e9 o recurso informado. Outro atributo importante do elemento <a> \u00e9 target . Sua fun\u00e7\u00e3o \u00e9 especificar ao navegador onde o recurso dever\u00e1 ser apresentado (contexto do navegador). As op\u00e7\u00f5es que temos s\u00e3o: _blank : Abre o recurso em nova janela ou aba. _self : Abre o recurso no mesmo contexto de navega\u00e7\u00e3o do documento origem do hiperlink. _parent : Abre o recurso no contexto de navega\u00e7\u00e3o pai. _top : Abre o recurso no contexto de navega\u00e7\u00e3o mais elevado da p\u00e1gina. N\u00e3o apenas recursos obtidos via protocolo HTTP podem ser informados no atributo href . Podemos utiliz\u00e1-lo para v\u00e1rias finalidades, informando valores dos seguintes tipos 1 : URL ( Uniform Resource Locator ) absoluto, como href=\"http://localhost:8000/web/html5/hiperlinks/\" . Quando informado de forma absoluta, frequentemente estamos apontando para um recurso externo ao nosso site. URL relativa , como href=\"hiperlinks/\" . Esse formato \u00e9 utilizado para navegar entre recursos locais do site. Link para algum elemento da p\u00e1gina atrav\u00e9s de seu valor de atributo id , como href=\"#rodape\" . Neste caso, utilizamos para marcar posi\u00e7\u00f5es no documento, a fim de facilitar a navega\u00e7\u00e3o pelo conte\u00fado. Imagine o bot\u00e3o Voltar ao topo , comum em diversos sites. C\u00f3digo JavaScript , como href=\"javascript:alert(\"oi\");\" . Este recurso nos permite executar c\u00f3digo (algum comportamento) a partir de um link. Muito utilizado na programa\u00e7\u00e3o Web. <!DOCTYPE html> < html > < head > < title > Hiperlinks </ title > > < meta charset = \"utf-8\" > </ head > < body > < p > O IFRS \u00e9 uma institui\u00e7\u00e3o federal de ensino p\u00fablico e gratuito. Atua com uma estrutura multicampi para promover a educa\u00e7\u00e3o profissional e tecnol\u00f3gica de excel\u00eancia e impulsionar o desenvolvimento sustent\u00e1vel das regi\u00f5es. Saiba mais em < a href = \"https://ifrs.edu.br/\" target = \"_blank\" > Portal IFRS </ a ></ p > < p > Educa\u00e7\u00e3o profissional (EP) \u00e9 um tema muito importante para o desenvolvimento do pa\u00eds. Escrevemos um artigo abordando a EP, seus sucessos e fracassos na \u00faltima d\u00e9cada. Voc\u00ea encontra o conte\u00fado na \u00edntegra < a href = \"ep.html\" target = \"_self\" > aqui </ a > </ p > . < p > Quer conhecer o planejamento estrat\u00e9gico do IFRS? Ent\u00e3o acesse o < a href = \"https://ifrs.edu.br/wp-content/uploads/2019/07/PDI-FINAL-2018_Arial.pdf\" > PDI </ a ></ p > </ body > </ html > Voc\u00ea deve ter percebido no exemplo que o hiperlink \u00e9 constru\u00eddo a partir do conte\u00fado do elemento <a> . N\u00f3s utilizamos texto, mas poder\u00edamos ter utilizado imagens, v\u00eddeos ou a\u00fadios, por exemplo. W3C. Html <a> href attribute. 2021. URL: https://www.w3schools.com/tags/att_a_href.asp . \u21a9","title":"Hiperlinks"},{"location":"web/html5/imagem/","text":"Adicionar imagens \u00e0 documentos HTML5 \u00e9 algo trivial. O que mais se observa s\u00e3o documentos que utilizam texto, imagens, \u00e1udio e v\u00eddeo de forma combinada para passar a informa\u00e7\u00e3o desejada ao usu\u00e1rio. Em termos de c\u00f3digo, utilizamos o elemento <img> para incorporar imagens ao HTML5. Os atributos obrigat\u00f3rios s\u00e3o src e alt . O primeiro deles indica o caminho para o arquivo, que pode ser absoluto ou relativo. J\u00e1 o atributo alt cont\u00e9m uma descri\u00e7\u00e3o textual que ser\u00e1 exibida pela navegador em substitui\u00e7\u00e3o \u00e0 imagem, caso ela n\u00e3o possa ser apresentada. Outros dois atributos importantes s\u00e3o width (largura) e heigth (altura). Utilizamos eles para especificar as dimens\u00f5es da imagem em pixels. \u00c9 conveniente utilizar valores nestas propriedades para melhorar a experi\u00eancia do usu\u00e1rio quando da carga do recurso pelo navegador. Temos tamb\u00e9m o elemento <figure> , que \u00e9 utilizado para construir um container para figuras, ilustra\u00e7\u00f5es, diagramas, etc. Torna-se necess\u00e1rio quando precisamos adicionar legendas \u00e0s imagens, conforme iremos observar no c\u00f3digo que segue. <!DOCTYPE html> < html > < head > < title > Figuras/Imagens </ title > < meta charset = \"utf-8\" > </ head > < body > < img src = \"https://cdn.pixabay.com/photo/2014/02/17/10/20/statue-of-liberty-267948_960_720.jpg\" alt = \"Est\u00e1tua da Liberdade, Ilha da Liberdade, Nova York, EUA\" width = \"300\" height = \"500\" > < p > Na sequ\u00eancia apresentamos a imagem da Gal\u00e1xia de Andr\u00f4meda para que voc\u00ea aprecie: </ p > < figure > < img src = \"https://pt.wikipedia.org/wiki/Gal%C3%A1xia_de_Andr%C3%B4meda#/media/Ficheiro:Pic_iroberts1.jpg\" alt = \"Gal\u00e1xia de Andr\u00f4meda\" width = \"300\" height = \"500\" /> < < figcaption > Gal\u00e1xia de Andr\u00f4meda: Wikip\u00e9dia </ figcaption > > </ figure > </ body > </ html >","title":"Imagens"},{"location":"web/html5/recursos/","text":"Sites e outros recursos \u00fateis \u00b6 Web.dev W3C Cascading Style Sheets articles and tutorials HTML Living Standard","title":"Recursos"},{"location":"web/html5/recursos/#sites-e-outros-recursos-uteis","text":"Web.dev W3C Cascading Style Sheets articles and tutorials HTML Living Standard","title":"Sites e outros recursos \u00fateis"},{"location":"web/html5/tabelas/","text":"A cria\u00e7\u00e3o de tabelas requer o uso de diferentes elementos HTML de forma adequada. Temos elementos espec\u00edficas para cabe\u00e7alho, rodap\u00e9, conte\u00fado, linhas e colunas. Na sequ\u00eancia abordaremos cada uma delas em detalhes. A elemento <table> \u00e9 utilizada para delimitar a tabela. Como descendentes, podemos indicar o cabe\u00e7alho, conte\u00fado e rodap\u00e9 atrav\u00e9s das elementos <thead> , <tbody> e <tfoot> , respectivamente. Estas elementos n\u00e3o s\u00e3o obrigatorias e s\u00e3o aplicadas para adicionar sem\u00e2ntica ao conte\u00fado da tabela. Efetivamente, os dados da tabela est\u00e3o contidos nas c\u00e9lulas de dados, criadas a partir do elemento <td> , organizadas em linhas especificadas a partir do elemento <tr> . Para c\u00e9lulas que representam cabe\u00e7alhos, podemos utilizar o elemento <th> para diferenciar das c\u00e9lulas de dados. No exemplo que segue apresentamos um documento contendo uma tabela \\(3 \\times 4\\) . A primeira linha representa o cabe\u00e7alho, as duas intermedi\u00e1rias, os dados e a \u00faltima, o rodap\u00e9. Fique atendo ao uso dos elementos para alcan\u00e7ar o resultado. <!DOCTYPE html> < html > < head > < title > Tabela </ title > < meta charset = \"utf-8\" > </ head > < body > < table > < thead > < tr > < th > Estudante </ th > < th > Avalia\u00e7\u00e3o I </ th > < th > Avalia\u00e7\u00e3o II </ th > </ tr > </ thead > < tbody > < tr > < td > Aluno 1 </ td > < td > 9.5 </ td > < td > 5.7 </ td > </ tr > < tr > < td > Aluno 2 </ td > < td > 8.6 </ td > < td > 6.2 </ td > </ tr > </ tbody > < tfoot > < tr > < td ></ td > < td > 8.7 </ td > < td > 6.0 </ td > </ tr > </ tfoot > </ table > </ body > </ html > As linhas da tabela s\u00e3o criadas a partir da abertura de elementos <tr> . Em cada linha, devemos adicionar c\u00e9lulas, sejam de dados ou de cabe\u00e7alho, por meio de <td> e <th> . Cada nova c\u00e9lula requer a abertura e o fechamento do respectivo elemento dentro da linha. Contudo, em alguns casos, precisamos realizar mesclagem de c\u00e9lulas, o que demanda utilizar os atributos rowspan e colspan . Ao aplicar rowspan , indicamos que uma c\u00e9lula se projeta pela quantidade de linhas informada, enquanto que colspan indica a quantidade de colunas que a c\u00e9lula ir\u00e1 preencher. <!DOCTYPE html> < html > < head > < title > Tabela </ title > < meta charset = \"utf-8\" > </ head > < body > < table > < thead > < tr > < th colspan = \"4\" > Faturamento </ th > </ tr > </ thead > < tbody > < tr > < td colspan = \"2\" ></ td > < td > Filial A </ td > < td > Filial B </ td > </ tr > < tr > < td rowspan = \"3\" > 1\u00ba Trimestre </ td > < td > Janeiro </ td > < td > 5 </ td > < td > 6 </ td > </ tr > < tr > < td > Fevereiro < br ></ td > < td > 4 </ td > < td > 5 </ td > </ tr > < tr > < td > Mar\u00e7o </ td > < td > 7 </ td > < td > 8 </ td > </ tr > </ tbody > </ table > </ body > </ html > \u00c9 importante ressaltar que as tabelas devem ser utilizadas para organizar dados e n\u00e3o para diagramar conte\u00fado. De fato, os primeiros web sites utilizavam tabelas como forma de posicionar conte\u00fado, mas na \u00e9poca n\u00e3o havia disponibilidade dos atuais recursos providos pelo HTML5 e CSS3. Portanto, hoje, evite essa m\u00e1 pr\u00e1tica.","title":"Tabelas"},{"location":"web/html5/tags-basicas/","text":"A linguagem HTML5 \u00e9 composta por um conjunto de tags (ou elementos). Cada tag serve a um prop\u00f3sito, atribuindo um significado - sem\u00e2ntica - ao conte\u00fado envolvido. Quando aplicadas a um documento, a tag \u00e9 aberta e fechada, ficando o conte\u00fado em meio. Observe a sintaxe de escrita: Abertura da tag : colocamos o nome da tag entre os s\u00edmbolos de \\(<\\) e \\(>\\) . < p > Fecho da tag : colocamos o s\u00edmbolo \\(/\\) antes do nome da tag. </ p > A tag p , por exemplo, \u00e9 utilizada para demarcar par\u00e1grafos em um documento HTML5. Logo, qualquer conte\u00fado entre a abertura e o fechamento da tag compreende o conte\u00fado de um par\u00e1grafo. Observe: < p > Aqui est\u00e1 um novo par\u00e1grafo! </ p > As tags podem conter atributos , que s\u00e3o propriedades que customizam/modificam comportamentos ou associam valores espec\u00edficos aos elementos. Assim como os nomes de tags, os atributos s\u00e3o pr\u00e9-definidos, ou seja, n\u00e3o podemos inventar novos. H\u00e1 atributos que s\u00e3o globais 1 , ou seja, que est\u00e3o dispon\u00edveis a todas as tags e outros s\u00e3o espec\u00edficos a algumas tags. Os atributos s\u00e3o informados na abertura da tag, por meio do seu nome, s\u00edmbolo \\(=\\) e o respectivo valor entre aspas duplas. Acompanhe o exemplo: < p id = \"par01\" class = \"vermelho\" style = \"font-size:1.3rem\" > Aqui est\u00e1 um novo par\u00e1grafo! </ p > Documento e Metadados \u00b6 <html> : Chamada de root tag , corresponde ao elemento que envolve todo documento. Todas as demais tags devem ser descendentes diretas ou indiretas de <html> . Espera-se que sigam apenas o elemento <head> e o elemento <body> . O elemento mais importante da tag \u00e9 lang , que especifica o idioma do conte\u00fado 2 . <head> : Utilizada para indicar informa\u00e7\u00f5es gerais do documento, como metadados e vincula\u00e7\u00f5es com scripts e folhas de estilo 2 . Como descendentes diretas de <head> temos: <meta> : Permite definir metadados que n\u00e3o podem ser especificados em outras tags. <title> : Metadado que define o t\u00edtulo do documento ou seu nome. No m\u00e1ximo uma ocorr\u00eancia \u00e9 permitida. <link> : Permite especificar as rela\u00e7\u00f5es entre o documento e outro recurso externo. Utilizado especialmente para vincular folhas de estilo. O endere\u00e7o do recurso vinculado fica no atributo href . J\u00e1 o atributo rel indica o tipo de relacionamento estabelecido, que deve considerar um conjunto de op\u00e7\u00f5es definidas pela linguagem. <style> : Permite incluir regras de estilo ao documento. <script> : Permite definir ou referenciar um script execut\u00e1vel (JavaScript). A tag pode aparecer no corpo do documento e h\u00e1 diferen\u00e7as entre uma op\u00e7\u00e3o e outra. <body> : Todo documento cont\u00e9m apenas uma tag <body> e nela colocamos o conte\u00fado que ser\u00e1 exibido pelo navegador. Agora vamos colocar todos estes elementos juntos, de sorte a criar um documento b\u00e1sico e v\u00e1lido. Observe que devemos acrescentar na primeira linha <!DOCTYPE html> para indicar que o documento est\u00e1 na vers\u00e3o HTML5. Tamb\u00e9m \u00e9 preciso que fique claro que algumas tags n\u00e3o s\u00e3o obrigat\u00f3rias, como <meta> , <title> , <script> e <style> . <!DOCTYPE html> < html > < head > < title > Minha primeira p\u00e1gina </ title > < meta charset = \"utf-8\" > < script > alert ( \"Ol\u00e1, mundo\" ); </ script > < style > p { color : red ; } </ style > </ head > < body > <!--O conte\u00fado do documento--> </ body > </ html > Percebeu que as tags s\u00e3o abertas e fechadas respeitando a hierarquia? Bem, isso \u00e9 essencial para construirmos um documento bem formado, que ser\u00e1 corretamente interpretado pelo navegador. A ideia \u00e9 simples: a tag deve ser fechada sempre no mesmo n\u00edvel em que foi aberta . Dica Estamos considerando esta forma estrita de sintaxe para facilitar o aprendizado. O padr\u00e3o HTML especifica regras mais brandas para a quest\u00e3o de abertura e fechamento de tags. Sem\u00e2ntica de Texto \u00b6 Vamos agora abordar as principais tags utilizadas para atribuir sem\u00e2ntica a texto. Para par\u00e1grafos j\u00e1 sabemos que a tag a ser utilizada \u00e9 p , mas \u00e9 preciso adicionar uma informa\u00e7\u00e3o importante, que aplica-se a todas as demais tags: o formato que o navegador utiliza para desenhar o conte\u00fado na tela considera a defini\u00e7\u00e3o padr\u00e3o de estilo do elemento. <p> : Utilizado para criar um par\u00e1grafo. <small> : Representa coment\u00e1rios colaterais, textos de menor relev\u00e2ncia 2 . <s> : Representa conte\u00fado desatualizado ou que n\u00e3o \u00e9 mais relevante 2 . <strong> : Representa um conte\u00fado de maior seriedade, import\u00e2ncia ou urgente. Quanto mais ancestrais strong houver, maior ser\u00e1 a relev\u00e2ncia do conte\u00fado 2 . <br> : Utilizado para representar uma quebra de linha. <pre> : Representa um texto pr\u00e9-formatado, apresentado pelo navegador respeitando a forma em que ele foi inserido no documento. <i> : Corresponde a uma sequencia de texto que distingue-se do restante por estar em outro idioma, ser neologismo, termo t\u00e9cnico ou algo semelhante. <sup> : Usado para adicionar conte\u00fado sobrescrito <sub> : Usado para adicionar conte\u00fado subscrito <mark> : Usado para evidenciar um trecho de conte\u00fado, com vistas a notificar o leitor de sua relev\u00e2ncia. <em> : Utilizado para enfatizar fortemente um determinado trecho de conte\u00fado. Quanto mais ancestrais em houver, maior ser\u00e1 a \u00eanfase ao trecho 2 . <code> : Aplicado para conte\u00fado que representa trechos de c\u00f3digo de programas de computador. <span> : Utilizado para demarcar um trecho de conte\u00fado para alguma finalidade espec\u00edfica. A tag, em si, n\u00e3o adiciona qualquer sem\u00e2ntica ao conte\u00fado. <q> : Demarca cita\u00e7\u00f5es curtas, apresentadas em meio a outro conte\u00fado. <quote> : Utilizado para especificar o t\u00edtulo de um trabalho (livro, programa de computador, artigo, etc.). N\u00e3o devemos utilizar para envolver nomes de autores, somente o t\u00edtulo da obra. <blockquote> : Demarca cita\u00e7\u00f5es longas. <cite> : Utilizado para especificar o t\u00edtulo de um trabalho (livro, programa de computador, artigo, etc.). N\u00e3o devemos utilizar para envolver nomes de autores, somente o t\u00edtulo da obra 2 . <span> : O elemento n\u00e3o prov\u00ea nenhuma sem\u00e2ntica. \u00c9 utilizado normalmente em conjunto com atributos globais para agrupar trechos de conte\u00fado textual a fim de facilitar a plica\u00e7\u00e3o de estilos, por exemplo. T\u00edtulos \u00b6 No HTML5 temos a possibilidade de utilizar seis n\u00edveis de t\u00edtulos. Para isso, temos dispon\u00edveis as tags <h1> , <h2> , <h3> , <h4> , <h5> e <h6> . T\u00edtulos <h1> s\u00e3o os de maior import\u00e2ncia, e na medida que o n\u00famero aumenta, a relev\u00e2ncia do t\u00edtulo diminui 3 . Veja um exemplo de documento contendo quatro n\u00edveis de t\u00edtulos. <!DOCTYPE html> < html > < head > < title > T\u00edtulos </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > T\u00edtulo de primeiro n\u00edvel </ h1 > < p > Este \u00e9 um par\u00e1grafo </ p > < h2 > T\u00edtulo de segundo n\u00edvel </ h2 > < p > Este \u00e9 um par\u00e1grafo </ p > < h3 > T\u00edtulo de terceiro n\u00edvel </ h3 > < p > Este \u00e9 um par\u00e1grafo </ p > < h4 > T\u00edtulo de quarto n\u00edvel </ h4 > < p > Este \u00e9 um par\u00e1grafo </ p > </ body > </ html > Listas \u00b6 As listas s\u00e3o utilizadas para elencar itens de forma ordenada ou n\u00e3o. Para cada caso, temos a disposi\u00e7\u00e3o uma tag diferente: se o objetivo \u00e9 utilizar uma lista ordenada , ent\u00e3o utilizaremos <ol> e, caso haja interesse em uma lista n\u00e3o ordenada , ent\u00e3o devemos usar <ul> . Quando os elementos da lista, para ambos os casos, utilizamos a tag <li> . Vamos imaginar que seja necess\u00e1rio criar a lista da feira utilizando HTML5. Como n\u00e3o h\u00e1 ordem associada, iremos utilizar uma lista n\u00e3o-ordenada na constru\u00e7\u00e3o do documento. Vejamos o resultado: <!DOCTYPE html> < html > < head > < title > Lista da Feira </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Compras: </ h1 > < ul > < li > Alface </ li > < li > Couve </ li > < li > Br\u00f3colis </ li > < li > Cenoura </ li > < li > Piment\u00e3o </ li > </ ul > </ body > </ html > Por outro lado, se quis\u00e9ssemos listar em um documento a classifica\u00e7\u00e3o de estudantes em uma avalia\u00e7\u00e3o qualquer, utilizar\u00edamos uma lista ordenada, porque, obviamente, temos ordem associada. <!DOCTYPE html> < html > < head > < title > Classifica\u00e7\u00e3o na Prova de Culin\u00e1ria </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Participantes: </ h1 > < ul > < li > Jo\u00e3o </ li > < li > Amanda </ li > < li > Angela </ li > < li > Pedro </ li > < li > Miguel </ li > </ ul > </ body > </ html > W3Schools. Html global attributes. 2021. URL: https://webfoundation.org/about/vision/history-of-the-web/ . \u21a9 WHATWG Community. Html living standard \u2014 last updated 17 september 2021. Technical Report, WHATWG, 2021. URL: https://html.spec.whatwg.org/multipage/ . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 MDN Web Docs. <h1>\u2013<h6>: the html section heading elements. 2021. URL: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements . \u21a9","title":"Conceitos B\u00e1sicos"},{"location":"web/html5/tags-basicas/#documento-e-metadados","text":"<html> : Chamada de root tag , corresponde ao elemento que envolve todo documento. Todas as demais tags devem ser descendentes diretas ou indiretas de <html> . Espera-se que sigam apenas o elemento <head> e o elemento <body> . O elemento mais importante da tag \u00e9 lang , que especifica o idioma do conte\u00fado 2 . <head> : Utilizada para indicar informa\u00e7\u00f5es gerais do documento, como metadados e vincula\u00e7\u00f5es com scripts e folhas de estilo 2 . Como descendentes diretas de <head> temos: <meta> : Permite definir metadados que n\u00e3o podem ser especificados em outras tags. <title> : Metadado que define o t\u00edtulo do documento ou seu nome. No m\u00e1ximo uma ocorr\u00eancia \u00e9 permitida. <link> : Permite especificar as rela\u00e7\u00f5es entre o documento e outro recurso externo. Utilizado especialmente para vincular folhas de estilo. O endere\u00e7o do recurso vinculado fica no atributo href . J\u00e1 o atributo rel indica o tipo de relacionamento estabelecido, que deve considerar um conjunto de op\u00e7\u00f5es definidas pela linguagem. <style> : Permite incluir regras de estilo ao documento. <script> : Permite definir ou referenciar um script execut\u00e1vel (JavaScript). A tag pode aparecer no corpo do documento e h\u00e1 diferen\u00e7as entre uma op\u00e7\u00e3o e outra. <body> : Todo documento cont\u00e9m apenas uma tag <body> e nela colocamos o conte\u00fado que ser\u00e1 exibido pelo navegador. Agora vamos colocar todos estes elementos juntos, de sorte a criar um documento b\u00e1sico e v\u00e1lido. Observe que devemos acrescentar na primeira linha <!DOCTYPE html> para indicar que o documento est\u00e1 na vers\u00e3o HTML5. Tamb\u00e9m \u00e9 preciso que fique claro que algumas tags n\u00e3o s\u00e3o obrigat\u00f3rias, como <meta> , <title> , <script> e <style> . <!DOCTYPE html> < html > < head > < title > Minha primeira p\u00e1gina </ title > < meta charset = \"utf-8\" > < script > alert ( \"Ol\u00e1, mundo\" ); </ script > < style > p { color : red ; } </ style > </ head > < body > <!--O conte\u00fado do documento--> </ body > </ html > Percebeu que as tags s\u00e3o abertas e fechadas respeitando a hierarquia? Bem, isso \u00e9 essencial para construirmos um documento bem formado, que ser\u00e1 corretamente interpretado pelo navegador. A ideia \u00e9 simples: a tag deve ser fechada sempre no mesmo n\u00edvel em que foi aberta . Dica Estamos considerando esta forma estrita de sintaxe para facilitar o aprendizado. O padr\u00e3o HTML especifica regras mais brandas para a quest\u00e3o de abertura e fechamento de tags.","title":"Documento e Metadados"},{"location":"web/html5/tags-basicas/#semantica-de-texto","text":"Vamos agora abordar as principais tags utilizadas para atribuir sem\u00e2ntica a texto. Para par\u00e1grafos j\u00e1 sabemos que a tag a ser utilizada \u00e9 p , mas \u00e9 preciso adicionar uma informa\u00e7\u00e3o importante, que aplica-se a todas as demais tags: o formato que o navegador utiliza para desenhar o conte\u00fado na tela considera a defini\u00e7\u00e3o padr\u00e3o de estilo do elemento. <p> : Utilizado para criar um par\u00e1grafo. <small> : Representa coment\u00e1rios colaterais, textos de menor relev\u00e2ncia 2 . <s> : Representa conte\u00fado desatualizado ou que n\u00e3o \u00e9 mais relevante 2 . <strong> : Representa um conte\u00fado de maior seriedade, import\u00e2ncia ou urgente. Quanto mais ancestrais strong houver, maior ser\u00e1 a relev\u00e2ncia do conte\u00fado 2 . <br> : Utilizado para representar uma quebra de linha. <pre> : Representa um texto pr\u00e9-formatado, apresentado pelo navegador respeitando a forma em que ele foi inserido no documento. <i> : Corresponde a uma sequencia de texto que distingue-se do restante por estar em outro idioma, ser neologismo, termo t\u00e9cnico ou algo semelhante. <sup> : Usado para adicionar conte\u00fado sobrescrito <sub> : Usado para adicionar conte\u00fado subscrito <mark> : Usado para evidenciar um trecho de conte\u00fado, com vistas a notificar o leitor de sua relev\u00e2ncia. <em> : Utilizado para enfatizar fortemente um determinado trecho de conte\u00fado. Quanto mais ancestrais em houver, maior ser\u00e1 a \u00eanfase ao trecho 2 . <code> : Aplicado para conte\u00fado que representa trechos de c\u00f3digo de programas de computador. <span> : Utilizado para demarcar um trecho de conte\u00fado para alguma finalidade espec\u00edfica. A tag, em si, n\u00e3o adiciona qualquer sem\u00e2ntica ao conte\u00fado. <q> : Demarca cita\u00e7\u00f5es curtas, apresentadas em meio a outro conte\u00fado. <quote> : Utilizado para especificar o t\u00edtulo de um trabalho (livro, programa de computador, artigo, etc.). N\u00e3o devemos utilizar para envolver nomes de autores, somente o t\u00edtulo da obra. <blockquote> : Demarca cita\u00e7\u00f5es longas. <cite> : Utilizado para especificar o t\u00edtulo de um trabalho (livro, programa de computador, artigo, etc.). N\u00e3o devemos utilizar para envolver nomes de autores, somente o t\u00edtulo da obra 2 . <span> : O elemento n\u00e3o prov\u00ea nenhuma sem\u00e2ntica. \u00c9 utilizado normalmente em conjunto com atributos globais para agrupar trechos de conte\u00fado textual a fim de facilitar a plica\u00e7\u00e3o de estilos, por exemplo.","title":"Sem\u00e2ntica de Texto"},{"location":"web/html5/tags-basicas/#titulos","text":"No HTML5 temos a possibilidade de utilizar seis n\u00edveis de t\u00edtulos. Para isso, temos dispon\u00edveis as tags <h1> , <h2> , <h3> , <h4> , <h5> e <h6> . T\u00edtulos <h1> s\u00e3o os de maior import\u00e2ncia, e na medida que o n\u00famero aumenta, a relev\u00e2ncia do t\u00edtulo diminui 3 . Veja um exemplo de documento contendo quatro n\u00edveis de t\u00edtulos. <!DOCTYPE html> < html > < head > < title > T\u00edtulos </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > T\u00edtulo de primeiro n\u00edvel </ h1 > < p > Este \u00e9 um par\u00e1grafo </ p > < h2 > T\u00edtulo de segundo n\u00edvel </ h2 > < p > Este \u00e9 um par\u00e1grafo </ p > < h3 > T\u00edtulo de terceiro n\u00edvel </ h3 > < p > Este \u00e9 um par\u00e1grafo </ p > < h4 > T\u00edtulo de quarto n\u00edvel </ h4 > < p > Este \u00e9 um par\u00e1grafo </ p > </ body > </ html >","title":"T\u00edtulos"},{"location":"web/html5/tags-basicas/#listas","text":"As listas s\u00e3o utilizadas para elencar itens de forma ordenada ou n\u00e3o. Para cada caso, temos a disposi\u00e7\u00e3o uma tag diferente: se o objetivo \u00e9 utilizar uma lista ordenada , ent\u00e3o utilizaremos <ol> e, caso haja interesse em uma lista n\u00e3o ordenada , ent\u00e3o devemos usar <ul> . Quando os elementos da lista, para ambos os casos, utilizamos a tag <li> . Vamos imaginar que seja necess\u00e1rio criar a lista da feira utilizando HTML5. Como n\u00e3o h\u00e1 ordem associada, iremos utilizar uma lista n\u00e3o-ordenada na constru\u00e7\u00e3o do documento. Vejamos o resultado: <!DOCTYPE html> < html > < head > < title > Lista da Feira </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Compras: </ h1 > < ul > < li > Alface </ li > < li > Couve </ li > < li > Br\u00f3colis </ li > < li > Cenoura </ li > < li > Piment\u00e3o </ li > </ ul > </ body > </ html > Por outro lado, se quis\u00e9ssemos listar em um documento a classifica\u00e7\u00e3o de estudantes em uma avalia\u00e7\u00e3o qualquer, utilizar\u00edamos uma lista ordenada, porque, obviamente, temos ordem associada. <!DOCTYPE html> < html > < head > < title > Classifica\u00e7\u00e3o na Prova de Culin\u00e1ria </ title > < meta charset = \"utf-8\" > </ head > < body > < h1 > Participantes: </ h1 > < ul > < li > Jo\u00e3o </ li > < li > Amanda </ li > < li > Angela </ li > < li > Pedro </ li > < li > Miguel </ li > </ ul > </ body > </ html > W3Schools. Html global attributes. 2021. URL: https://webfoundation.org/about/vision/history-of-the-web/ . \u21a9 WHATWG Community. Html living standard \u2014 last updated 17 september 2021. Technical Report, WHATWG, 2021. URL: https://html.spec.whatwg.org/multipage/ . \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 MDN Web Docs. <h1>\u2013<h6>: the html section heading elements. 2021. URL: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements . \u21a9","title":"Listas"},{"location":"web/html5/tags-estruturais/","text":"Um documento escrito em HTML pode ter seu conte\u00fado dividido em diferentes segmentos, como cabe\u00e7alho, rodap\u00e9, se\u00e7\u00f5es, artigos, barra de navega\u00e7\u00e3o e informa\u00e7\u00f5es associadas. Antes do HTML5, a divis\u00e3o destes conte\u00fados era feita basicamente por meio de divis\u00f5es gen\u00e9ricas (tag <div> ), o que conferia a estrutura desejada para o desenvolvedor, mas n\u00e3o atribuia a sem\u00e2ntica necess\u00e1ria para interpreta\u00e7\u00e3o autom\u00e1tica da informa\u00e7\u00e3o. Para ilustrar a situa\u00e7\u00e3o, vamos imaginar a p\u00e1gina inicial de um web site fict\u00edcio. Inicialmente iremos utilizar apenas divis\u00f5es para segmentar o conte\u00fado e, na sequ\u00eancia, faremos uso das tags espec\u00edficas do HTML5. No primeiro caso aplicamos v\u00e1rias vezes a tag <div> para organizar o conte\u00fado e utilizamos o atributo global id para indicar o significado de cada segmento. Embora a estrat\u00e9gia de utilizar <div> atenda ao objetivo do desenvolvedor, qualquer processamento autom\u00e1tico de conte\u00fado do documento fica muito dif\u00edcil de ser realizado. Vamos imaginar, por exemplo, que quis\u00e9ssemos obter somente os artigos do conte\u00fado da p\u00e1gina. Talvez voc\u00ea possa pensar: ok, basta consultar o conte\u00fado das <div> s que cont\u00e9m em seu atributo id os valores art1 ou art2 . Se o documento preservar os identificadores de artigos, ent\u00e3o o algoritmo funciona, \u00e9 claro, somente para esta p\u00e1gina espec\u00edfica. O tempo passa, a p\u00e1gina \u00e9 modificada e novos artigos s\u00e3o adicionados. \u00c9 preciso vasculhar o HTML, entender quais marcas foram atribu\u00eddas pelo desenvolvedor aos novos artigos e ent\u00e3o ajustar o algoritmo para colet\u00e1-los. A\u00ed come\u00e7am os problemas... <!DOCTYPE html> < html > < head > < title > IFRS News </ title > < meta charset = \"utf-8\" > </ head > < body > < div id = \"cabecalho\" > < ul > < li >< a href = \"home.html\" > Home </ a ></ li > < li >< a href = \"ensino.html\" > Ensino </ a ></ li > < li >< a href = \"pesquisa.html\" > Pesquisa </ a ></ li > < li >< a href = \"extensao.html\" > Extens\u00e3o </ a ></ li > </ ul > </ div > < div id = \"conteudo\" > < div id = \"secao_academico\" > < h1 > Informa\u00e7\u00f5es Acad\u00eamicas </ h1 > < div id = \"art1\" > < h2 > Ensino Remoto </ h2 > < p > O ensino remoto ... </ p > </ div > </ div > < div id = \"secao_processo_seletivo\" > < h1 > Processo Seletivo </ h1 > < div id = \"art2\" > < h2 > Ingresso 2022/1 </ h2 > < p > O processo seletivo 2022/1 ... </ p > </ div > </ div > </ div > < div id = \"rodape\" > < address > < small > Rua General Os\u00f3rio, 348 \u2013 Bairro Centro \u2013 Bento Gon\u00e7alves/RS </ small > < small > CEP: 95700-086 </ small > </ address > </ div > </ body > </ html > Quando utilizamos tags gen\u00e9ricas para representar conte\u00fado, precisamos adicionar alguma informa\u00e7\u00e3o em seus atributos para que possamos (n\u00f3s, humanos) diferenciar seu conte\u00fado das demais. Ocorre que o sentido que atribu\u00edmos a partir destas informa\u00e7\u00f5es adicionais n\u00e3o \u00e9 expl\u00edcito, pois dependente da interpreta\u00e7\u00e3o do contexto. Esta sem\u00e2ntica n\u00e3o \u00e9 precisa, formal. Nada impede que o desenvolvedor atribua ao id de uma <div> o valor xyz01 , com vistas a denotar um artigo. Qual software poderia facilmente deduzir o significado contextual desta informa\u00e7\u00e3o? Em raz\u00e3o destas dificuldades de representa\u00e7\u00e3o de tipos de conte\u00fado por meio de tags gen\u00e9ricas, o HTML5 trouxe um conjunto de novas tags , v\u00e1rias delas voltadas \u00e0 sem\u00e2ntica de conte\u00fado. Vejamos algumas: <article> : Representa um trecho de conte\u00fado independente, autocontido, que pode ser distribu\u00eddo sem o restante da p\u00e1gina. <section> : Indica uma se\u00e7\u00e3o gen\u00e9rica de conte\u00fado. <aside> : Se\u00e7\u00e3o de conte\u00fado tangencialmente relacionado ao seu entorno, o qual poderia ser removido sem representar uma perda significativa para a compreens\u00e3o. <footer> : Utilizado para rodap\u00e9 de se\u00e7\u00f5es, para registro de informa\u00e7\u00f5es de direitos autorais, autoria e links relacionados. <header> : Conte\u00fado introdut\u00f3rio, cabe\u00e7alho, recursos iniciais de navega\u00e7\u00e3o. <nav> : Segmento do documento reservado para navega\u00e7\u00e3o. <main> : Especifica o trecho do documento que cont\u00e9m o conte\u00fado principal. Com estas novas tags \u00e9 poss\u00edvel interpretar o significado dos trechos de conte\u00fado de forma inequ\u00edvoca. Vamos refazer nossa p\u00e1gina, agora aplicando as tags descritas ao inv\u00e9s de <div> s, para demonstrar a diferen\u00e7a. <!DOCTYPE html> < html > < head > < title > IFRS News </ title > < meta charset = \"utf-8\" > </ head > < body > < header > < nav > < ul > < li >< a href = \"home.html\" > Home </ a ></ li > < li >< a href = \"ensino.html\" > Ensino </ a ></ li > < li >< a href = \"pesquisa.html\" > Pesquisa </ a ></ li > < li >< a href = \"extensao.html\" > Extens\u00e3o </ a ></ li > </ ul > </ nav > </ header > < main > < section > < header > < h1 > Informa\u00e7\u00f5es Acad\u00eamicas </ h1 > </ header > < article > < h2 > Ensino Remoto </ h2 > < p > O ensino remoto ... </ p > </ article > </ section > < section > < header > < h1 > Processo Seletivo </ h1 > </ header > < article > < h2 > Ingresso 2022/1 </ h2 > < p > O processo seletivo 2022/1 ... </ p > </ article > </ section > </ main > < footer > < address > < small > Rua General Os\u00f3rio, 348 \u2013 Bairro Centro \u2013 Bento Gon\u00e7alves/RS </ small > < small > CEP: 95700-086 </ small > </ address > </ footer > </ body > </ html > Agora \u00e9 natural perceber o que significam os segmentos de conte\u00fado, tanto para n\u00f3s, humanos, quando para softwares que interpretam o documento, como os navegadores. E tudo isso por conta da tag utilizada, que possui sem\u00e2ntica (significado) espec\u00edfico.","title":"Estruturando Conte\u00fado"}]}